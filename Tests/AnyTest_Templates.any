#ifndef ANYTESTTEMPLATES
#define ANYTESTTEMPLATES


#class_template ASSERT_TRUE (val1, Err = "Error") {
  AnyInt test = andfun(val1, 1);
  #var AnyInt TriggerPreProcess = 1;
  #var AnyInt TriggerConst = 1;
  #var AnyInt TriggerRuntime = 1;
  AnyMessage Assertion  = {
      TriggerConst = not( andfun(.TriggerPreProcess, .test ));
      TriggerRuntime = not( andfun(.TriggerRuntime , .test ));
      TriggerPreProcess = not( andfun(.TriggerPreProcess , .test ));
      Type = MSG_ErrorFatal ;
      Message = Err;
   };
};

#class_template ASSERT_FALSE (val1, Err = "Error") {
  AnyInt test = not(val1);
  #var AnyInt TriggerPreProcess = 1;
  #var AnyInt TriggerConst = 1;
  #var AnyInt TriggerRuntime = 1;
  AnyMessage Assertion  = {
      TriggerConst = not( andfun(.TriggerPreProcess, .test ));
      TriggerRuntime = not( andfun(.TriggerRuntime , .test ));
      TriggerPreProcess = not( andfun(.TriggerPreProcess , .test ));
      Type = MSG_ErrorFatal ;
      Message = Err;
   };
};

#class_template ASSERT_EQ (val1, val2, Err = "Error") {
  AnyInt test = eqfun(val1,val2)  ;
  #var AnyInt TriggerPreProcess = 1;
  #var AnyInt TriggerConst = 1;
  #var AnyInt TriggerRuntime = 1;
  AnyMessage Assertion  = {
      TriggerConst = not( andfun(.TriggerPreProcess, .test ));
      TriggerRuntime = not( andfun(.TriggerRuntime , .test ));
      TriggerPreProcess = not( andfun(.TriggerPreProcess , .test ));
      Type = MSG_ErrorFatal ;
      Message = Err;
   };
};

#class_template ASSERT_NE (val1, val2, Err = "Error") {
  AnyInt test = neqfun(val1,val2)  ;
  #var AnyInt TriggerPreProcess = 1;
  #var AnyInt TriggerConst = 1;
  #var AnyInt TriggerRuntime = 1;
  AnyMessage Assertion  = {
      TriggerConst = not( andfun(.TriggerPreProcess, .test ));
      TriggerRuntime = not( andfun(.TriggerRuntime , .test ));
      TriggerPreProcess = not( andfun(.TriggerPreProcess , .test ));
      Type = MSG_ErrorFatal ;
      Message = Err;
   };
};

#class_template ASSERT_LT (val1, val2, Err = "Error") {
  AnyInt test = ltfun(val1,val2)  ;
  #var AnyInt TriggerPreProcess = 1;
  #var AnyInt TriggerConst = 1;
  #var AnyInt TriggerRuntime = 1;
  AnyMessage Assertion  = {
      TriggerConst = not( andfun(.TriggerPreProcess, .test ));
      TriggerRuntime = not( andfun(.TriggerRuntime , .test ));
      TriggerPreProcess = not( andfun(.TriggerPreProcess , .test ));
      Type = MSG_ErrorFatal ;
      Message = Err;
   };
};

#class_template ASSERT_LE (val1, val2, Err = "Error") {
  AnyInt test = lteqfun(val1,val2)  ;
  #var AnyInt TriggerPreProcess = 1;
  #var AnyInt TriggerConst = 1;
  #var AnyInt TriggerRuntime = 1;
  AnyMessage Assertion  = {
      TriggerConst = not( andfun(.TriggerPreProcess, .test ));
      TriggerRuntime = not( andfun(.TriggerRuntime , .test ));
      TriggerPreProcess = not( andfun(.TriggerPreProcess , .test ));
      Type = MSG_ErrorFatal ;
      Message = Err;
   };
};


#class_template ASSERT_GT (val1, val2, Err = "Error") {
  AnyInt test = gtfun(val1,val2)  ;
  #var AnyInt TriggerPreProcess = 1;
  #var AnyInt TriggerConst = 1;
  #var AnyInt TriggerRuntime = 1;
  AnyMessage Assertion  = {
      TriggerConst = not( andfun(.TriggerPreProcess, .test ));
      TriggerRuntime = not( andfun(.TriggerRuntime , .test ));
      TriggerPreProcess = not( andfun(.TriggerPreProcess , .test ));
      Type = MSG_ErrorFatal ;
      Message = Err;
   };
};

#class_template ASSERT_GE (val1, val2, Err = "Error") {
  AnyInt test = gteqfun(val1,val2)  ;
  #var AnyInt TriggerPreProcess = 1;
  #var AnyInt TriggerConst = 1;
  #var AnyInt TriggerRuntime = 1;
  AnyMessage Assertion  = {
      TriggerConst = not( andfun(.TriggerPreProcess, .test ));
      TriggerRuntime = not( andfun(.TriggerRuntime , .test ));
      TriggerPreProcess = not( andfun(.TriggerPreProcess , .test ));
      Type = MSG_ErrorFatal ;
      Message = Err;
   };
};

/*
|  Fatal assertion                             |  Nonfatal assertion                         | Verifies
| -------------------------------------------- | ------------------------------------------- | ----------------------------------------
|  ASSERT_TRUE(condition);                     |  EXPECT_TRUE(condition);                    | condition is true
|  ASSERT_FALSE(condition);                    |  EXPECT_FALSE(condition);                   | 


|  Fatal assertion                             |  Nonfatal assertion                         | Verifies
| -------------------------------------------- | ------------------------------------------- | ----------------------------------------
|  ASSERT_EQ(expected, actual);                |  EXPECT_EQ(expected, actual);               | expected == actual
|  ASSERT_NE(val1, val2);                      |  EXPECT_NE(val1, val2);                     | val1 != val2
|  ASSERT_LT(val1, val2);                      |  EXPECT_LT(val1, val2);                     | val1 < val2
|  ASSERT_LE(val1, val2);                      |  EXPECT_LE(val1, val2);                     | val1 <= val2
|  ASSERT_GT(val1, val2);                      |  EXPECT_GT(val1, val2);                     | val1 > val2
|  ASSERT_GE(val1, val2);                      |  EXPECT_GE(val1, val2);                     | 

## Some possible strings assertions that we haven't impletemented yet. 

|  Fatal assertion                             |  Nonfatal assertion                         | Verifies
| -------------------------------------------- | ------------------------------------------- | ----------------------------------------
|  ASSERT_STREQ(expected_str, actual_str);     |  EXPECT_STREQ(expected_str, actual_str);    | the two strings have the same content
|  ASSERT_STRNE(str1, str2);                   |  EXPECT_STRNE(str1, str2);                  | the two strings have different content
|  ASSERT_STRCASEEQ(expected_str, actual_str); |  EXPECT_STRCASEEQ(expected_str, actual_str);| the two strings have the same content, ignoring case
|  ASSERT_STRCASENE(str1, str2);               |  EXPECT_STRCASENE(str1, str2)               | 
*/
#endif