/* ----------------------------------------------------------------
Default mannequin drivers:

-The pelvis is locked to the ground 
-The remaining degrees of freedom are controlled by parameters in the "<BM_MANNEQUIN_FILE>" file.
-This file is a good way to get an overview of the dof in the full body model
 all the dof in the body model is driven from this file.
-In total 

Soeren, March 1, 2006.
----------------------------------------------------------------  */
  // ************************************
  // Drivers for attaching the pelvis to the global reference system
  // ************************************  

  #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
    AnyFunConst constfun = {Value = {0.001};};
  #endif
  
  #if BM_GLOBAL_REFERENCE_FRAME_SWITCH == OFF
    AnyFixedRefFrame GenericGRF = {Origin={0,0,0};};
  #endif
  
  AnyFolder &JntPos = .Mannequin.Posture;
  AnyFolder &JntVel = .Mannequin.PostureVel;
  
  #if BM_MANNEQUIN_DRIVER_PELVIS_POS_X == ON
  AnyKinEqSimpleDriver PelvisGroundDriverPosX ={
    AnyKinLinear lin ={
      #if BM_GLOBAL_REFERENCE_FRAME_SWITCH == OFF
        AnyFixedRefFrame &ref1 =..GenericGRF;
      #else
        AnyFixedRefFrame &ref1 = BM_GLOBAL_REFERENCE_FRAME;
      #endif
      AnySeg &ref2 = ...BodyModel.Trunk.SegmentsLumbar.PelvisSeg;
    };
    MeasureOrganizer = {0};
    DriverPos={.JntPos.PelvisPosX};
    DriverVel={.JntVel.PelvisPosX};
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif
  };
  #else
  #endif
  
  
  #if BM_MANNEQUIN_DRIVER_PELVIS_POS_Y == ON
  AnyKinEqSimpleDriver PelvisGroundDriverPosY ={
    AnyKinLinear lin ={
      #if BM_GLOBAL_REFERENCE_FRAME_SWITCH == OFF
        AnyFixedRefFrame &ref1 =..GenericGRF;
      #else
        AnyFixedRefFrame &ref1 = BM_GLOBAL_REFERENCE_FRAME;
      #endif
      AnySeg &ref2 =  ...BodyModel.Trunk.SegmentsLumbar.PelvisSeg;
    };
    MeasureOrganizer = {1};
    DriverPos={.JntPos.PelvisPosY};
    DriverVel={.JntVel.PelvisPosY};
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif
  };
  #else
  #endif

  
  
  #if BM_MANNEQUIN_DRIVER_PELVIS_POS_Z == ON
  AnyKinEqSimpleDriver PelvisGroundDriverPosZ ={
    AnyKinLinear lin ={
      #if BM_GLOBAL_REFERENCE_FRAME_SWITCH == OFF
        AnyFixedRefFrame &ref1 =..GenericGRF;
      #else
        AnyFixedRefFrame &ref1 = BM_GLOBAL_REFERENCE_FRAME;
      #endif
      AnySeg &ref2 =...BodyModel.Trunk.SegmentsLumbar.PelvisSeg;
    };
    MeasureOrganizer = {2};
    DriverPos={.JntPos.PelvisPosZ};
    DriverVel={.JntVel.PelvisPosZ};
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif
  };
  #else
  #endif

  
  #if BM_MANNEQUIN_DRIVER_PELVIS_ROT_Z == ON
  AnyKinEqSimpleDriver PelvisGroundDriverRotZ ={
    AnyKinRotational rot ={
      #if BM_GLOBAL_REFERENCE_FRAME_SWITCH == OFF
        AnyFixedRefFrame &ref1 =..GenericGRF;
      #else
        AnyFixedRefFrame &ref1 = BM_GLOBAL_REFERENCE_FRAME;
      #endif
      AnySeg &ref2 =...BodyModel.Trunk.SegmentsLumbar.PelvisSeg;
      Type=RotAxesAngles;
    };
    MeasureOrganizer = {0};
    DriverPos=pi/180*{.JntPos.PelvisRotZ};
    DriverVel=pi/180*{.JntVel.PelvisRotZ};
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif
  };
  #else
  #endif
  
  
  #if BM_MANNEQUIN_DRIVER_PELVIS_ROT_Y == ON
  AnyKinEqSimpleDriver PelvisGroundDriverRotY ={
    AnyKinRotational rot ={
      #if BM_GLOBAL_REFERENCE_FRAME_SWITCH == OFF
        AnyFixedRefFrame &ref1 =..GenericGRF;
      #else
        AnyFixedRefFrame &ref1 = BM_GLOBAL_REFERENCE_FRAME;
      #endif
      AnySeg &ref2 =...BodyModel.Trunk.SegmentsLumbar.PelvisSeg;
      Type=RotAxesAngles;
    };
    MeasureOrganizer = {1};
    DriverPos=pi/180*{.JntPos.PelvisRotY};
    DriverVel=pi/180*{.JntVel.PelvisRotY};
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif
  };
  #else
  #endif
  
  
  #if BM_MANNEQUIN_DRIVER_PELVIS_ROT_X == ON
  AnyKinEqSimpleDriver PelvisGroundDriverRotX ={
    AnyKinRotational rot ={
      #if BM_GLOBAL_REFERENCE_FRAME_SWITCH == OFF
        AnyFixedRefFrame &ref1 =..GenericGRF;
      #else
        AnyFixedRefFrame &ref1 = BM_GLOBAL_REFERENCE_FRAME
      #endif
      AnySeg &ref2 =...BodyModel.Trunk.SegmentsLumbar.PelvisSeg;
      Type=RotAxesAngles;
    };
    MeasureOrganizer = {2};
    DriverPos=pi/180*{.JntPos.PelvisRotX};
    DriverVel=pi/180*{.JntVel.PelvisRotX};
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif
  };
  #else
  #endif
  
  
  
  
  
  
  // ************************************
  // Drivers for the spine
  // ************************************
  #if BM_SPINE_RHYTHM == OFF
    AnyMessage LumbarSpineMannequinDrivers = {TriggerPreProcess=On;Type=MSG_Message; Message="Please note that BM_SPINE_RHYTHM is set to OFF; No default mannequin drivers are used to drive lumbar spine joints.";};
  #endif
  
  //Neck driver 
   #if BM_MANNEQUIN_DRIVER_NECK == ON
    #if BM_TRUNK_NECK == OFF
     AnyKinEqSimpleDriver NeckJntDriver = {
       AnyRevoluteJoint &NeckJoint = ..BodyModel.Interface.Trunk.NeckJoint;
       DriverPos = pi/180*{.JntPos.NeckExtension};
       DriverVel = pi/180*{.JntVel.NeckExtension};
       Reaction.Type = {Off};
       #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
         WeightFun = {&.constfun};
         CType = {Soft};
       #endif
     };
    #else
     AnyKinEqSimpleDriver NeckJntDriver = {
       AnySphericalJoint &NeckJoint = ..BodyModel.Interface.Trunk.NeckJoint;
       DriverPos = pi/180*{.JntPos.NeckExtension, .JntPos.NeckLateralBending, .JntPos.NeckRotation};
       DriverVel = pi/180*{.JntVel.NeckExtension, .JntPos.NeckLateralBending, .JntVel.NeckRotation};
       Reaction.Type = {Off, Off, Off};
       #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
         WeightFun = {&.constfun, &.constfun, &.constfun};
         CType = {Soft, Soft, Soft};
       #endif
     };
    #endif
  #else
  #endif
  
  //Thorax pelvis rotation driver
  #if BM_MANNEQUIN_DRIVER_PELVIS_THORAX_LATERAL_BENDING == ON
  AnyKinEqSimpleDriver PostureDriverBending ={
    AnyKinMeasureOrg &Ref2 = ..BodyModel.Interface.Trunk.PelvisThoraxLateralBending;        
    DriverPos = pi/180*{.JntPos.PelvisThoraxLateralBending};
    DriverVel = pi/180*{.JntVel.PelvisThoraxLateralBending};
    Reaction.Type = {Off};  
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif
  };  
  #else
  #endif

  #if BM_MANNEQUIN_DRIVER_PELVIS_THORAX_ROTATION == ON
  AnyKinEqSimpleDriver PostureDriverRotation ={
    AnyKinMeasureOrg &Ref3 = ..BodyModel.Interface.Trunk.PelvisThoraxRotation;   
    DriverPos = pi/180*{.JntPos.PelvisThoraxRotation};
    DriverVel = pi/180*{.JntVel.PelvisThoraxRotation};
    Reaction.Type = {Off};  
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif
  };  
  #else
  #endif
  
  #if BM_MANNEQUIN_DRIVER_PELVIS_THORAX_EXTENSION == ON
  AnyKinEqSimpleDriver PostureDriverExtension ={
    AnyKinMeasureOrg &Ref1 = ..BodyModel.Interface.Trunk.PelvisThoraxExtension;
    DriverPos = pi/180*{.JntPos.PelvisThoraxExtension};
    DriverVel = pi/180*{.JntVel.PelvisThoraxExtension};
    Reaction.Type = {Off};  
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif
  };  
  #else
  #endif
  
  
  // ************************************
  // Drivers for the right arm
  // ************************************

  #if BM_ARM_RIGHT == ON
  
  //Sterno clavicular joint driver
  #if BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT == ON
  AnyKinEqSimpleDriver SCDriverRight ={
    AnyKinMeasureOrg &ref1 =..BodyModel.Interface.Right.SternoClavicularProtraction;
    AnyKinMeasureOrg &ref2 =..BodyModel.Interface.Right.SternoClavicularElevation;
    AnyKinMeasureOrg &ref3 =..BodyModel.Interface.Right.SternoClavicularAxialRotation;
    DriverPos = pi/180*{
      .JntPos.Right.SternoClavicularProtraction,
      .JntPos.Right.SternoClavicularElevation,
      .JntPos.Right.SternoClavicularAxialRotation
    };
    DriverVel = pi/180*{
      .JntVel.Right.SternoClavicularProtraction,
      .JntVel.Right.SternoClavicularElevation,
      .JntVel.Right.SternoClavicularAxialRotation
    };
    Reaction.Type={Off,Off,Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun, &.constfun, &.constfun};
      CType = {Soft, Soft, Soft};
    #endif
  };
  #else
  #endif
  
  
  //Glenohumeral joint 
  #if BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_RIGHT == ON
  AnyKinEqSimpleDriver GHDriverRightAbduction={
    AnyKinMeasureOrg &ref1 =..BodyModel.Interface.Right.GlenohumeralAbduction;
     DriverPos=pi/180*{.JntPos.Right.GlenohumeralAbduction};
     DriverVel = pi/180*{.JntVel.Right.GlenohumeralAbduction};    
     Reaction.Type={Off};
     #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif
  };
  #else
  #endif
  
  #if BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_RIGHT == ON
  AnyKinEqSimpleDriver GHDriverRightFlexion={
    AnyKinMeasureOrg &ref2 =..BodyModel.Interface.Right.GlenohumeralFlexion;
     DriverPos=pi/180*{.JntPos.Right.GlenohumeralFlexion};
     DriverVel = pi/180*{.JntVel.Right.GlenohumeralFlexion};    
     Reaction.Type={Off};
     #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
       WeightFun = {&.constfun};
       CType = {Soft};
     #endif
  };
  #else
  #endif
  
  #if BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_RIGHT == ON
  AnyKinEqSimpleDriver GHDriverRightExternalRotation={
    AnyKinMeasureOrg &ref3 =..BodyModel.Interface.Right.GlenohumeralExternalRotation;
     DriverPos=pi/180*{.JntPos.Right.GlenohumeralExternalRotation};
     DriverVel = pi/180*{.JntVel.Right.GlenohumeralExternalRotation};    
     Reaction.Type={Off};
     #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
       WeightFun = {&.constfun};
       CType = {Soft};
     #endif
  };
  #else
  #endif
  
  
  
  //Elbow flexion driver  
  #if BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_RIGHT == ON
  AnyKinEqSimpleDriver ElbowFlexionDriverRight={
    AnyKinMeasureOrg  &Elbow =..BodyModel.Interface.Right.ElbowFlexion;
    DriverPos=pi/180*{.JntPos.Right.ElbowFlexion};  
    DriverVel = pi/180*{.JntVel.Right.ElbowFlexion};  
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif
  };
  #else
  #endif
  
  
  //Elbow pronation driver
  #if BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_RIGHT == ON
  AnyKinEqSimpleDriver ElbowPronationDriverRight={
    AnyKinMeasureOrg &Elbow =..BodyModel.Interface.Right.ElbowPronation;
    DriverPos = pi/180*{.JntPos.Right.ElbowPronation };  

    DriverVel=pi/180*{.JntVel.Right.ElbowPronation };  
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif
  };
  #else
  #endif

  
  
  //Wrist driver 
  #if BM_MANNEQUIN_DRIVER_WRIST_FLEXION_RIGHT == ON
  AnyKinEqSimpleDriver WristDriverRightFlexion ={
    AnyKinMeasureOrg &ref1 =..BodyModel.Interface.Right.WristFlexion;
    DriverPos = pi/180*{.JntPos.Right.WristFlexion};
    DriverVel = pi/180*{.JntVel.Right.WristFlexion};
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif
  };
  #else
  #endif
  
  #if BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_RIGHT == ON
  AnyKinEqSimpleDriver WristDriverRightAbduction ={
    AnyKinMeasureOrg &ref2 =..BodyModel.Interface.Right.WristAbduction;
    DriverPos = pi/180*{.JntPos.Right.WristAbduction};
    DriverVel = pi/180*{.JntVel.Right.WristAbduction};
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif
  };
  #else
  #endif

  #else
  #endif

  

  // ************************************
  // Drivers for the left arm
  // ************************************
  
  #if BM_ARM_LEFT == ON
  
  //Sterno clavicular joint driver
  #if BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT == ON
  AnyKinEqSimpleDriver SCDriverLeft ={
    AnyKinMeasureOrg &ref1 =..BodyModel.Interface.Left.SternoClavicularProtraction;
    AnyKinMeasureOrg &ref2 =..BodyModel.Interface.Left.SternoClavicularElevation;
    AnyKinMeasureOrg &ref3 =..BodyModel.Interface.Left.SternoClavicularAxialRotation;
    
    DriverPos = pi/180*{
      .JntPos.Left.SternoClavicularProtraction,
      .JntPos.Left.SternoClavicularElevation,
      .JntPos.Left.SternoClavicularAxialRotation
    };
    
    DriverVel = pi/180*{
      .JntVel.Left.SternoClavicularProtraction,
      .JntVel.Left.SternoClavicularElevation,
      .JntVel.Left.SternoClavicularAxialRotation
    };
    Reaction.Type={Off,Off,Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun, &.constfun, &.constfun};
      CType = {Soft, Soft, Soft};
    #endif
  };
  #else
  #endif
  
  
  //Glenohumeral joint driver
  #if BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_LEFT == ON
  AnyKinEqSimpleDriver GHDriverLeftAbduction={
    AnyKinMeasureOrg &ref1 =..BodyModel.Interface.Left.GlenohumeralAbduction;
    DriverPos=pi/180*{.JntPos.Left.GlenohumeralAbduction};    
    DriverVel = pi/180*{.JntVel.Left.GlenohumeralAbduction};    
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif 
  };
  #else
  #endif
  
  #if BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_LEFT == ON
  AnyKinEqSimpleDriver GHDriverLeftFlexion={
    AnyKinMeasureOrg &ref2 =..BodyModel.Interface.Left.GlenohumeralFlexion;
    DriverPos=pi/180*{.JntPos.Left.GlenohumeralFlexion};    
    DriverVel = pi/180*{.JntVel.Left.GlenohumeralFlexion};    
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif    
  };
  #else
  #endif

  #if BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_LEFT == ON
  AnyKinEqSimpleDriver GHDriverLeftExternalRotation={
    AnyKinMeasureOrg &ref3 =..BodyModel.Interface.Left.GlenohumeralExternalRotation;
    DriverPos=pi/180*{.JntPos.Left.GlenohumeralExternalRotation};    
    DriverVel = pi/180*{.JntVel.Left.GlenohumeralExternalRotation};    
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif    
  };
  #else
  #endif

  //Elbow flexion driver  
  #if BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_LEFT == ON
  AnyKinEqSimpleDriver ElbowFlexionDriverLeft={
    AnyKinMeasureOrg  &Elbow =..BodyModel.Interface.Left.ElbowFlexion;
    DriverPos=pi/180*{.JntPos.Left.ElbowFlexion};  
    DriverVel = pi/180*{.JntVel.Left.ElbowFlexion};  
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif
  };
  #else
  #endif
  
  
  //Elbow pronation driver
  #if BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_LEFT == ON
  AnyKinEqSimpleDriver ElbowPronationDriverLeft={
    AnyKinMeasureOrg &Elbow =..BodyModel.Interface.Left.ElbowPronation;
    DriverPos = pi/180*{.JntPos.Left.ElbowPronation };  
    DriverVel=pi/180*{.JntVel.Left.ElbowPronation };  
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif
  };
  #else
  #endif  
  
  //Wrist driver
  #if BM_MANNEQUIN_DRIVER_WRIST_FLEXION_LEFT == ON
  AnyKinEqSimpleDriver WristDriverLeftFlexion ={
    AnyKinMeasureOrg &ref1 =..BodyModel.Interface.Left.WristFlexion;
    DriverPos = pi/180*{.JntPos.Left.WristFlexion};
    DriverVel = pi/180*{.JntVel.Left.WristFlexion};
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif  
  };
  #else
  #endif
  
  #if BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_LEFT == ON
  AnyKinEqSimpleDriver WristDriverLeftAbduction ={
    AnyKinMeasureOrg &ref2 =..BodyModel.Interface.Left.WristAbduction;
    DriverPos = pi/180*{.JntPos.Left.WristAbduction};
    DriverVel = pi/180*{.JntVel.Left.WristAbduction};
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif    
  };
  #else
  #endif
  
  #else
  #endif
 
  // ************************************
  // Drivers for the right leg
  // ************************************
  
  #if BM_LEG_RIGHT == CONST_LEG_MODEL_OFF 
  #else
  
   //Hip driver 
  #if BM_MANNEQUIN_DRIVER_HIP_FLEXION_RIGHT == ON
  AnyKinEqSimpleDriver HipDriverRightFlexion={
    AnyKinMeasureOrg &ref1 =..BodyModel.Interface.Right.HipFlexion;
    DriverPos= pi/180*{.JntPos.Right.HipFlexion};    
    DriverVel = pi/180*{.JntVel.Right.HipFlexion};    
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif    
  };
  #else
  #endif
  
  #if BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_RIGHT == ON
  AnyKinEqSimpleDriver HipDriverRightExternalRotation={
    AnyKinMeasureOrg &ref2 =..BodyModel.Interface.Right.HipExternalRotation;
    DriverPos= pi/180*{.JntPos.Right.HipExternalRotation};    
    DriverVel = pi/180*{.JntVel.Right.HipExternalRotation};    
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif    
  };
  #else
  #endif
  
  #if BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_RIGHT == ON
  AnyKinEqSimpleDriver HipDriverRightAbduction={
    AnyKinMeasureOrg &ref3 =..BodyModel.Interface.Right.HipAbduction;
    DriverPos= pi/180*{.JntPos.Right.HipAbduction};    
    DriverVel = pi/180*{.JntVel.Right.HipAbduction};    
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif    
  };
  #else
  #endif
  
  
   
  //Knee driver
  #if BM_MANNEQUIN_DRIVER_KNEE_FLEXION_RIGHT == ON
  AnyKinEqSimpleDriver KneeDriverRight={
    AnyKinMeasureOrg  &Knee = ..BodyModel.Interface.Right.KneeFlexion;
    DriverPos=pi/180*{.JntPos.Right.KneeFlexion};  
    DriverVel = pi/180*{.JntVel.Right.KneeFlexion};  
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif
  };
  #else
  #endif
  
  
  //Ankle driver
  #if BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_RIGHT == ON
  AnyKinEqSimpleDriver AnkleDriverRightFlexion={
    AnyKinMeasureOrg &ref1=..BodyModel.Interface.Right.AnklePlantarFlexion;
    DriverPos = pi/180*{.JntPos.Right.AnklePlantarFlexion};  
    DriverVel=pi/180*{.JntVel.Right.AnklePlantarFlexion};  
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif    
  };
  #else
  #endif
  
  #if BM_LEG_RIGHT == CONST_LEG_MODEL_Leg
   #if BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_RIGHT == ON
   AnyKinEqSimpleDriver AnkleDriverRightEversion={
     AnyKinMeasureOrg &ref2=..BodyModel.Interface.Right.AnkleEversion;
     DriverPos = pi/180*{.JntPos.Right.SubTalarEversion};  
     DriverVel=pi/180*{.JntVel.Right.SubTalarEversion};  
     Reaction.Type={Off};
     #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
       WeightFun = {&.constfun};
       CType = {Soft};
     #endif     
   };
   #else
   #endif
  #endif
 
  
  #if BM_LEG_RIGHT == CONST_LEG_MODEL_TLEM
   #if BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_RIGHT == ON
   AnyKinEqSimpleDriver AnkleDriverRightEversion={
     AnyKinMeasureOrg &ref1=..BodyModel.Interface.Right.AnklePlantarFlexion;
     AnyKinMeasureOrg &ref2=..BodyModel.Interface.Right.SubTalarEversion;
     DriverPos = pi/180*{.JntPos.Right.SubTalarEversion};  
     DriverVel=pi/180*{.JntVel.Right.SubTalarEversion};  
     Reaction.Type={Off};
     MeasureOrganizer={1};  // Driving subtalar eversion only
     #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
       WeightFun = {&.constfun};
       CType = {Soft};
     #endif
   };
   #else
   #endif
  #endif
  
#endif
  

  // ************************************
  // Drivers for the Left leg
  // ************************************
  
  #if BM_LEG_LEFT == CONST_LEG_MODEL_OFF 
  #else
  
  //Left hip driver
  #if BM_MANNEQUIN_DRIVER_HIP_FLEXION_LEFT == ON
  AnyKinEqSimpleDriver HipDriverLeftFlexion={
    AnyKinMeasureOrg &ref1 =..BodyModel.Interface.Left.HipFlexion;
    DriverPos=pi/180*{.JntPos.Left.HipFlexion};    
    DriverVel = pi/180*{.JntVel.Left.HipFlexion};    
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif    
  };
  #else
  #endif
  
  #if BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_LEFT == ON
  AnyKinEqSimpleDriver HipDriverLeftExternalRotation={
    AnyKinMeasureOrg &ref2 =..BodyModel.Interface.Left.HipExternalRotation;
    DriverPos=pi/180*{.JntPos.Left.HipExternalRotation};    
    DriverVel = pi/180*{.JntVel.Left.HipExternalRotation};    
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif    
  };
  #else
  #endif
  
  #if BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_LEFT == ON
  AnyKinEqSimpleDriver HipDriverLeftAbduction={
    AnyKinMeasureOrg &ref3 =..BodyModel.Interface.Left.HipAbduction;
    DriverPos=pi/180*{.JntPos.Left.HipAbduction};    
    DriverVel = pi/180*{.JntVel.Left.HipAbduction};    
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif    
  };
  #else
  #endif
  
  
  
  //Knee driver
  #if BM_MANNEQUIN_DRIVER_KNEE_FLEXION_LEFT == ON
  AnyKinEqSimpleDriver KneeDriverLeft={
    AnyKinMeasureOrg &Knee =..BodyModel.Interface.Left.KneeFlexion;
    DriverPos=pi/180*{.JntPos.Left.KneeFlexion   };  
    DriverVel = pi/180*{.JntVel.Left.KneeFlexion   };  
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif    
  };
  #else
  #endif
  

  
 
  //Ankle driver
  #if BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_LEFT == ON
  AnyKinEqSimpleDriver AnkleDriverLeftFlexion={
    AnyKinMeasureOrg &ref1=..BodyModel.Interface.Left.AnklePlantarFlexion;
    DriverPos = pi/180*{.JntPos.Left.AnklePlantarFlexion};  
    DriverVel=pi/180*{.JntVel.Left.AnklePlantarFlexion};  
    Reaction.Type={Off};
    #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
      WeightFun = {&.constfun};
      CType = {Soft};
    #endif    
  };
  #else
  #endif
  
  
  #if BM_LEG_LEFT == CONST_LEG_MODEL_Leg
   #if BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_LEFT == ON
   AnyKinEqSimpleDriver AnkleDriverLeftEversion={
     AnyKinMeasureOrg &ref2=..BodyModel.Interface.Left.AnkleEversion;
     DriverPos = pi/180*{.JntPos.Left.SubTalarEversion};  
     DriverVel=pi/180*{.JntVel.Left.SubTalarEversion};  
     Reaction.Type={Off};
     #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
       WeightFun = {&.constfun};
       CType = {Soft};
     #endif     
   };
   #else
   #endif
  #endif

  #if BM_LEG_LEFT == CONST_LEG_MODEL_TLEM
  
   #if BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_LEFT == ON
   AnyKinEqSimpleDriver AnkleDriverLeftEversion={
     AnyKinMeasureOrg &ref1=..BodyModel.Interface.Left.AnklePlantarFlexion;
     AnyKinMeasureOrg &ref2=..BodyModel.Interface.Left.SubTalarEversion;
     DriverPos = pi/180*{.JntPos.Left.SubTalarEversion};  
     DriverVel=pi/180*{.JntVel.Left.SubTalarEversion};  
     Reaction.Type={Off};
     MeasureOrganizer={1};  // Driving subtalar eversion only
     #if BM_MANNEQUIN_DRIVER_WEAK_SWITCH == ON
       WeightFun = {&.constfun};
       CType = {Soft};
     #endif   
   };
   #else
   #endif
  #endif
  
  #endif