/***************** Seg.any *******************************
This files construct all segments in the LegTLEM model.

This model is based on the cadaver dataset published in:
M.D. Klein Horsman, H.F.J.M. Koopman, F.C.T. van der Helm,
L. Poliacu Pros? H.E.J. Veeger Morphological muscle and
joint parameters for musculoskeletal modelling of the lower
extremity Clinical Biomechanics, Volume 22, Issue 2,
February 2007, Pages 239-247, ISSN 0268-0033

Klein Horsman,M.D.; Koopman,H.F.J.M.; van der Helm,F.C.T.;
Pros?L.Poliacu; Veeger,H.E.J. (2007). The dataset is also
know as also know as the Twente Lower Extremity Model (TLEM).

The implementation in AnyBody retains the coordinate system of
the original dataset, to allow direct comparison with the
published data. Thus, all segment have their same technical
coordinate which correspond to the lab coordinate system during
the cadaver study. The lab coordinate system was fixed at the
hip joint center and alligned with the anatomical coordinate
system of the pelvis during the cadaver session.

The first implementation in AnyScript was done by Karin Gorter
in 2007. Some bug fixes and and structural changes have been
added implemention. These also include correction due to errors
in the original dataset.

Brief change log:
-------------------------------------------------
Sep.  Translation vectors added to some of the foot and tibia
2007  insertion points or viapoints, to obtain a reasonable fit
      with the anatomical position (and viapoints 9-13 for the
      Extensor Hallucis Longus commented out for the same reason).

Mar.  Axes of Rotation and Centers of Rotation of the Ankle and
2008  Subtalar joint changed with respect to a improved anatomical
      position. Some muscle insertion and via point translated
      (addtional translation vectors)
      Sebastian Dendorfer March 2008

Sep.  Added via points to the medial and lateral gastroc
2011

Apr.  Restructring of the file. All hardcoded values have been moved
2012  to the file 'ModelParameters.any'. Added an option to redine
      the ankle and knee joint to be defined by bony landmarks
      instead of the original joint definitions. This new definition
      of joint parameters is used in by some applications in AMMR1.5.
      Moments of inertia have been changed to follow the main axis of
      thigh and shank. Added coordinate system based on the ISB
      definition of coordinate systems in the G. Wu, S. Siegler,
      P. Allard, C. Kirtley, A. Leardini, D. Rosenbaum, M. Whittle,
      D. D'Lima, L. Cristofolini, H. Witte, O. Schmid, I. Stokes.
      J. Biomech.35(4):543-548, 2002

Apr.  Restructure scaling for more accurate definition of anatomical
2013  frames for scaling including handling of un-scaled and scaled
      definitions of these.
	  Furthermore, model updates arising from the TLEMsafe project
	  have been implemented and a new model morphology has been
	  introduced as a parallel option to the existing one.
	  The new morphology is prepared for TLEM version 2.0, which
	  is not released yet.
*/


// The Talus segment represents the part between the ankle joint
// and the subtalar joint.
#ifndef SKIN
  #define SKIN 0
#endif

#ifndef MUSCLETISSUE
  #define MUSCLETISSUE 0
#endif

#ifndef DRAWAXES
  #define DRAWAXES 0
#endif


#ifdef TLEM_JOINT_TYPE_HIP
#undef TLEM_JOINT_TYPE_HIP
#undef TLEM_JOINT_TYPE_KNEE
#undef TLEM_JOINT_TYPE_ANKLE
#undef TLEM_JOINT_TYPE_PATELLOFEMORAL
#undef TLEM_JOINT_TYPE_SUBTALAR
#undef TLEM_JOINT_TYPE_PATELLATENDON
#endif

#if _LEFT_RIGHT_ == "Right"
#define TLEM_JOINT_TYPE_HIP            BM_JOINT_TYPE_HIP_RIGHT
#define TLEM_JOINT_TYPE_KNEE           BM_JOINT_TYPE_KNEE_RIGHT
#define TLEM_JOINT_TYPE_ANKLE          BM_JOINT_TYPE_ANKLE_RIGHT
#define TLEM_JOINT_TYPE_PATELLOFEMORAL BM_JOINT_TYPE_PATELLOFEMORAL_RIGHT
#define TLEM_JOINT_TYPE_SUBTALAR       BM_JOINT_TYPE_SUBTALAR_RIGHT
#define TLEM_JOINT_TYPE_PATELLATENDON  BM_JOINT_TYPE_PATELLATENDON_RIGHT
#endif

#if _LEFT_RIGHT_ == "Left"
#define TLEM_JOINT_TYPE_HIP            BM_JOINT_TYPE_HIP_LEFT
#define TLEM_JOINT_TYPE_KNEE           BM_JOINT_TYPE_KNEE_LEFT
#define TLEM_JOINT_TYPE_ANKLE          BM_JOINT_TYPE_ANKLE_LEFT
#define TLEM_JOINT_TYPE_PATELLOFEMORAL BM_JOINT_TYPE_PATELLOFEMORAL_LEFT
#define TLEM_JOINT_TYPE_SUBTALAR       BM_JOINT_TYPE_SUBTALAR_LEFT
#define TLEM_JOINT_TYPE_PATELLATENDON  BM_JOINT_TYPE_PATELLATENDON_LEFT
#endif


AnyFolder STL =
{
  #include "<BM_LEG_DATASET_PATH>STL.any"
};

#if BM_FOOT_MODEL == _FOOT_MODEL_DEFAULT_
AnySeg Talus =
{
  AnyFolder &Data = ..ModelParameters.Talus;

  JaboutCoMOnOff = On;
  AnyVar  MassS=..MassScaling.Talus.MassScale;

  r0=.Shank.AnkleJoint.sRel*.Shank.Axes0'+.Shank.r0-AnkleJoint.sRel*Axes0';

  AnyFloat pUnscaled = {Data.LateralMalleolus, Data.MedialMalleolus};
  AnyFloat dAxisFixed = { (Data.MedialTibialEpicondyle + Data.LateralTibialEpicondyle)*0.5 - Data.SubTalarJoint, (Data.MedialTibialEpicondyle - Data.LateralTibialEpicondyle ) };
  Scale = {AnyFunTransform3D& GeomScale = ...GeoScaling.Talus.ScaleFunction;};
  AnyVar Sign = ..Sign;
  #define MACRO_CONSTRUCT_ANATOMICAL_FRAME_s(p, SIGN) 0.5*(p[0]+p[1])
  #define MACRO_CONSTRUCT_ANATOMICAL_FRAME_A2(p, d, SIGN) RotMat(0.5*(p[0]+p[1]), 0.5*(p[0]+p[1]) + d[0], 0.5*(p[0]+p[1]) + d[1] ) * RotMat(-0.5*pi,z) * RotMat(0.5*pi,y) * RotMat(0.5*(SIGN-1)*pi,y)
  #include "..\Scaling\SegScaleFunWrtAnatomicalFrame.any"

  AnyRefNode AnatomicalFrame =
  {
    AnyFloat pScaled = .Scale(.pUnscaled);
    sRel = MACRO_CONSTRUCT_ANATOMICAL_FRAME_s(pScaled, .Sign);
    ARel = MACRO_CONSTRUCT_ANATOMICAL_FRAME_A2(pScaled, .dAxisFixed, .Sign);
    AnyVec3 sRelUnscaled = MACRO_CONSTRUCT_ANATOMICAL_FRAME_s(.pUnscaled, .Sign); ///< Generic unscaled position of talus ScalingNode
    AnyMat33 ARelUnscaled = MACRO_CONSTRUCT_ANATOMICAL_FRAME_A2(.pUnscaled, .dAxisFixed, .Sign);///< Generic unscaled rotation of talus ScalingNode
  };
  
  /// For backwards Compatibility with AMMR 2.4 MoCap Marker protocols
  AnyRefNode& MoCapMarkerFrameAMMR24 = AnatomicalFrame;
  
  AnyRefNode& ScalingNode = AnatomicalFrame ;
  #undef MACRO_CONSTRUCT_ANATOMICAL_FRAME_s
  #undef MACRO_CONSTRUCT_ANATOMICAL_FRAME_A2

  sCoM = Scale(Data.sCoM);
  Mass = MassS*Data.MassStandard;
  Jii = Data.Jii;
  Jij = Data.Jij;

  AnyRefNode MedialMalleolus =
  {
    sRel = .Scale(.Data.MedialMalleolus );
    #include "../DrawSettings/BML.any"
  };

  #if TLEM_JOINT_TYPE_SUBTALAR != _JOINT_TYPE_USERDEFINED_
  AnyRefNode SubTalarJoint =
  {
    sRel = .Scale(.Data.SubTalarJoint);
    ARel = RotMat({0.0,0,0}, .Data.SubTalarJointAxis, .AnatomicalFrame.ARel'[1])*RotMat(pi/2,y);

    #include "../DrawSettings/JointAxesProximal.any"

    #if DRAWAXES
    AnyDrawLine SJaxis2 =
    {
      Visible = On;
      p0 = ..Data.SubTalarJoint + {..Data.SubTalarJointAxis[2],..Data.SubTalarJointAxis[1],..Data.SubTalarJointAxis[0]}*0.2;
      p1 = ..Data.SubTalarJoint - {..Data.SubTalarJointAxis[2],..Data.SubTalarJointAxis[1],..Data.SubTalarJointAxis[0]}*0.2;      //Offset = {0, 0, 0};
      Line = {
      Thickness = 0.001;
      RGB = {0, 0, 0};
      };
    };
    #endif
  };
  #endif
  
  #if TLEM_JOINT_TYPE_ANKLE != _JOINT_TYPE_USERDEFINED_
  AnyRefNode AnkleJoint =
  {
    #if TLEM_JOINT_TYPE_ANKLE == _JOINT_TYPE_BONY_LANDMARK_
       AnyVec3 sRelUnscaled =  0.5*(.Data.LateralAnkleAxisMarker+.Data.MedialAnkleAxisMarker);
       AnyMat33 ARelUnscaled = RotMat({0.0,0,0},
                                      ...Sign*(.Data.LateralAnkleAxisMarker - .Data.MedialAnkleAxisMarker ),
                                      .AnatomicalFrame.ARelUnscaled'[1])*RotMat(pi/2,y);
       /// Ankle joint is defined from the two malleolus bony landmarks
       sRel = 0.5*(.Scale(.Data.LateralAnkleAxisMarker)+.Scale(.Data.MedialAnkleAxisMarker));
       /// Ankle joint axis is defined from the two malleolus bony landmarks
       ARel = RotMat({0.0,0,0}, ...Sign*(.Scale(.Data.LateralAnkleAxisMarker) - .Scale(.Data.MedialAnkleAxisMarker) ), .AnatomicalFrame.ARel'[1]  )*RotMat(pi/2,y);
    #endif
    #if TLEM_JOINT_TYPE_ANKLE == _JOINT_TYPE_DEFAULT_
       AnyVec3 sRelUnscaled = .Data.AnkleJoint;
       AnyMat33 ARelUnscaled = RotMat({0.0,0,0}, .Data.AnkleJointAxis, .AnatomicalFrame.ARelUnscaled'[1])*RotMat(pi/2,y);
       /// Control point for the Ankle joint. Found by projecting the malleolus bony landmarks onto the
       /// ankle axis from the cadaver data set. Thus, scaling that moves the control points will also scale the ankle joint axis
       AnyVec3 LateralControlPoint = .Scale(.Data.AnkleJoint + (.Data.LateralMalleolus - .Data.AnkleJoint)*.Data.AnkleJointAxis'*.Data.AnkleJointAxis);
       /// Control point for the Ankle joint. Found by projecting the malleolus bony landmarks onto the
       /// ankle axis from the cadaver data set. Thus, scaling that moves the control points will also scale the ankle joint axis
       AnyVec3 MedialControlPoint = .Scale(.Data.AnkleJoint + (.Data.MedialMalleolus - .Data.AnkleJoint)*.Data.AnkleJointAxis'*.Data.AnkleJointAxis );
       /// Ankle Joint defined directly from the cadaver dataset.
       sRel = .Scale(.Data.AnkleJoint);
       /// Ankle Joint orientation is calculated based on the direction between the two control points.
       ARel = RotMat(0.0*{0,0,0}, .Sign*(LateralControlPoint-MedialControlPoint ),  .AnatomicalFrame.ARel'[1] )*RotMat(pi/2,y);
    #endif

    #include "../DrawSettings/JointAxesDistal.any"

    #if DRAWAXES
    AnyDrawLine SJaxis2 =
    {
      Visible = On;
      p0 = ..Data.TalocruralsRel + {..Data.AnkleJointAxis[2],..Data.AnkleJointAxis[1],..Data.AnkleJointAxis[0]}*0.2;
      p1 = ..Data.TalocruralsRel - {..Data.AnkleJointAxis[2],..Data.AnkleJointAxis[1],..Data.AnkleJointAxis[0]}*0.2;      //Offset = {0, 0, 0};
      Line = {Thickness = 0.001; RGB = {0, 0, 0};};
    };
    #endif
  };
  #endif
  
  #include "../DrawSettings/Nodes.any"
  #include "../DrawSettings/SegmentAxes.any"

  AnyDrawSurf DrwSurf =
  {
    FileName = ..STL.FilenameTalus;
    ScaleXYZ = {1.0, 1.0, ...Sign*1.0};
    RGB = ...ColorRef.Segments;
    AnyFunTransform3D &Scale =.Scale;
    Opacity = ...BonesOpacity.Talus;
  };
}; // end of Talus segment


AnySeg Foot =
{
  AnyFolder &Data = ..ModelParameters.Foot;

  JaboutCoMOnOff = On;

  r0=.Talus.SubTalarJoint.sRel*.Talus.Axes0'+.Talus.r0-SubTalarJoint.sRel*Axes0';

  AnyFloat pUnscaled = {Data.LateralMalleolus, Data.MedialMalleolus};
  AnyFloat dAxisFixed = { (Data.MedialTibialEpicondyle + Data.LateralTibialEpicondyle)*0.5 - Data.SubTalarJoint, (Data.MedialTibialEpicondyle - Data.LateralTibialEpicondyle ) };
  Scale = {AnyFunTransform3D& GeomScale = ...GeoScaling.Foot.ScaleFunction;};
  AnyVar Sign = ..Sign;
  #define MACRO_CONSTRUCT_ANATOMICAL_FRAME_s(p, SIGN) 0.5*(p[0]+p[1])
  #define MACRO_CONSTRUCT_ANATOMICAL_FRAME_A2(p, d, SIGN) RotMat(0.5*(p[0]+p[1]), 0.5*(p[0]+p[1]) + d[0], 0.5*(p[0]+p[1]) + d[1] ) * RotMat(-0.5*pi,z) * RotMat(0.5*pi,y) * RotMat(0.5*(SIGN-1)*pi,y)
  #include "..\Scaling\SegScaleFunWrtAnatomicalFrame.any"

  AnyRefNode AnatomicalFrame =
  {
    AnyFloat pScaled = .Scale(.pUnscaled);
    sRel = MACRO_CONSTRUCT_ANATOMICAL_FRAME_s(pScaled, .Sign);
    ARel = MACRO_CONSTRUCT_ANATOMICAL_FRAME_A2(pScaled, .dAxisFixed, .Sign);
    AnyVec3 sRelUnscaled = MACRO_CONSTRUCT_ANATOMICAL_FRAME_s(.pUnscaled, .Sign);///< Generic unscaled position of foot ScalingNode
    AnyMat33 ARelUnscaled = MACRO_CONSTRUCT_ANATOMICAL_FRAME_A2(.pUnscaled, .dAxisFixed, .Sign);///< Generic unscaled rotation of foot ScalingNode
  };
  
  /// For backwards Compatibility with AMMR 2.4 MoCap Marker protocols
  AnyRefNode& MoCapMarkerFrameAMMR24 = AnatomicalFrame;

  AnyRefNode& ScalingNode=AnatomicalFrame;
  #undef MACRO_CONSTRUCT_ANATOMICAL_FRAME_s
  #undef MACRO_CONSTRUCT_ANATOMICAL_FRAME_A2

  AnyVar LengthStandard = vnorm(Data.SubTalarJoint-Data.ToeJoint,2);
  AnyVar MassS = ..MassScaling.Foot.MassScale;
  Mass = MassS*Data.MassStandard;
  sCoM = Scale(Data.sCoM);
  Jii = Data.Jii;
  Jij = Data.Jij;

  AnyRefNode &HeelJoint = HeelContactNodeLow;

  #if TLEM_JOINT_TYPE_SUBTALAR != _JOINT_TYPE_USERDEFINED_ 
  AnyRefNode SubTalarJoint =
  {
    AnyVec3 sRelUnscaled = .Data.SubTalarJoint;
    AnyMat33 ARelUnscaled = RotMat({0.0, 0.0, 0.0 }, .Data.SubTalarJointAxis, .AnatomicalFrame.ARelUnscaled'[1])*RotMat(pi/2,y);
    sRel = .Scale(.Data.SubTalarJoint);
    ARel = RotMat({0.0, 0.0, 0.0 }, .Data.SubTalarJointAxis, .AnatomicalFrame.ARel'[1])*RotMat(pi/2,y);
  };
  #endif
  
  /// This coordinate system is placed according the International Society of Biomechanics' (ISB)
  /// recommendations for an anatomical coordinate system for the ankle joint in the foot segment.
  /// See ISB proposal by G. Wu, S. Siegler, P. Allard, C. Kirtley, A. Leardini, D. Rosenbaum, M. Whittle, D.
  /// D'Lima, L. Cristofolini, H. Witte, O. Schmid, I. Stokes. J. Biomech. 35(4):543-548, 2002
  /// Section 3.4
  AnyRefNode AnkleJointComplexAnatomicalFrame =
  {
    #if TLEM_JOINT_TYPE_ANKLE == _JOINT_TYPE_BONY_LANDMARK_
      sRel = (.MedialMalleolus.sRel + .LateralMalleolus.sRel)*0.5;
    #else
      sRel = 0.5*(.Scale(.Data.MedialAnkleAxisMarkerInNeutralConf) + .Scale(.Data.LateralAnkleAxisMarkerInNeutralConf));
    #endif

    ARel = .AnatomicalFrame.ARel;
  };

  //bonylandmarks
  AnyRefNode MedialMalleolus =
  {
    sRel = .Scale(.Data.MedialMalleolusInNeutralConf );
    #include "../DrawSettings/BML.any"
  };
  AnyRefNode LateralMalleolus =
  {
    sRel = .Scale(.Data.LateralMalleolusInNeutralConf );
    #include "../DrawSettings/BML.any"
  };

  AnyRefNode IntraMallolar =
  {
    sRel =0.5* (.MedialMalleolus.sRel+.LateralMalleolus.sRel);
    #include "../DrawSettings/BML.any"
  };

  AnyRefNode GroundJoint =
  {
    sRel = .Scale(.Data.GroundJoint);// Estimation, between Heel and Toetip
    ARel = .ScalingNode.ARel;
  };

  AnyRefNode HeelContactNodeLow =
  {
    sRel = .Scale(.Data.HeelContactNodeLow);
    ARel = .AnatomicalFrame.ARel;
  };


  AnyRefNode ToeJoint =
  {
    sRel = .Scale(.Data.ToeJoint);
    ARel = .ScalingNode.ARel;
  };

  AnyRefNode HeelNode =
  {
    sRel = .Scale(.Data.HeelNode ); // Estimation, Bony Landmark Heel
    ARel = {{0, 1, 0}, {-1, 0, 0}, {0, 0, 1}};
  };

  //This block comes from TLEMsafe 2.0. It is unclear if it should be used.
  AnyRefNode HeelContactNode =
  {
    sRel = .Scale(.Data.HeelContactNodeLow);
    ARel = .AnatomicalFrame.ARel;
  };

  AnyRefNode ToeLateralContactNode =
  {
    sRel = .Scale(.Data.ToeLateralContactNode ); // Estimation, Bony landmark, distal 5th metatarsal
    ARel = .AnatomicalFrame.ARel;
  };

  AnyRefNode ToeMedialContactNode =
  {
    sRel = .Scale(.Data.ToeMedialContactNode ); // Estimation, Bony landmark, distal 1st metatarsal
    ARel = .AnatomicalFrame.ARel;
  };

  //Big toe , Estimation
  AnyRefNode BigToeNode =
  {
    sRel = .Scale(.Data.BigToeNode);
    ARel = .AnatomicalFrame.ARel;
  };

  ///Metatarsal1 joint center (estimated)
  AnyRefNode MetatarsalJoint1Node =
  {
    sRel = .Scale(.Data.MetatarsalJoint1Node );
  };
  ///Metatarsal2 joint center (estimated)
  AnyRefNode MetatarsalJoint2Node =
  {
    sRel = .Scale( .Data.MetatarsalJoint2Node );
    ARel = .ScalingNode.ARel*RotMat(0.5*pi,z);
  };
  ///Metatarsal3 joint center (estimated)
  AnyRefNode MetatarsalJoint3Node =
  {
    sRel =.Scale( .Data.MetatarsalJoint3Node );
  };
  ///Metatarsal4 joint center (estimated)
  AnyRefNode MetatarsalJoint4Node =
  {
    sRel = .Scale( .Data.MetatarsalJoint4Node );
  };
  ///Metatarsal5 joint center (estimated)
  AnyRefNode MetatarsalJoint5Node =
  {
    sRel =.Scale( .Data.MetatarsalJoint5Node );
  };

  AnyRefNode MedialMalleolus2 =
  {
    sRel = .Scale(.Data.MedialMalleolus);
  };

  AnyRefNode LateralMalleolus2 =
  {
    sRel = .Scale(.Data.LateralMalleolus);
  };

  AnyRefNode MedialTibialEpicondyle =
  {
    sRel = .Scale(.Data.MedialTibialEpicondyle);
  };

  AnyRefNode LateralTibialEpicondyle =
  {
    sRel = .Scale(.Data.LateralTibialEpicondyle);
  };

  // Bony landmarks transformed into foot coordinatesystem in the neutral configuration of the model.
  AnyRefNode MalleousLateralNode = {sRel = .Scale( ..Shank.Data.LateralMalleolus);};

  //Insertion points on Phalanges:
  AnyRefNode ExtensorDigitorumLongus1Node = {sRel = .Scale( .Data.ExtensorDigitorumLongus1Node );};
  AnyRefNode ExtensorDigitorumLongus2Node = {sRel = .Scale( .Data.ExtensorDigitorumLongus2Node );};
  AnyRefNode ExtensorDigitorumLongus3Node = {sRel = .Scale( .Data.ExtensorDigitorumLongus3Node );};

  AnyRefNode ExtensorHallucisLongus1Node = {sRel = .Scale( .Data.ExtensorHallucisLongus1Node );};
  AnyRefNode ExtensorHallucisLongus2Node = {sRel = .Scale( .Data.ExtensorHallucisLongus2Node );};
  AnyRefNode ExtensorHallucisLongus3Node = {sRel = .Scale( .Data.ExtensorHallucisLongus3Node );};
  AnyRefNode ExtensorHallucisLongusViaNode7 = {sRel = .Scale( .Data.ExtensorHallucisLongusViaNode7 );};
  AnyRefNode ExtensorHallucisLongusViaNode8 = {sRel = .Scale( .Data.ExtensorHallucisLongusViaNode8 );};
  //  AnyRefNode ExtensorHallucisLongusViaNode9 = {sRel = .Scale( .Data.ExtensorHallucisLongusViaNode9 );};
  //  AnyRefNode ExtensorHallucisLongusViaNode10 = {sRel = .Scale( .Data.ExtensorHallucisLongusViaNode10 );};
  //  AnyRefNode ExtensorHallucisLongusViaNode11 = {sRel = .Scale( .Data.ExtensorHallucisLongusViaNode11 );};
  //  AnyRefNode ExtensorHallucisLongusViaNode12 = {sRel = .Scale( .Data.ExtensorHallucisLongusViaNode12 );};
  //  AnyRefNode ExtensorHallucisLongusViaNode13 = {sRel = .Scale( .Data.ExtensorHallucisLongusViaNode13 );};

  AnyRefNode FlexorDigitorumLongus1Node = {sRel = .Scale( .Data.FlexorDigitorumLongus1Node );};
  AnyRefNode FlexorDigitorumLongus2Node = {sRel = .Scale( .Data.FlexorDigitorumLongus2Node );};
  AnyRefNode FlexorDigitorumLongus3Node = {sRel = .Scale( .Data.FlexorDigitorumLongus3Node );};
  AnyRefNode FlexorDigitorumLongusViaNode7 = {sRel = .Scale( .Data.FlexorDigitorumLongusViaNode7 );};
  AnyRefNode FlexorDigitorumLongusViaNode8 = {sRel = .Scale( .Data.FlexorDigitorumLongusViaNode8 );};

  AnyRefNode FlexorHallucisLongus1Node = {sRel = .Scale( .Data.FlexorHallucisLongus1Node );};
  AnyRefNode FlexorHallucisLongus2Node = {sRel = .Scale( .Data.FlexorHallucisLongus2Node );};
  AnyRefNode FlexorHallucisLongus3Node = {sRel = .Scale( .Data.FlexorHallucisLongus3Node );};
  AnyRefNode FlexorHallucisLongusViaNode7 = {sRel = .Scale( .Data.FlexorHallucisLongusViaNode7 );};
  AnyRefNode FlexorHallucisLongusViaNode8 = {sRel = .Scale( .Data.FlexorHallucisLongusViaNode8 );};

  //Insertion points on Hindfoot:
  AnyRefNode TendonCalcaneousNode = {sRel = .Scale( .Data.TendonCalcaneousNode );};

  AnyRefNode GastrocnemiusLateralis1Node = {sRel = .Scale( .Data.GastrocnemiusLateralis1Node );};
  AnyRefNode GastrocnemiusMedialis1Node =  {sRel = .Scale( .Data.GastrocnemiusMedialis1Node );};

  AnyRefNode Plantaris1Node = {sRel = .Scale( .Data.Plantaris1Node );};

  AnyRefNode SoleusMedialis1Node = {sRel = .Scale( .Data.SoleusMedialis1Node );};
  AnyRefNode SoleusMedialis2Node = {sRel = .Scale( .Data.SoleusMedialis2Node );};
  AnyRefNode SoleusMedialis3Node =  {sRel = .Scale( .Data.SoleusMedialis3Node );};
  AnyRefNode SoleusLateralis1Node = {sRel = .Scale( .Data.SoleusLateralis1Node );};
  AnyRefNode SoleusLateralis2Node = {sRel = .Scale( .Data.SoleusLateralis2Node );};
  AnyRefNode SoleusLateralis3Node =  {sRel = .Scale( .Data.SoleusLateralis3Node );};


//Insertion points on Midfoot:
  AnyRefNode PeroneusBrevis1Node = {sRel = .Scale( .Data.PeroneusBrevis1Node );};
  AnyRefNode PeroneusBrevis2Node = {sRel = .Scale( .Data.PeroneusBrevis2Node );};
  AnyRefNode PeroneusBrevis3Node = {sRel = .Scale( .Data.PeroneusBrevis3Node );};
  AnyRefNode PeroneusBrevisViaNode4 = {sRel = .Scale( .Data.PeroneusBrevisViaNode4 );};


  AnyRefNode PeroneusLongus1Node = {sRel = .Scale( .Data.PeroneusLongus1Node );};
  AnyRefNode PeroneusLongus2Node = {sRel = .Scale( .Data.PeroneusLongus2Node );};
  AnyRefNode PeroneusLongus3Node = {sRel = .Scale( .Data.PeroneusLongus3Node );};
  AnyRefNode PeroneusTertius1Node = {sRel = .Scale( .Data.PeroneusTertius1Node );};
  AnyRefNode PeroneusTertius2Node = {sRel = .Scale( .Data.PeroneusTertius2Node );};
  AnyRefNode PeroneusTertius3Node = {sRel = .Scale( .Data.PeroneusTertius3Node );};
  AnyRefNode PeroneusLongusViaNode4 = {sRel = .Scale( .Data.PeroneusLongusViaNode4 );};

  AnyRefNode TibialisAnterior1Node = {sRel = .Scale( .Data.TibialisAnterior1Node );};
  AnyRefNode TibialisAnterior2Node = {sRel = .Scale( .Data.TibialisAnterior2Node );};
  AnyRefNode TibialisAnterior3Node = {sRel = .Scale( .Data.TibialisAnterior3Node );};
  AnyRefNode TibialisAnteriorViaNode2 = {sRel = .Scale( .Data.TibialisAnteriorViaNode2 );};

  AnyRefNode TibialisPosteriorMedialis1Node = {sRel = .Scale( .Data.TibialisPosteriorMedialis1Node );};
  AnyRefNode TibialisPosteriorMedialis2Node = {sRel = .Scale( .Data.TibialisPosteriorMedialis2Node );};
  AnyRefNode TibialisPosteriorMedialis3Node = {sRel = .Scale( .Data.TibialisPosteriorMedialis3Node );};
  AnyRefNode TibialisPosteriorLateralis1Node = {sRel = .Scale( .Data.TibialisPosteriorLateralis1Node );};
  AnyRefNode TibialisPosteriorLateralis2Node = {sRel = .Scale( .Data.TibialisPosteriorLateralis2Node );};
  AnyRefNode TibialisPosteriorLateralis3Node = {sRel = .Scale( .Data.TibialisPosteriorLateralis3Node );};
  AnyRefNode TibialisPosteriorLateralisViaNode10 = {sRel = .Scale( .Data.TibialisPosteriorLateralisViaNode10 );};
  AnyRefNode TibialisPosteriorMedialisViaNode10 = {sRel = .Scale( .Data.TibialisPosteriorMedialisViaNode10 );};
  AnyRefNode TibialisPosteriorMedialisViaNode11 = {sRel = .Scale( .Data.TibialisPosteriorMedialisViaNode11 );};


  #include "../DrawSettings/Nodes.any"
  #include "../DrawSettings/SegmentAxes.any"

  AnyDrawSurf DrwSurf =
  {
    FileName = ..STL.FilenameFoot;
    ScaleXYZ = {1.0, 1.0, ...Sign*1.0};
    RGB = ...ColorRef.Segments;
    AnyFunTransform3D &Scale =.Scale;
    Opacity = ...BonesOpacity.Foot;
  };

  #if SKIN
  AnyDrawSurf Drw2 =
  {
    FileName = ..STL.FilenameFootSkin;
    ScaleXYZ = {1.0, 1.0, ...Sign*1.0};
    RGB = ...ColorRef.Skin;
    Opacity = Main.DrawSettings.SkinOpacity.Opacity;
    AnyFunTransform3D &Scale =.Scale;
    Face=-1;
  };
  #endif

  #if MUSCLETISSUE
  AnyDrawSurf Drw1 =
  {
    FileName = ..STL.FilenameFootMuscleTissue;
    ScaleXYZ = {1.0, 1.0, ...Sign*1.0};
    RGB = ...ColorRef.MuscleTissue;
    Opacity = Main.DrawSettings.MuscleTissueOpacity.Opacity;
    AnyFunTransform3D &Scale =.Scale;
    Face=-1;
  };
  #endif


};// End of foot


#endif //BM_FOOT_MODEL == _FOOT_MODEL_DEFAULT_

AnySeg Shank =
{
  AnyFolder &Data = ..ModelParameters.Shank;

  JaboutCoMOnOff = On;
  r0=.Thigh.KneeJoint.sRel*.Thigh.Axes0'+.Thigh.r0-KneeJoint.sRel*Axes0';

  AnyVec3 r01 = .Thigh.KneeJoint.sRel;
  AnyVec3 r02 = .Thigh.KneeJoint.sRel*.Thigh.Axes0';
  AnyVec3 r03 = .Thigh.r0;
  AnyVec3 r04 = KneeJoint.sRel*Axes0';

  AnyFloat pUnscaled = {Data.LateralMalleolus, Data.MedialMalleolus, Data.LateralTibialEpicondyle, Data.MedialTibialEpicondyle};
  Scale = {AnyFunTransform3D& GeomScale = ...GeoScaling.Shank.ScaleFunction;};
  AnyVar Sign = ..Sign;
  #define MACRO_CONSTRUCT_ANATOMICAL_FRAME_s(p, SIGN) 0.5*(p[2]+p[3])
  #define MACRO_CONSTRUCT_ANATOMICAL_FRAME_A(p, SIGN) RotMat(0.5*(p[2]+p[3]), 0.5*(p[0]+p[1]), p[2]) *RotMat(0.5*pi,y)*RotMat(-0.5*pi,x)*RotMat(0.5*(SIGN-1)*pi,y)

  #include "..\Scaling\SegScaleFunWrtAnatomicalFrame.any"

  AnyRefNode AnatomicalFrame =
  {
    AnyFloat pScaled = .Scale(.pUnscaled);
    sRel = MACRO_CONSTRUCT_ANATOMICAL_FRAME_s(pScaled, .Sign);
    ARel = MACRO_CONSTRUCT_ANATOMICAL_FRAME_A(pScaled, .Sign);
    AnyVec3 sRelUnscaled = MACRO_CONSTRUCT_ANATOMICAL_FRAME_s(.pUnscaled, .Sign); ///< Generic unscaled position of shank ScalingNode
    AnyMat33 ARelUnscaled = MACRO_CONSTRUCT_ANATOMICAL_FRAME_A(.pUnscaled, .Sign);///< Generic unscaled rotation of shank ScalingNode
  };
  /// For backwards Compatibility with AMMR 2.4 MoCap Marker protocols
  AnyRefNode& MoCapMarkerFrameAMMR24 = AnatomicalFrame;
  
  AnyRefNode& ScalingNode=AnatomicalFrame ;
  #undef MACRO_CONSTRUCT_ANATOMICAL_FRAME_s
  #undef MACRO_CONSTRUCT_ANATOMICAL_FRAME_A

  AnyVar MassS = ..MassScaling.Shank.MassScale;

  Mass = MassS*Data.MassStandard;
  sCoM = Scale(Data.sCoM);
  Jii = Data.Jii;
  Jij = Data.Jij;
  /// This coordinate system is placed based on the bony landmarks of tibial plateau.
  /// O: Center of the two tibial epicondyles
  /// Z: A vector going through the lateral and medial tibial epicondyle pointing to the right
  /// X: The vector perpendicular to Z axis and the long axis of the shank point anteriorly
  /// Y: The vector perpendicular to Z and X
  AnyRefNode KneeJointAnatomicalFrame =
  {
    AnyVec3 O = 0.5*(.Scale(.Data.LateralTibialEpicondyle ) + .Scale(.Data.MedialTibialEpicondyle ) );
    AnyVec3 Z = ...Sign*(.Scale(.Data.LateralTibialEpicondyle ) - .Scale(.Data.MedialTibialEpicondyle ) );
    AnyVec3 X = cross(O-.AnkleJoint.sRel,Z);
    AnyVec3 Y = cross(Z,X);
    sRel = O;
    ARel = {X/vnorm(X),Y/vnorm(Y),Z/vnorm(Z)}';
    
  };


  /// This coordinate system is placed according the International Society of Biomechanics' (ISB)
  /// recommendations for an anatomical coordinate system for the ankle joint in the shank segment.
  /// See ISB proposal by G. Wu, S. Siegler, P. Allard, C. Kirtley, A. Leardini, D. Rosenbaum, M. Whittle, D.
  /// D'Lima, L. Cristofolini, H. Witte, O. Schmid, I. Stokes. J. Biomech. 35(4):543-548, 2002
  /// Section 3.3
  AnyRefNode AnkleJointComplexAnatomicalFrame =
  {
    #if TLEM_JOINT_TYPE_ANKLE ==  _JOINT_TYPE_BONY_LANDMARK_
      AnyVec3 O = 0.5*(.Scale(.Data.LateralAnkleAxisMarker) + .Scale(.Data.MedialAnkleAxisMarker) );
      AnyVec3 Z = ...Sign*(.Scale(.Data.LateralAnkleAxisMarker) - .Scale(.Data.MedialAnkleAxisMarker) );
    #else
      AnyVec3 O = 0.5*(.Scale(.Data.LateralMalleolus) + .Scale(.Data.MedialMalleolus));
      AnyVec3 Z = ...Sign*(.Scale(.Data.LateralMalleolus) - .Scale(.Data.MedialMalleolus) );
    #endif
    AnyVec3 X = cross(0.5*( .Scale(.Data.LateralTibialEpicondyle) + .Scale(.Data.MedialTibialEpicondyle))-O,Z);
    AnyVec3 Y = cross(Z,X);
    sRel = O;
    ARel = {X/vnorm(X),Y/vnorm(Y),Z/vnorm(Z)}';
  };

  #if TLEM_JOINT_TYPE_ANKLE != _JOINT_TYPE_USERDEFINED_
  AnyRefNode AnkleJoint =
  {
     AnyVar TibialTorsionOffset = DesignVar(0);
     #if TLEM_JOINT_TYPE_ANKLE == _JOINT_TYPE_BONY_LANDMARK_
       AnyVec3 sRelUnscaled =  0.5*(.Data.LateralAnkleAxisMarker+ .Data.MedialAnkleAxisMarker);
       AnyMat33 ARelUnscaled = RotMat({0.0, 0, 0 } , .Sign*(.Data.LateralAnkleAxisMarker - .Data.MedialAnkleAxisMarker ), .AnatomicalFrame.ARelUnscaled'[1])*RotMat(pi/2,y);
       sRel = 0.5*(.Scale(.Data.LateralAnkleAxisMarker) + .Scale(.Data.MedialAnkleAxisMarker));
       ARel = RotMat(sRel, sRel+ .Sign*(.Scale(.Data.LateralAnkleAxisMarker) - .Scale(.Data.MedialAnkleAxisMarker) ),  .AnatomicalFrame.ARel'[1])*RotMat(pi/2,y)*RotMat(TibialTorsionOffset,y);
     #endif
     #if TLEM_JOINT_TYPE_ANKLE == _JOINT_TYPE_DEFAULT_
       AnyVec3 sRelUnscaled =  .Data.AnkleJoint;
       AnyMat33 ARelUnscaled =   RotMat({0, 0, 0.0}, .Sign*(AnkleLateralControlPoint-AnkleMedialControlPoint ), .AnatomicalFrame.ARelUnscaled'[1])*RotMat(pi/2,y);
       // Control point for the Ankle joint. Found by projecting the malleolus bony landmarks onto the
       // ankle axis from the cadaver data set. Thus, scaling the control points will also scale the ankle joint axis
       AnyVec3 AnkleLateralControlPoint =  .Data.AnkleJoint + (.Data.LateralMalleolus - .Data.AnkleJoint)*.Data.AnkleJointAxis'*.Data.AnkleJointAxis;
       // Control point for the Ankle joint. Found by projecting the malleolus bony landmarks onto the
       // ankle axis from the cadaver data set. Thus, scaling the control points will also scale the ankle joint axis
       AnyVec3 AnkleMedialControlPoint = .Data.AnkleJoint + (.Data.MedialMalleolus - .Data.AnkleJoint)*.Data.AnkleJointAxis'*.Data.AnkleJointAxis;
       sRel = .Scale(.Data.AnkleJoint);
       // Ankle Joint orientation is calculated based on the direction between the two control points.
       ARel = RotMat({0,0,0.0}, .Sign*(.Scale(AnkleLateralControlPoint) - .Scale(AnkleMedialControlPoint) ),  .AnatomicalFrame.ARel'[1])*RotMat(pi/2,y)*RotMat(TibialTorsionOffset,y);
     #endif

    #include "../DrawSettings/JointAxesDistal.any"
  };
  #endif
  
  #if TLEM_JOINT_TYPE_KNEE != _JOINT_TYPE_USERDEFINED_
  AnyRefNode KneeJoint =
  {
    #if TLEM_JOINT_TYPE_KNEE == _JOINT_TYPE_BONY_LANDMARK_
       AnyVec3 sRelUnscaled = 0.5*(.Data.LateralFemuralCondyleInNeutralConf + .Data.MedialFemuralCondyleInNeutralConf);
       AnyMat33 ARelUnscaled =  RotMat({0,0,0.0},
                                       .Sign*(.Data.LateralFemuralCondyleInNeutralConf - .Data.MedialFemuralCondyleInNeutralConf),
                                       -1*.AnatomicalFrame.ARelUnscaled'[1])*RotMat(pi,z)*RotMat(-pi/2,y);
       /// Knee joint is defined from the two epicondyle bony landmarks
       sRel = 0.5*(.Scale(.Data.LateralFemuralCondyleInNeutralConf )+.Scale(.Data.MedialFemuralCondyleInNeutralConf));
       /// Knee joint axis is defined from the two epicondyle bony landmarks
       ARel = RotMat({0,0,0.0},
                     .Sign*(.Scale(.Data.LateralFemuralCondyleInNeutralConf) - .Scale(.Data.MedialFemuralCondyleInNeutralConf)),
                     -1*.AnatomicalFrame.ARel'[1])*RotMat(pi,z)*RotMat(-pi/2,y);
    #endif
    #if TLEM_JOINT_TYPE_KNEE == _JOINT_TYPE_DEFAULT_
       AnyVec3 sRelUnscaled = .Data.KneeJoint;
       AnyMat33 ARelUnscaled =  RotMat({0,0,0.0},
                                       .Sign*(LateralControlPoint - MedialControlPoint),
                                       -1*.AnatomicalFrame.ARelUnscaled'[1])*RotMat(pi,z)*RotMat(-pi/2,y);
       /// Control point for the knee joint. Found by projecting the EpicondylusFemoris bony landmarks onto the
       /// knee axis from the cadaver data set. Thus, scaling the control points will also scale the Knee joint axis
       AnyVec3 LateralControlPoint = .Data.KneeJoint + (.Data.LateralFemuralCondyleInNeutralConf - .Data.KneeJoint)*.Data.KneeJointAxis'*.Data.KneeJointAxis;
       /// Control point for the knee joint. Found by projecting the EpicondylusFemoris bony landmarks onto the
       /// knee axis from the cadaver data set. Thus, scaling the control points will also scale the Knee joint axis
       AnyVec3 MedialControlPoint = .Data.KneeJoint + (.Data.MedialFemuralCondyleInNeutralConf - .Data.KneeJoint)*.Data.KneeJointAxis'*.Data.KneeJointAxis;
       sRel = .Scale(.Data.KneeJoint);
       /// Knee Joint orientation is calculated based on the direction between the two control points.
       ARel = RotMat({0,0,0.0}, .Sign*(.Scale(LateralControlPoint)-.Scale(MedialControlPoint)), -1*.AnatomicalFrame.ARel'[1])*RotMat(pi,z)*RotMat(-pi/2,y);
    #endif

    #include "../DrawSettings/JointAxesDistal.any"
  
  };
  #endif

  #if BM_FOOT_MODEL != _FOOT_MODEL_NONE_
  AnyRefNode AchillesWrapping1 = {
    AnyVar ShankLengthScale = vnorm(.AnkleJoint.sRel-.KneeJoint.sRel)
                            /vnorm(.Data.AnkleJoint-.Data.KneeJoint);
    sRel = .Scale({-0.0336, 0.0987, 0});
    AnySurfCylinder Cyl = {
       Length = 0.2;
       sRel = {-Radius,0,-0.5*Length};
       Radius = .ShankLengthScale*0.105;
       };
  };
  AnyRefNode AchillesWrapping2 = {
    sRel = .Scale({-0.032, 0.0437, 0.000});
    AnySurfCylinder Cyl = {
       Length = 0.2;
       sRel = {Radius,0,-0.5*Length};
       Radius = ..AchillesWrapping1.ShankLengthScale*0.07;
       };
  };
  #endif
  
  //BonyLandMarks
  AnyRefNode MedialTibialEpicondyle =
  {
    sRel = .Scale(.Data.MedialTibialEpicondyle);
    #include "../DrawSettings/BML.any"
  };
  AnyRefNode LateralTibialEpicondyle =
  {
    sRel = .Scale( .Data.LateralTibialEpicondyle );
    #include "../DrawSettings/BML.any"
  };
  AnyRefNode IntraTibialEpicondyle =
  {
    sRel = (.MedialTibialEpicondyle.sRel+.LateralTibialEpicondyle.sRel)*0.5 ;
    #include "../DrawSettings/BML.any"
  };
  AnyRefNode TibialTuberosity =
  {
    sRel = .Scale( .Data.TibialTuberosity  );
    #include "../DrawSettings/BML.any"
  };
  AnyRefNode FibularHead =
  {
    sRel = .Scale( .Data.FibularHead );
    #include "../DrawSettings/BML.any"
  };
  AnyRefNode MedialMalleolus =
  {
    sRel = .Scale( .Data.MedialMalleolus );
    #include "../DrawSettings/BML.any"

  };
  AnyRefNode LateralMalleolus =
  {
    sRel = .Scale( .Data.LateralMalleolus );
    #include "../DrawSettings/BML.any"

  };
  AnyRefNode IntraMallolar =
  {
    sRel =0.5* (.MedialMalleolus.sRel+.LateralMalleolus.sRel);
    #include "../DrawSettings/BML.any"
  };

  #if TLEM_JOINT_TYPE_PATELLATENDON != _JOINT_TYPE_USERDEFINED_
  /// This node is a reference node for the patella tendon to define the movement of
  /// the patella. The tendon will be regarded as being stiff, so the length will not change.
  /// This is defined by an AnyKinPLine in the file Jnt.any.
  /// The Origin lies on the Patella segment.
  AnyRefNode Insertion_patella_tendon =
  {
    sRel = .Scale( .Data.Insertion_patella_tendon  );
  };
  #endif
  
  //Origin points on the Tibia:
  AnyRefNode GastrocnemiusLateralis1ViaNode = {sRel = .Scale( .Data.GastrocnemiusLateralis1ViaNode );};
  AnyRefNode GastrocnemiusMedialis1ViaNode = {sRel = .Scale( .Data.GastrocnemiusMedialis1ViaNode );};



  //////

  //Origin points on the Tibia:

  AnyRefNode ExtensorDigitorumLongus1Node = {sRel = .Scale( .Data.ExtensorDigitorumLongus1Node );};
  AnyRefNode ExtensorDigitorumLongus2Node = {sRel = .Scale( .Data.ExtensorDigitorumLongus2Node );};
  AnyRefNode ExtensorDigitorumLongus3Node = {sRel = .Scale( .Data.ExtensorDigitorumLongus3Node );};
  AnyRefNode ExtensorDigitorumLongusViaNode1 = {sRel = .Scale( .Data.ExtensorDigitorumLongusViaNode1 );};
  AnyRefNode ExtensorDigitorumLongusViaNode2 = {sRel = .Scale( .Data.ExtensorDigitorumLongusViaNode2 );};
  AnyRefNode ExtensorDigitorumLongusViaNode3 = {sRel = .Scale( .Data.ExtensorDigitorumLongusViaNode3 );};
  AnyRefNode ExtensorDigitorumLongusViaNode4 = {sRel = .Scale( .Data.ExtensorDigitorumLongusViaNode4 );};

  AnyRefNode ExtensorHallucisLongus1Node = {sRel = .Scale( .Data.ExtensorHallucisLongus1Node );};
  AnyRefNode ExtensorHallucisLongus2Node = {sRel = .Scale( .Data.ExtensorHallucisLongus2Node );};
  AnyRefNode ExtensorHallucisLongus3Node = {sRel = .Scale( .Data.ExtensorHallucisLongus3Node );};

  AnyRefNode ExtensorHallucisLongusViaNode1 = {sRel = .Scale( .Data.ExtensorHallucisLongusViaNode1 );};
  AnyRefNode ExtensorHallucisLongusViaNode2 = {sRel = .Scale( .Data.ExtensorHallucisLongusViaNode2 );};
  //AnyRefNode ExtensorHallucisLongusViaNode3 = {sRel = .Scale( .Data.ExtensorHallucisLongusViaNode3 );};
  //AnyRefNode ExtensorHallucisLongusViaNode4 = {sRel = .Scale( .Data.ExtensorHallucisLongusViaNode4 );};
  //AnyRefNode ExtensorHallucisLongusViaNode5 = {sRel = .Scale( .Data.ExtensorHallucisLongusViaNode5 );};
  AnyRefNode ExtensorHallucisLongusViaNode6 = {sRel = .Scale( .Data.ExtensorHallucisLongusViaNode6 );};

  AnyRefNode FlexorDigitorumLongus1Node = {sRel = .Scale( .Data.FlexorDigitorumLongus1Node );};
  AnyRefNode FlexorDigitorumLongus2Node = {sRel = .Scale( .Data.FlexorDigitorumLongus2Node );};
  AnyRefNode FlexorDigitorumLongus3Node = {sRel = .Scale( .Data.FlexorDigitorumLongus3Node );};

  AnyRefNode FlexorDigitorumLongusViaNode1 = {sRel = .Scale( .Data.FlexorDigitorumLongusViaNode1 );};
  AnyRefNode FlexorDigitorumLongusViaNode2 = {sRel = .Scale( .Data.FlexorDigitorumLongusViaNode2 );};
  // AnyRefNode FlexorDigitorumLongusViaNode3 = {sRel = .Scale( .Data.FlexorDigitorumLongusViaNode3 );};
  //AnyRefNode FlexorDigitorumLongusViaNode4 = {sRel = .Scale( .Data.FlexorDigitorumLongusViaNode4 );};
  AnyRefNode FlexorDigitorumLongusViaNode5 = {sRel = .Scale( .Data.FlexorDigitorumLongusViaNode5 );};
  AnyRefNode FlexorDigitorumLongusViaNode6 = {sRel = .Scale( .Data.FlexorDigitorumLongusViaNode6 );};
  AnyRefNode FlexorDigitorumLongusViaNode7 = {sRel = .Scale( .Data.FlexorDigitorumLongusViaNode7 );};
  AnyRefNode FlexorDigitorumLongusViaNode8 = {sRel = .Scale( .Data.FlexorDigitorumLongusViaNode8 );};

  AnyRefNode FlexorHallucisLongus1Node = {sRel = .Scale( .Data.FlexorHallucisLongus1Node );};
  AnyRefNode FlexorHallucisLongus2Node = {sRel = .Scale( .Data.FlexorHallucisLongus2Node );};
  AnyRefNode FlexorHallucisLongus3Node = {sRel = .Scale( .Data.FlexorHallucisLongus3Node );};

  AnyRefNode FlexorHallucisLongusViaNode1 = {sRel = .Scale( .Data.FlexorHallucisLongusViaNode1 );};
  AnyRefNode FlexorHallucisLongusViaNode3 = {sRel = .Scale( .Data.FlexorHallucisLongusViaNode3 );};
  AnyRefNode FlexorHallucisLongusViaNode4 = {sRel = .Scale( .Data.FlexorHallucisLongusViaNode4 );};
  AnyRefNode FlexorHallucisLongusViaNode5 = {sRel = .Scale( .Data.FlexorHallucisLongusViaNode5 );};
  AnyRefNode FlexorHallucisLongusViaNode6 = {sRel = .Scale( .Data.FlexorHallucisLongusViaNode6 );};
  AnyRefNode FlexorHallucisLongusViaNode7 = {sRel = .Scale( .Data.FlexorHallucisLongusViaNode7 );};
  //AnyRefNode FlexorHallucisLongusViaNode8 = {sRel = .Scale( .Data.FlexorHallucisLongusViaNode8 );};



  AnyRefNode PeroneusBrevis1Node = {sRel = .Scale( .Data.PeroneusBrevis1Node );};
  AnyRefNode PeroneusBrevis2Node = {sRel = .Scale( .Data.PeroneusBrevis2Node );};
  AnyRefNode PeroneusBrevis3Node = {sRel = .Scale( .Data.PeroneusBrevis3Node );};
  AnyRefNode PeroneusBrevisViaNode1 = {sRel = .Scale( .Data.PeroneusBrevisViaNode1 );};
  AnyRefNode PeroneusBrevisViaNode2 = {sRel = .Scale( .Data.PeroneusBrevisViaNode2 );};
  AnyRefNode PeroneusBrevisViaNode3 = {sRel = .Scale( .Data.PeroneusBrevisViaNode3 );};

  AnyRefNode PeroneusLongus1Node = {sRel = .Scale( .Data.PeroneusLongus1Node );};
  AnyRefNode PeroneusLongus2Node = {sRel = .Scale( .Data.PeroneusLongus2Node );};
  AnyRefNode PeroneusLongus3Node = {sRel = .Scale( .Data.PeroneusLongus3Node );};
  AnyRefNode PeroneusLongusViaNode1 = {sRel = .Scale( .Data.PeroneusLongusViaNode1 );};
  AnyRefNode PeroneusLongusViaNode2 = {sRel = .Scale( .Data.PeroneusLongusViaNode2 );};
  AnyRefNode PeroneusLongusViaNode3 = {sRel = .Scale( .Data.PeroneusLongusViaNode3 );};
  AnyRefNode PeroneusLongusViaNode4 = {sRel = .Scale( .Data.PeroneusLongusViaNode4 );};


  AnyRefNode PeroneusTertius1Node = {sRel = .Scale( .Data.PeroneusTertius1Node );};
  AnyRefNode PeroneusTertius2Node = {sRel = .Scale( .Data.PeroneusTertius2Node );};
  AnyRefNode PeroneusTertius3Node = {sRel = .Scale( .Data.PeroneusTertius3Node );};
  AnyRefNode PeroneusTertiusViaNode1 = {sRel = .Scale( .Data.PeroneusTertiusViaNode1 );};
  AnyRefNode PeroneusTertiusViaNode2 = {sRel = .Scale( .Data.PeroneusTertiusViaNode2 );};
  AnyRefNode PeroneusTertiusViaNode3 = {sRel = .Scale( .Data.PeroneusTertiusViaNode3 );};

  AnyRefNode SoleusMedialis1Node = {sRel = .Scale( .Data.SoleusMedialis1Node );};
  AnyRefNode SoleusMedialis2Node = {sRel = .Scale( .Data.SoleusMedialis2Node );};
  AnyRefNode SoleusMedialis3Node = {sRel = .Scale( .Data.SoleusMedialis3Node );};
  AnyRefNode SoleusLateralis1Node = {sRel = .Scale( .Data.SoleusLateralis1Node );};
  AnyRefNode SoleusLateralis2Node = {sRel = .Scale( .Data.SoleusLateralis2Node );};
  AnyRefNode SoleusLateralis3Node = {sRel = .Scale( .Data.SoleusLateralis3Node );};

  AnyRefNode TibialisAnterior1Node = {sRel = .Scale( .Data.TibialisAnterior1Node );};
  AnyRefNode TibialisAnterior2Node = {sRel = .Scale( .Data.TibialisAnterior2Node );};
  AnyRefNode TibialisAnterior3Node = {sRel = .Scale( .Data.TibialisAnterior3Node );};
  AnyRefNode TibialisAnteriorViaNode1 = {sRel =.Scale( .Data.TibialisAnteriorViaNode1 );};

  AnyRefNode TibialisPosteriorMedialis1Node = {sRel = .Scale( .Data.TibialisPosteriorMedialis1Node );};
  AnyRefNode TibialisPosteriorMedialis2Node = {sRel = .Scale( .Data.TibialisPosteriorMedialis2Node );};
  AnyRefNode TibialisPosteriorMedialis3Node = {sRel = .Scale( .Data.TibialisPosteriorMedialis3Node );};


  AnyRefNode TibialisPosteriorMedialisViaNode1 = {sRel = .Scale( .Data.TibialisPosteriorMedialisViaNode1 );};
  AnyRefNode TibialisPosteriorMedialisViaNode2 = {sRel = .Scale( .Data.TibialisPosteriorMedialisViaNode2 );};
  AnyRefNode TibialisPosteriorMedialisViaNode3 = {sRel = .Scale( .Data.TibialisPosteriorMedialisViaNode3 );};
  AnyRefNode TibialisPosteriorMedialisViaNode4 = {sRel = .Scale( .Data.TibialisPosteriorMedialisViaNode4 );};
  AnyRefNode TibialisPosteriorMedialisViaNode5 = {sRel = .Scale( .Data.TibialisPosteriorMedialisViaNode5 );};
  AnyRefNode TibialisPosteriorMedialisViaNode6 = {sRel = .Scale( .Data.TibialisPosteriorMedialisViaNode6 );};
  AnyRefNode TibialisPosteriorMedialisViaNode7 = {sRel = .Scale( .Data.TibialisPosteriorMedialisViaNode7 );};
  AnyRefNode TibialisPosteriorMedialisViaNode8 = {sRel = .Scale( .Data.TibialisPosteriorMedialisViaNode8 );};
  AnyRefNode TibialisPosteriorMedialisViaNode9 = {sRel = .Scale( .Data.TibialisPosteriorMedialisViaNode9 );};
  AnyRefNode TibialisPosteriorMedialisViaNode10 = {sRel = .Scale( .Data.TibialisPosteriorMedialisViaNode10 );};
  AnyRefNode TibialisPosteriorMedialisViaNode11 = {sRel = .Scale( .Data.TibialisPosteriorMedialisViaNode11 );};

  AnyRefNode TibialisPosteriorLateralis1Node = {sRel = .Scale( .Data.TibialisPosteriorLateralis1Node );};
  AnyRefNode TibialisPosteriorLateralis2Node = {sRel = .Scale( .Data.TibialisPosteriorLateralis2Node );};
  AnyRefNode TibialisPosteriorLateralis3Node = {sRel = .Scale( .Data.TibialisPosteriorLateralis3Node );};


  AnyRefNode TibialisPosteriorLateralisViaNode1 = {sRel = .Scale( .Data.TibialisPosteriorLateralisViaNode1 );};
  AnyRefNode TibialisPosteriorLateralisViaNode2 = {sRel = .Scale( .Data.TibialisPosteriorLateralisViaNode2 );};
  AnyRefNode TibialisPosteriorLateralisViaNode3 = {sRel = .Scale( .Data.TibialisPosteriorLateralisViaNode3 );};
  AnyRefNode TibialisPosteriorLateralisViaNode4 = {sRel = .Scale( .Data.TibialisPosteriorLateralisViaNode4 );};
  AnyRefNode TibialisPosteriorLateralisViaNode5 = {sRel = .Scale( .Data.TibialisPosteriorLateralisViaNode5 );};
  AnyRefNode TibialisPosteriorLateralisViaNode6 = {sRel = .Scale( .Data.TibialisPosteriorLateralisViaNode6 );};
  AnyRefNode TibialisPosteriorLateralisViaNode7 = {sRel = .Scale( .Data.TibialisPosteriorLateralisViaNode7 );};
  AnyRefNode TibialisPosteriorLateralisViaNode8 = {sRel = .Scale( .Data.TibialisPosteriorLateralisViaNode8 );};
  AnyRefNode TibialisPosteriorLateralisViaNode9 = {sRel = .Scale( .Data.TibialisPosteriorLateralisViaNode9 );};
  AnyRefNode TibialisPosteriorLateralisViaNode10 = {sRel = .Scale( .Data.TibialisPosteriorLateralisViaNode10 );};


  //Insertion points on the Tibia (all these muscles, exept for the Biceps Femoris Caput Breve, originate from the Pelvis):

  //  AnyRefNode AdductorMagnusDistal1Node = {sRel = .Scale( .Data.AdductorMagnusDistal1Node );};
  //  AnyRefNode AdductorMagnusDistal2Node = {sRel = .Scale( .Data.AdductorMagnusDistal2Node );};
  //  AnyRefNode AdductorMagnusDistal3Node = {sRel = .Scale( .Data.AdductorMagnusDistal3Node );};
  //


  AnyRefNode BicepsFemorisCaputLongum1Node = {sRel = .Scale( .Data.BicepsFemorisCaputLongum1Node );};
  AnyRefNode BicepsFemorisCaputBreve1Node = {sRel = .Scale( .Data.BicepsFemorisCaputBreve1Node );};
  AnyRefNode BicepsFemorisCaputBreve2Node = {sRel = .Scale( .Data.BicepsFemorisCaputBreve2Node );};
  AnyRefNode BicepsFemorisCaputBreve3Node = {sRel = .Scale( .Data.BicepsFemorisCaputBreve3Node );};




  AnyRefNode Gracilis1Node = {sRel = .Scale( .Data.Gracilis1Node );};
  AnyRefNode Gracilis2Node = {sRel = .Scale( .Data.Gracilis2Node );};
  AnyRefNode GracilisViaNode1 = {sRel = .Scale( .Data.GracilisViaNode1 );};
  AnyRefNode GracilisViaNode2 = {sRel = .Scale( .Data.GracilisViaNode2 );};
  //AnyRefNode GracilisViaNode3 = {sRel = .Scale( .Data.GracilisViaNode3 );};
  //AnyRefNode GracilisViaNode4 = {sRel = .Scale( .Data.GracilisViaNode4 );};
  //AnyRefNode GracilisViaNode5 = {sRel = .Scale( .Data.GracilisViaNode5 );};
  AnyRefNode GracilisViaNode6 = {sRel = .Scale( .Data.GracilisViaNode6 );};
  AnyRefNode GracilisViaNode7 = {sRel = .Scale( .Data.GracilisViaNode7 );};
  AnyRefNode GracilisViaNode8 = {sRel = .Scale( .Data.GracilisViaNode8 );};


  AnyRefNode SartoriusProximal1Node = {sRel = .Scale( .Data.SartoriusProximal1Node );};
  AnyRefNode SartoriusDistal1Node = {sRel = .Scale( .Data.SartoriusDistal1Node );};



  AnyRefNode Semimembranosus1Node = {sRel = .Scale( .Data.Semimembranosus1Node );};



  AnyRefNode Semitendinosus1Node = {sRel = .Scale( .Data.Semitendinosus1Node );};
  AnyRefNode SemitendinosusViaNode1 = {sRel = .Scale( .Data.SemitendinosusViaNode1 );};


  AnyRefNode SemitendinosusViaNode2 = {sRel = .Scale( .Data.SemitendinosusViaNode2 );};
  AnyRefNode SemitendinosusViaNode3 = {sRel = .Scale( .Data.SemitendinosusViaNode3 );};
  AnyRefNode SemitendinosusViaNode4 = {sRel = .Scale( .Data.SemitendinosusViaNode4 );};
  AnyRefNode SemitendinosusViaNode5 = {sRel = .Scale( .Data.SemitendinosusViaNode5 );};
  AnyRefNode SemitendinosusViaNode6 = {sRel = .Scale( .Data.SemitendinosusViaNode6 );};
  AnyRefNode SemitendinosusViaNode7 = {sRel = .Scale( .Data.SemitendinosusViaNode7 );};

  //Original nodes are placed to high on tibia this can not be correct
  //  AnyRefNode TensorFasciaeLatae1Node = {sRel = .Scale( .Data.TensorFasciaeLatae1Node );};
  //  AnyRefNode TensorFasciaeLatae2Node = {sRel = .Scale( .Data.TensorFasciaeLatae2Node );};

  //New positions are based on bone

  AnyRefNode TensorFasciaeLatae1Node = {sRel = .Scale( .Data.TensorFasciaeLatae1Node );};
  AnyRefNode TensorFasciaeLatae2Node = {sRel = .Scale( .Data.TensorFasciaeLatae2Node );};



  AnyRefNode Popliteus1Node = {sRel = .Scale( .Data.Popliteus1Node );};
  AnyRefNode Popliteus2Node = {sRel = .Scale( .Data.Popliteus2Node );};

  AnyRefNode PopliteusViaNode1 = {sRel = .Scale( .Data.PopliteusViaNode1 );};
  

  AnyDrawSurf DrwSurfTibia =
  {
    FileName = ..STL.FilenameShank;
    ScaleXYZ = {1.0, 1.0, ...Sign*1.0};
    RGB = ...ColorRef.Segments;
    AnyFunTransform3D &Scale =.Scale;
    Opacity = ...BonesOpacity.Shank;
    Face=-1;
  };

  AnyDrawSurf DrwSurfFibula = {
    FileName = ..STL.FilenameFibula;
    ScaleXYZ = {1.0, 1.0, ...Sign*1.0};
    RGB = ...ColorRef.Segments;
    AnyFunTransform3D &Scale =.Scale; 
    Opacity = ...BonesOpacity.Shank;
    Face=-1;
  };  
  
  #if SKIN
  AnyDrawSurf Drw2 =
  {
    FileName = ..STL.FilenameShankSkin;
    ScaleXYZ = {1.0, 1.0, ...Sign*1.0};
    RGB = ...ColorRef.Skin;
    Opacity = Main.DrawSettings.SkinOpacity.Opacity;
    AnyFunTransform3D &Scale =.Scale;
    Face=-1;
  };
  #endif

  #if MUSCLETISSUE
  AnyDrawSurf Drw1 =
  {
    FileName = ..STL.FilenameShankMuscleTissue;
    ScaleXYZ = {1.0, 1.0, ...Sign*1.0};
    RGB = ...ColorRef.MuscleTissue;
    Opacity = Main.DrawSettings.MuscleTissueOpacity.Opacity;
    AnyFunTransform3D &Scale =.Scale;
    Face=-1;
  };
  #endif

  #include "../DrawSettings/Nodes.any"
  #include "../DrawSettings/SegmentAxes.any"

}; // End of Shank


AnySeg Thigh =
{
  AnyFolder &Data = ..ModelParameters.Thigh;

  JaboutCoMOnOff = On;
  r0=.Pelvis.HipJoint.sRel*....Trunk.Segments.PelvisSeg.Axes0'+    ....Trunk.Segments.PelvisSeg.r0-    HipJoint.sRel*Axes0';

  #include "../DrawSettings/Nodes.any"
  #include "../DrawSettings/SegmentAxes.any"

  AnyFloat pUnscaled = {Data.HipJoint, Data.EpicondylusFemorisMedialis, Data.EpicondylusFemorisLateralis};
  Scale = {AnyFunTransform3D& GeomScale = ...GeoScaling.Thigh.ScaleFunction;};
  AnyVar Sign = ..Sign;
  #define MACRO_CONSTRUCT_ANATOMICAL_FRAME_s(p, SIGN) p[0]
  #define MACRO_CONSTRUCT_ANATOMICAL_FRAME_A(p, SIGN) RotMat(p[0],0.5*(p[1]+p[2]), p[1]) * RotMat(pi*0.5,x) * RotMat(pi*0.5,z) * RotMat(0.5*(SIGN-1)*pi,y)
  #include "..\Scaling\SegScaleFunWrtAnatomicalFrame.any"

  AnyRefNode AnatomicalFrame =
  {
    AnyFloat pScaled = .Scale(.pUnscaled);
    sRel = MACRO_CONSTRUCT_ANATOMICAL_FRAME_s(pScaled, .Sign);
    ARel = MACRO_CONSTRUCT_ANATOMICAL_FRAME_A(pScaled, .Sign);
    AnyVec3 sRelUnscaled = MACRO_CONSTRUCT_ANATOMICAL_FRAME_s(.pUnscaled, .Sign); ///< Generic unscaled position of thigh ScalingNode
    AnyMat33 ARelUnscaled = MACRO_CONSTRUCT_ANATOMICAL_FRAME_A(.pUnscaled, .Sign);///< Generic unscaled rotation of thigh ScalingNode
  };
  /// For backwards Compatibility with AMMR 2.4 MoCap Marker protocols
  AnyRefNode& MoCapMarkerFrameAMMR24 = AnatomicalFrame;

  AnyRefNode& ScalingNode=AnatomicalFrame ;
  #undef MACRO_CONSTRUCT_ANATOMICAL_FRAME_s
  #undef MACRO_CONSTRUCT_ANATOMICAL_FRAME_A

  AnyVar MassS = ..MassScaling.Thigh.MassScale;
  Mass = MassS*Data.MassStandard;
  AnyVar LengthStandard = vnorm(Data.KneeJoint-Data.HipJoint,2);

  /// This coordinate system is placed according the International Society of Biomechanics' (ISB)
  /// recommendations for an anatomical coordinate system for the hip joint in the thigh segment.
  /// See ISB proposal by G. Wu, S. Siegler, P. Allard, C. Kirtley, A. Leardini, D. Rosenbaum, M. Whittle, D.
  /// D'Lima, L. Cristofolini, H. Witte, O. Schmid, I. Stokes. J. Biomech. 35(4):543-548, 2002
  /// Section 4.4
  AnyRefNode HipJointAnatomicalFrame =
  {
    AnyVec3 O = .Scale(.Data.HipJoint);
    AnyVec3 Y = O - 0.5*(.Scale(.Data.EpicondylusFemorisLateralis) + .Scale(.Data.EpicondylusFemorisMedialis) );
    AnyVec3 X = cross(Y,...Sign*(.Scale(.Data.EpicondylusFemorisLateralis) - .Scale(.Data.EpicondylusFemorisMedialis) ));
    AnyVec3 Z = cross(X,Y);
    sRel = O;
    ARel = {X/vnorm(X),Y/vnorm(Y),Z/vnorm(Z)}';
  };

  /// This coordinate system is placed based on the bony landmarks of femur.
  /// O: Center of the two femural epicondyles
  /// Z: A vector going through the lateral and medial femural epicondyle pointing to the right
  /// X: The vector perpendicular to Z axis and the long axis of the femur point anteriorly
  /// Y: The vector perpendicular to Z and X
  AnyRefNode KneeJointAnatomicalFrame =
  {
    AnyVec3 O = 0.5*(.Scale(.Data.EpicondylusFemorisLateralis) + .Scale(.Data.EpicondylusFemorisMedialis) );
    AnyVec3 Z = ...Sign*(.Scale(.Data.EpicondylusFemorisLateralis) - .Scale(.Data.EpicondylusFemorisMedialis) );
    AnyVec3 X = cross(.HipJoint.sRel-O,Z);
    AnyVec3 Y = cross(Z,X);
    sRel = O;
    ARel = {X/vnorm(X),Y/vnorm(Y),Z/vnorm(Z)}';
  };

  sCoM = Scale(Data.sCoM);
  Jii = Data.Jii;
  Jij = Data.Jij;


  AnyRefNode RectusVastiiWrapSurf =
  {
    AnyMatrix p = .Scale(.Data.RectusVastiiWrapLandmarks);	
    AnyFloat lengthscalefactor = 3.5;
    AnyFloat radiusscalefactor = 1;
    AnyVar Z_rotation =0;
    #include "<ANYBODY_PATH_MODELUTILS>/WrappingSurfaces/WrappingCylinder5PointFit.any"
  };





   #if TLEM_JOINT_TYPE_KNEE != _JOINT_TYPE_USERDEFINED_
   AnyRefNode KneeJoint =
   {
    /// Deprecated name the variable 'VarusValgusRotation'.
    AnyVar AxisRot= VarusValgusRotation;
    /// Variable that allows for changing the varus valgus rotation in the model.
    AnyVar VarusValgusRotation = DesignVar(0);
     #if TLEM_JOINT_TYPE_KNEE == _JOINT_TYPE_BONY_LANDMARK_
       AnyVec3 sRelUnscaled = 0.5*(.Data.EpicondylusFemorisLateralis + .Data.EpicondylusFemorisMedialis);
       AnyMat33 ARelUnscaled = RotMat({0.0,0,0}, .Sign*(.Data.EpicondylusFemorisLateralis - .Data.EpicondylusFemorisMedialis), .AnatomicalFrame.ARelUnscaled'[1])
                               *RotMat(pi/2,y)*RotMat(AxisRot,x);
       /// Knee joint location. Defined from the two epicondyle bony landmarks
       sRel =0.5*(.Scale(.Data.EpicondylusFemorisLateralis) + .Scale(.Data.EpicondylusFemorisMedialis));
       /// Knee joint orientation. Defined from the two epicondyle bony landmarks
       ARel = RotMat({0.0,0,0}, .Sign*(.Scale(.Data.EpicondylusFemorisLateralis) - .Scale(.Data.EpicondylusFemorisMedialis)), .AnatomicalFrame.ARel'[1])*RotMat(pi/2,y)*RotMat(AxisRot,x);
     #endif
     #if TLEM_JOINT_TYPE_KNEE == _JOINT_TYPE_DEFAULT_
      AnyVec3 sRelUnscaled = .Data.KneeJoint;
      AnyMat33 ARelUnscaled = RotMat({0,0,0.0},
                                     .Sign * (KneeLateralControlPoint - KneeMedialControlPoint ),
                                     .AnatomicalFrame.ARelUnscaled'[1]) * RotMat(pi/2,y) * RotMat(AxisRot,x);
      /// Control point for the knee joint. Found by projecting the EpicondylusFemoris bony landmarks onto the
      /// knee axis from the cadaver data set. Thus, scaling which moves the control points will also scale the Knee joint axis
      AnyVec3 KneeLateralControlPoint = .Data.KneeJoint + ((.Data.EpicondylusFemorisLateralis - .Data.KneeJoint)*.Data.KneeJointAxis')*.Data.KneeJointAxis;
      /// Control point for the knee joint. Found by projecting the EpicondylusFemoris bony landmarks onto the
      /// knee axis from the cadaver data set. Thus, scaling which moves the control points will also scale the Knee joint axis
      AnyVec3 KneeMedialControlPoint = .Data.KneeJoint + ((.Data.EpicondylusFemorisMedialis - .Data.KneeJoint)*.Data.KneeJointAxis')*.Data.KneeJointAxis;

      sRel = .Scale(.Data.KneeJoint);
      ARel = RotMat({0.0,0,0}, .Sign*(.Scale(KneeLateralControlPoint)-.Scale(KneeMedialControlPoint)), .AnatomicalFrame.ARel'[1])*RotMat(pi/2,y)*RotMat(AxisRot,x);
    #endif

    #include "../DrawSettings/JointAxesDistal.any"

    #if DRAWAXES
    AnyDrawLine SJaxis2 =
    {
      Visible = On;
      p0 = ..Data.KneesRel + {..Data.KneeJointAxis[2],..Data.KneeJointAxis[1],..Data.KneeJointAxis[0]}*0.2;
      p1 = ..Data.KneesRel - {..Data.KneeJointAxis[2],..Data.KneeJointAxis[1],..Data.KneeJointAxis[0]}*0.2;      //Offset = {0, 0, 0};
      Line =
      {
        Thickness = 0.001;
        RGB = {0, 0, 0};
      };
    };
    #endif
  };
  #endif
  
  #if TLEM_JOINT_TYPE_HIP != _JOINT_TYPE_USERDEFINED_
  AnyRefNode HipJoint =
  {
    AnyVec3 sRelUnscaled = .Data.HipJoint;
    
    AnyMat33 ARelUnscaled = RotMat({0.0,0,0},sRelUnscaled-.KneeJoint.sRelUnscaled, .AnatomicalFrame.ARelUnscaled'[2]) *RotMat(-pi/2,x)*RotMat(-pi/2,z);
    sRel = .Scale(sRelUnscaled);
    ARel = RotMat({0.0,0,0}, .Scale(sRelUnscaled)-.Scale(.KneeJoint.sRelUnscaled), .AnatomicalFrame.ARel'[2])*RotMat(-pi/2,x)*RotMat(-pi/2,z);
     
    #include "../DrawSettings/JointAxesProximal.any"
  };
  #endif
  
  #if TLEM_JOINT_TYPE_PATELLOFEMORAL != _JOINT_TYPE_USERDEFINED_
   AnyRefNode PatellaFemurJoint =
   {
     AnyVec3 sRelUnscaled = .Data.PatellaFemurJoint;
     AnyMat33 ARelUnscaled = RotMat({0.0,0,0}, .Sign*(.Data.PatellaFemurJointAxis), .AnatomicalFrame.ARelUnscaled'[1])*RotMat(pi/2,y);
     /// Control point for the PatellaFemurJoint. Found by projecting the EpicondylusFemoris bony landmarks onto the
     /// PatellaFemurJoint axis from the cadaver data set. Thus, scaling which moves the control points will also scale the PatellaFemurJointjoint axis
     AnyVec3 PFLateralControlPoint = .Scale(.Data.PatellaFemurJoint + (.Data.EpicondylusFemorisLateralis - .Data.PatellaFemurJoint)*.Data.PatellaFemurJointAxis'*.Data.PatellaFemurJointAxis);
     /// Control point for the PatellaFemurJoint. Found by projecting the EpicondylusFemoris bony landmarks onto the
     /// PatellaFemurJoint axis from the cadaver data set. Thus, scaling which moves the control points will also scale the PatellaFemurJointjoint axis
     AnyVec3 PFMedialControlPoint = .Scale(.Data.PatellaFemurJoint + (.Data.EpicondylusFemorisMedialis - .Data.PatellaFemurJoint)*.Data.PatellaFemurJointAxis'*.Data.PatellaFemurJointAxis);
     sRel = .Scale(.Data.PatellaFemurJoint);
     /// PatellaFemurJoint Joint orientation is calculated based on the direction between the two control points.
     ARel = RotMat({0.0,0,0}, .Sign*(PFLateralControlPoint - PFMedialControlPoint), .AnatomicalFrame.ARel'[1])*RotMat(pi/2,y);

    #include "../DrawSettings/JointAxesDistal.any"

    #if DRAWAXES
    AnyDrawLine SJaxis2 =
    {
      Visible = On;
      p0 = ..Data.PatellaFemursRel + {..Data.PatellaFemurJointAxis[2],..Data.PatellaFemurJointAxis[1],..Data.PatellaFemurJointAxis[0]}*0.2;
      p1 = ..Data.PatellaFemursRel - {..Data.PatellaFemurJointAxis[2],..Data.PatellaFemurJointAxis[1],..Data.PatellaFemurJointAxis[0]}*0.2;      //Offset = {0, 0, 0};
      Line =
      {
        Thickness = 0.001;
        RGB = {0, 0, 0};
      };
    };
    #endif
  };
  #endif
  
  AnyRefNode EpicondylusFemorisMedialis =
  {
    sRel=.Scale(.Data.EpicondylusFemorisMedialis);// Coordinates of the Medial Femur Epicondyle bony landmark, Klein Horsman
    #include "../DrawSettings/BML.any"
  };
  AnyRefNode EpicondylusFemorisLateralis =
  {
    sRel = .Scale(.Data.EpicondylusFemorisLateralis );// Coordinates of the lateral Femur Epicondyle bony landmark, Klein Horsman
    #include "../DrawSettings/BML.any"
  };
  AnyRefNode EpicondylusFemorisMidPoint =
  {
    sRel=0.5*(.EpicondylusFemorisMedialis.sRel+.EpicondylusFemorisLateralis.sRel)  ;
  };

  // Origin points on the Femur (all Vastus muscles have their insertion point situated on the Patella) :
  AnyRefNode BicepsFemorisCaputBreve1Node = {sRel = .Scale( .Data.BicepsFemorisCaputBreve1Node );};
  AnyRefNode BicepsFemorisCaputBreve2Node = {sRel = .Scale( .Data.BicepsFemorisCaputBreve2Node );};
  AnyRefNode BicepsFemorisCaputBreve3Node = {sRel = .Scale( .Data.BicepsFemorisCaputBreve3Node );};

  AnyRefNode GastrocnemiusLateralis1Node = {sRel = .Scale( .Data.GastrocnemiusLateralis1Node );};


  AnyRefNode GastrocnemiusMedialis1Node = {sRel = .Scale( .Data.GastrocnemiusMedialis1Node );};



  AnyRefNode Plantaris1Node = {sRel = .Scale( .Data.Plantaris1Node );};

  AnyRefNode Popliteus1Node = {sRel = .Scale( .Data.Popliteus1Node );};
  AnyRefNode Popliteus2Node = {sRel = .Scale( .Data.Popliteus2Node );};

  AnyRefNode VastusIntermedius1Node = {sRel = .Scale( .Data.VastusIntermedius1Node );};
  AnyRefNode VastusIntermedius2Node = {sRel = .Scale( .Data.VastusIntermedius2Node );};
  AnyRefNode VastusIntermedius3Node = {sRel = .Scale( .Data.VastusIntermedius3Node );};
  AnyRefNode VastusIntermedius4Node = {sRel = .Scale( .Data.VastusIntermedius4Node );};
  AnyRefNode VastusIntermedius5Node = {sRel = .Scale( .Data.VastusIntermedius5Node );};
  AnyRefNode VastusIntermedius6Node = {sRel = .Scale( .Data.VastusIntermedius6Node );};

  AnyRefNode VastusLateralisInferior1Node = {sRel = .Scale( .Data.VastusLateralisInferior1Node );};
  AnyRefNode VastusLateralisInferior2Node = {sRel = .Scale( .Data.VastusLateralisInferior2Node );};
  AnyRefNode VastusLateralisInferior3Node = {sRel = .Scale( .Data.VastusLateralisInferior3Node );};
  AnyRefNode VastusLateralisInferior4Node = {sRel = .Scale( .Data.VastusLateralisInferior4Node );};
  AnyRefNode VastusLateralisInferior5Node = {sRel = .Scale( .Data.VastusLateralisInferior5Node );};
  AnyRefNode VastusLateralisInferior6Node = {sRel = .Scale( .Data.VastusLateralisInferior6Node );};
  AnyRefNode VastusLateralisSuperior1Node = {sRel = .Scale( .Data.VastusLateralisSuperior1Node );};
  AnyRefNode VastusLateralisSuperior2Node = {sRel = .Scale( .Data.VastusLateralisSuperior2Node );};

  AnyRefNode VastusMedialisInferior1Node = {sRel = .Scale( .Data.VastusMedialisInferior1Node );};
  AnyRefNode VastusMedialisInferior2Node = {sRel = .Scale( .Data.VastusMedialisInferior2Node );};

  AnyRefNode VastusMedialisMid1Node = {sRel = .Scale( .Data.VastusMedialisMid1Node );};
  AnyRefNode VastusMedialisMid2Node = {sRel = .Scale( .Data.VastusMedialisMid2Node );};


  AnyRefNode VastusMedialisSuperior1Node = {sRel = .Scale( .Data.VastusMedialisSuperior1Node );};
  AnyRefNode VastusMedialisSuperior2Node = {sRel = .Scale( .Data.VastusMedialisSuperior2Node );};
  AnyRefNode VastusMedialisSuperior3Node = {sRel = .Scale( .Data.VastusMedialisSuperior3Node );};
  AnyRefNode VastusMedialisSuperior4Node = {sRel = .Scale( .Data.VastusMedialisSuperior4Node );};


  AnyRefNode VastusMedialisSuperior5Node = {sRel = .Scale( .Data.VastusMedialisSuperior5Node );};
  AnyRefNode VastusMedialisSuperior6Node = {sRel = .Scale( .Data.VastusMedialisSuperior6Node );};

  AnyRefNode AdductorBrevisProximal1Node = {sRel = .Scale( .Data.AdductorBrevisProximal1Node );};
  AnyRefNode AdductorBrevisProximal2Node = {sRel = .Scale( .Data.AdductorBrevisProximal2Node );};
  AnyRefNode AdductorBrevisMid1Node = {sRel = .Scale( .Data.AdductorBrevisMid1Node );};
  AnyRefNode AdductorBrevisMid2Node = {sRel = .Scale( .Data.AdductorBrevisMid2Node );};
  AnyRefNode AdductorBrevisDistal1Node = {sRel = .Scale( .Data.AdductorBrevisDistal1Node );};
  AnyRefNode AdductorBrevisDistal2Node = {sRel = .Scale( .Data.AdductorBrevisDistal2Node );};

  AnyRefNode AdductorLongus1Node = {sRel = .Scale( .Data.AdductorLongus1Node );};
  AnyRefNode AdductorLongus2Node = {sRel = .Scale( .Data.AdductorLongus2Node );};
  AnyRefNode AdductorLongus3Node = {sRel = .Scale( .Data.AdductorLongus3Node );};
  AnyRefNode AdductorLongus4Node = {sRel = .Scale( .Data.AdductorLongus4Node );};
  AnyRefNode AdductorLongus5Node = {sRel = .Scale( .Data.AdductorLongus5Node );};
  AnyRefNode AdductorLongus6Node = {sRel = .Scale( .Data.AdductorLongus6Node );};

  AnyRefNode AdductorMagnusMid1Node = {sRel = .Scale( .Data.AdductorMagnusMid1Node );};
  AnyRefNode AdductorMagnusMid2Node = {sRel = .Scale( .Data.AdductorMagnusMid2Node );};
  AnyRefNode AdductorMagnusMid3Node = {sRel = .Scale( .Data.AdductorMagnusMid3Node );};
  AnyRefNode AdductorMagnusMid4Node = {sRel = .Scale( .Data.AdductorMagnusMid4Node );};
  AnyRefNode AdductorMagnusMid5Node = {sRel = .Scale( .Data.AdductorMagnusMid5Node );};
  AnyRefNode AdductorMagnusMid6Node = {sRel = .Scale( .Data.AdductorMagnusMid6Node );};

  AnyRefNode AdductorMagnusProximal1Node = {sRel = .Scale( .Data.AdductorMagnusProximal1Node );};
  AnyRefNode AdductorMagnusProximal2Node = {sRel = .Scale( .Data.AdductorMagnusProximal2Node );};
  AnyRefNode AdductorMagnusProximal3Node = {sRel = .Scale( .Data.AdductorMagnusProximal3Node );};
  AnyRefNode AdductorMagnusProximal4Node = {sRel = .Scale( .Data.AdductorMagnusProximal4Node );};


  AnyRefNode AdductorMagnusDistal1Node = {sRel = .Scale( .Data.AdductorMagnusDistal1Node );};
  AnyRefNode AdductorMagnusDistal2Node = {sRel = .Scale( .Data.AdductorMagnusDistal2Node );};
  AnyRefNode AdductorMagnusDistal3Node = {sRel = .Scale( .Data.AdductorMagnusDistal3Node );};



  AnyRefNode GemellusInferior1Node = {sRel = .Scale( .Data.GemellusInferior1Node );};

  AnyRefNode GemellusSuperior1Node = {sRel = .Scale( .Data.GemellusSuperior1Node );};

  AnyRefNode GluteusMaximusSuperior1Node = {sRel = .Scale( .Data.GluteusMaximusSuperior1Node );};
  AnyRefNode GluteusMaximusSuperior2Node = {sRel = .Scale( .Data.GluteusMaximusSuperior2Node );};
  AnyRefNode GluteusMaximusSuperior3Node = {sRel = .Scale( .Data.GluteusMaximusSuperior3Node );};
  AnyRefNode GluteusMaximusSuperior4Node = {sRel = .Scale( .Data.GluteusMaximusSuperior4Node );};
  AnyRefNode GluteusMaximusSuperior5Node = {sRel = .Scale( .Data.GluteusMaximusSuperior5Node );};
  AnyRefNode GluteusMaximusSuperior6Node = {sRel = .Scale( .Data.GluteusMaximusSuperior6Node );};

  AnyRefNode GluteusMaximusInferior1Node = {sRel = .Scale( .Data.GluteusMaximusInferior1Node );};
  AnyRefNode GluteusMaximusInferior2Node = {sRel = .Scale( .Data.GluteusMaximusInferior2Node );};
  AnyRefNode GluteusMaximusInferior3Node = {sRel = .Scale( .Data.GluteusMaximusInferior3Node );};
  AnyRefNode GluteusMaximusInferior4Node = {sRel = .Scale( .Data.GluteusMaximusInferior4Node );};
  AnyRefNode GluteusMaximusInferior5Node = {sRel = .Scale( .Data.GluteusMaximusInferior5Node );};
  AnyRefNode GluteusMaximusInferior6Node = {sRel = .Scale( .Data.GluteusMaximusInferior6Node );};

  AnyRefNode GluteusMediusAnterior1Node = {sRel = .Scale( .Data.GluteusMediusAnterior1Node );};
  AnyRefNode GluteusMediusAnterior2Node = {sRel = .Scale( .Data.GluteusMediusAnterior2Node );};
  AnyRefNode GluteusMediusAnterior3Node = {sRel = .Scale( .Data.GluteusMediusAnterior3Node );};
  AnyRefNode GluteusMediusAnterior4Node = {sRel = .Scale( .Data.GluteusMediusAnterior4Node );};
  AnyRefNode GluteusMediusAnterior5Node = {sRel = .Scale( .Data.GluteusMediusAnterior5Node );};
  AnyRefNode GluteusMediusAnterior6Node = {sRel = .Scale( .Data.GluteusMediusAnterior6Node );};

  AnyRefNode GluteusMediusPosterior1Node = {sRel = .Scale( .Data.GluteusMediusPosterior1Node );};
  AnyRefNode GluteusMediusPosterior2Node = {sRel = .Scale( .Data.GluteusMediusPosterior2Node );};
  AnyRefNode GluteusMediusPosterior3Node = {sRel = .Scale( .Data.GluteusMediusPosterior3Node );};
  AnyRefNode GluteusMediusPosterior4Node = {sRel = .Scale( .Data.GluteusMediusPosterior4Node );};
  AnyRefNode GluteusMediusPosterior5Node = {sRel = .Scale( .Data.GluteusMediusPosterior5Node );};
  AnyRefNode GluteusMediusPosterior6Node = {sRel = .Scale( .Data.GluteusMediusPosterior6Node );};


  AnyRefNode GluteusMinimusAnterior1Node = {sRel = .Scale( .Data.GluteusMinimusAnterior1Node );};

  AnyRefNode GluteusMinimusMid1Node = {sRel = .Scale( .Data.GluteusMinimusMid1Node );};

  AnyRefNode GluteusMinimusPosterior1Node = {sRel = .Scale( .Data.GluteusMinimusPosterior1Node );};
  
  

  AnyRefNode IliacusLateralis1Node = {sRel = .Scale( .Data.IliacusLateralis1Node );};
  AnyRefNode IliacusLateralis2Node = {sRel = .Scale( .Data.IliacusLateralis2Node );};
  AnyRefNode IliacusLateralis3Node = {sRel = .Scale( .Data.IliacusLateralis3Node );};

  AnyRefNode IliacusMid1Node = {sRel = .Scale( .Data.IliacusMid1Node );};
  AnyRefNode IliacusMid2Node = {sRel = .Scale( .Data.IliacusMid2Node );};
  AnyRefNode IliacusMid3Node = {sRel = .Scale( .Data.IliacusMid3Node );};

  AnyRefNode IliacusMedialis1Node = {sRel = .Scale( .Data.IliacusMedialis1Node );};
  AnyRefNode IliacusMedialis2Node = {sRel = .Scale( .Data.IliacusMedialis2Node );};
  AnyRefNode IliacusMedialis3Node = {sRel = .Scale( .Data.IliacusMedialis3Node );};

  AnyRefNode ObturatorExternusInferior1Node = {sRel = .Scale( .Data.ObturatorExternusInferior1Node );};
  AnyRefNode ObturatorExternusInferior2Node = {sRel = .Scale( .Data.ObturatorExternusInferior2Node );};

  AnyRefNode ObturatorExternusSuperior1Node = {sRel = .Scale( .Data.ObturatorExternusSuperior1Node );};
  AnyRefNode ObturatorExternusSuperior2Node = {sRel = .Scale( .Data.ObturatorExternusSuperior2Node );};
  AnyRefNode ObturatorExternusSuperior3Node = {sRel = .Scale( .Data.ObturatorExternusSuperior3Node );};
  AnyRefNode ObturatorExternusSuperiorViaNode1 = {sRel = .Scale( .Data.ObturatorExternusSuperiorViaNode1 );};


  AnyRefNode ObturatorInternus1Node = {sRel = .Scale( .Data.ObturatorInternus1Node );};

  AnyRefNode ObturatorInternus2Node = {sRel = .Scale( .Data.ObturatorInternus2Node );};
  AnyRefNode ObturatorInternus3Node = {sRel = .Scale( .Data.ObturatorInternus3Node );};

  AnyRefNode Pectineus1Node = {sRel = .Scale( .Data.Pectineus1Node );};
  AnyRefNode Pectineus2Node = {sRel = .Scale( .Data.Pectineus2Node );};
  AnyRefNode Pectineus3Node = {sRel = .Scale( .Data.Pectineus3Node );};
  AnyRefNode Pectineus4Node = {sRel = .Scale( .Data.Pectineus4Node );};

  AnyRefNode Piriformis1Node = {sRel = .Scale( .Data.Piriformis1Node );};

  AnyRefNode PsoasMinor1Node = {sRel = .Scale( .Data.PsoasMinor1Node );};
  AnyRefNode PsoasMajor1Node = {sRel = .Scale( .Data.PsoasMajor1Node );};
  AnyRefNode PsoasMajor2Node = {sRel = .Scale( .Data.PsoasMajor2Node );};
  AnyRefNode PsoasMajor3Node = {sRel = .Scale( .Data.PsoasMajor3Node );};


  AnyRefNode QuadratusFemoris1Node	= {sRel = .Scale( .Data.QuadratusFemoris1Node );};
  AnyRefNode QuadratusFemoris2Node	= {sRel = .Scale( .Data.QuadratusFemoris2Node );};
  AnyRefNode QuadratusFemoris3Node	= {sRel = .Scale( .Data.QuadratusFemoris3Node );};
  AnyRefNode QuadratusFemoris4Node	= {sRel = .Scale( .Data.QuadratusFemoris4Node );};

  AnyRefNode SartoriusProximalViaNode1 = {sRel = .Scale( .Data.SartoriusProximalViaNode1 );};
  AnyRefNode SartoriusProximalViaNode2 = {sRel = .Scale( .Data.SartoriusProximalViaNode2 );};
  AnyRefNode SartoriusProximalViaNode3 = {sRel = .Scale( .Data.SartoriusProximalViaNode3 );};
  AnyRefNode SartoriusProximalViaNode4 = {sRel = .Scale( .Data.SartoriusProximalViaNode4 );};
  AnyRefNode SartoriusProximalViaNode5 = {sRel = .Scale( .Data.SartoriusProximalViaNode5 );};
  AnyRefNode SartoriusProximalViaNode6 = {sRel = .Scale( .Data.SartoriusProximalViaNode6 );};
  AnyRefNode SartoriusProximalViaNode7 = {sRel = .Scale( .Data.SartoriusProximalViaNode7 );};
  AnyRefNode SartoriusProximalViaNode8 = {sRel = .Scale( .Data.SartoriusProximalViaNode8 );};
  AnyRefNode SartoriusProximalViaNode9 = {sRel = .Scale( .Data.SartoriusProximalViaNode9 );};
  AnyRefNode SartoriusProximalViaNode10 = {sRel = .Scale( .Data.SartoriusProximalViaNode10 );};
  AnyRefNode SartoriusProximalViaNode11 = {sRel = .Scale( .Data.SartoriusProximalViaNode11 );};
  AnyRefNode SartoriusProximalViaNode12 = {sRel = .Scale( .Data.SartoriusProximalViaNode12 );};
  AnyRefNode SartoriusProximalViaNode13 = {sRel = .Scale( .Data.SartoriusProximalViaNode13 );};

  AnyRefNode SartoriusDistalViaNode1 = {sRel = .Scale( .Data.SartoriusDistalViaNode1 );};




  AnyRefNode &IliopsoasIns = IliacusMid1Node;
  AnyRefNode IlioFemAntIns  = {sRel = .Scale( .Data.IlioFemAntIns );};
  AnyRefNode IlioFemAntIns2  = {sRel = .Scale( .Data.IlioFemAntIns2 );};
  AnyRefNode IlioFemLatIns  = {sRel = .Scale( .Data.IlioFemLatIns );};
  AnyRefNode IlioFemLatIns2 = {sRel = .Scale( .Data.IlioFemLatIns2 );};
  AnyRefNode PuboFemIns  = {sRel = .Scale( .Data.PuboFemIns );};
  AnyRefNode IschioFemIns  = {sRel = .Scale( .Data.IschioFemIns );};

  AnyRefNode GastroWrapSurf =
  {
    AnyMatrix p = .Scale(.Data.GastroWrapLandmarks); 
    AnyFloat lengthscalefactor = 2;
    AnyFloat radiusscalefactor = 1;
  
    AnyVar Z_rotation =0;
  
    #include "<ANYBODY_PATH_MODELUTILS>/WrappingSurfaces/WrappingCylinder5PointFit.any"
  };


  AnyDrawSurf Drw3 =
  {
    FileName = ..STL.FilenameThigh;
    ScaleXYZ = {1.0, 1.0, ...Sign*1.0}*1;
    RGB = ...ColorRef.Segments;
    Opacity = ...BonesOpacity.Thigh;
    AnyFunTransform3D &Scale =.Scale;
    Face=-1;
  };


  #if SKIN
  AnyRefNode SkinsRel  =
  {
    sRel = {0,0,0};
    ARel = RotMat(...Sign*-27*pi/180, y);
    AnyDrawSurf Drw2 =
    {
      FileName = ...STL.FilenameThighSkin;
      ScaleXYZ = {1.0, 1.0, ....Sign*1.0};
      RGB = ....ColorRef.Skin;
      Opacity = Main.DrawSettings.SkinOpacity.Opacity;
      AnyFunTransform3D &Scale =..Scale;
      Face=-1;
    };
  };
  #endif

  #if MUSCLETISSUE
  AnyRefNode MuscleTissuesRel  =
  {
    sRel = {0,0,0};
    ARel = RotMat(...Sign*-27*pi/180, y);
    AnyDrawSurf Drw2 = {
      FileName = ...STL.FilenameThighMuscleTissue;
      ScaleXYZ = {1.0, 1.0, ....Sign*1.0};
      RGB = ....ColorRef.MuscleTissue;
      Opacity = Main.DrawSettings.MuscleTissueOpacity.Opacity;
      AnyFunTransform3D &Scale =..Scale;
      Face=-1;
    };
  };
  #endif

};


AnySeg Patella =
{
  AnyFolder &Data = ..ModelParameters.Patella;
  JaboutCoMOnOff = On;

  r0=.Thigh.PatellaFemurJoint.sRel*.Thigh.Axes0'+.Thigh.r0-PatellaFemurJoint.sRel*Axes0';
  
  AnyFloat pUnscaled = {Data.HipJoint, Data.EpicondylusFemorisMedialis, Data.EpicondylusFemorisLateralis};
  #define MACRO_CONSTRUCT_ANATOMICAL_FRAME_s(p, SIGN) p[0]
  #define MACRO_CONSTRUCT_ANATOMICAL_FRAME_A(p, SIGN) RotMat(p[0],0.5*(p[1]+p[2]), p[1]) * RotMat(pi*0.5,x) * RotMat(pi*0.5,z) * RotMat(0.5*(SIGN-1)*pi,y)
  #include "..\Scaling\SegScaleFunWrtAnatomicalFrame.any"
  #undef MACRO_CONSTRUCT_ANATOMICAL_FRAME_s
  #undef MACRO_CONSTRUCT_ANATOMICAL_FRAME_A
  
  AnyVar MassS = ..MassScaling.Shank.MassScale;
  Mass = MassS*Data.MassStandard;
  Jii = Data.Jii;
  Jij = Data.Jij;

  AnyVar Sign = ..Sign;

  Scale = {AnyFunTransform3D &GeomScale = ...GeoScaling.Patella.ScaleFunction;};

  AnyRefNode AnatomicalFrame=
  {
    ARel = ..Thigh.AnatomicalFrame.ARel;
    sRel = .PatellaFemurJoint.sRel;
  };
  /// For backwards Compatibility with AMMR 2.4 MoCap Marker protocols
  AnyRefNode& MoCapMarkerFrameAMMR24 = AnatomicalFrame;
  AnyRefNode& ScalingNode=AnatomicalFrame ;

  #if TLEM_JOINT_TYPE_PATELLOFEMORAL != _JOINT_TYPE_USERDEFINED_
  AnyRefNode PatellaFemurJoint =
  {
    AnyVec3 sRelUnscaled = .Data.PatellaFemurJoint;
    
    /// Control point for the PatellaFemurJoint. Found by projecting the EpicondylusFemoris bony landmarks onto the
    /// PatellaFemurJoint axis from the cadaver data set. Thus, scaling which moves the control points will also scale the PatellaFemurJointjoint axis
    AnyVec3 PFLateralControlPoint = .Scale(.Data.PatellaFemurJoint + (.Data.EpicondylusFemorisLateralis - .Data.PatellaFemurJoint)*.Data.PatellaFemurJointAxis'*.Data.PatellaFemurJointAxis);
    /// Control point for the PatellaFemurJoint. Found by projecting the EpicondylusFemoris bony landmarks onto the
    /// PatellaFemurJoint axis from the cadaver data set. Thus, scaling which moves the control points will also scale the PatellaFemurJointjoint axis
    AnyVec3 PFMedialControlPoint = .Scale(.Data.PatellaFemurJoint + (.Data.EpicondylusFemorisMedialis - .Data.PatellaFemurJoint)*.Data.PatellaFemurJointAxis'*.Data.PatellaFemurJointAxis);
    sRel = .Scale(.Data.PatellaFemurJoint);
    // / PatellaFemurJoint Joint orientation is calculated based on the direction between the two control points.
    ARel = RotMat({0.0,0,0}, .Sign*(PFLateralControlPoint-PFMedialControlPoint), 
            (0.5*(.RectusFemoris1Node.sRel+.RectusFemoris2Node.sRel) - .Origin_patella_tendon.sRel))*RotMat(pi/2,y);
  };
  #endif
  
  AnyDrawSurf DrwSurf =
  {
   FileName = ..STL.FilenamePatella;
    ScaleXYZ = {1.0, 1.0, ...Sign*1.0};
    RGB = ...ColorRef.Segments;
    AnyFunTransform3D &Scale =.Scale;
    Opacity = ...BonesOpacity.Patella;
  };

  #if TLEM_JOINT_TYPE_PATELLATENDON != _JOINT_TYPE_USERDEFINED_
  /// A reference node for the patella tendon to define the movement of
  /// the patella. The tendon will be regarded as being stiff, so the length will not change.
  /// This is defined by an AnyKinPLine in the file Jnt.any.
  /// The insertion lies on the Shank segment.
  AnyRefNode Origin_patella_tendon = {
    sRel = .Scale( .Data.Origin_patella_tendon );//AnyDrawRefFrame drw = {RGB = {0,1,0};};
    ARel = ..Thigh.KneeJoint.ARel;
  };
  #endif
  
  #include "../DrawSettings/Nodes.any"
  #include "../DrawSettings/SegmentAxes.any"

  // Patella insertion points

  AnyRefNode RectusFemoris1Node = {sRel = .Scale( .Data.RectusFemoris1Node );};
  AnyRefNode RectusFemoris2Node = {sRel = .Scale( .Data.RectusFemoris2Node );};


  AnyRefNode VastusIntermedius1Node = {sRel = .Scale( .Data.VastusIntermedius1Node );};
  AnyRefNode VastusIntermedius2Node = {sRel = .Scale( .Data.VastusIntermedius2Node );};
  AnyRefNode VastusIntermedius3Node = {sRel = .Scale( .Data.VastusIntermedius3Node );};
  AnyRefNode VastusIntermedius4Node = {sRel = .Scale( .Data.VastusIntermedius4Node );};
  AnyRefNode VastusIntermedius5Node = {sRel = .Scale( .Data.VastusIntermedius5Node );};
  AnyRefNode VastusIntermedius6Node = {sRel = .Scale( .Data.VastusIntermedius6Node );};



  AnyRefNode VastusLateralisInferior1Node = {sRel = .Scale( .Data.VastusLateralisInferior1Node );};
  AnyRefNode VastusLateralisInferior2Node = {sRel = .Scale( .Data.VastusLateralisInferior2Node );};
  AnyRefNode VastusLateralisInferior3Node = {sRel = .Scale( .Data.VastusLateralisInferior3Node );};
  AnyRefNode VastusLateralisInferior4Node = {sRel = .Scale( .Data.VastusLateralisInferior4Node );};
  AnyRefNode VastusLateralisInferior5Node = {sRel = .Scale( .Data.VastusLateralisInferior5Node );};
  AnyRefNode VastusLateralisInferior6Node = {sRel = .Scale( .Data.VastusLateralisInferior6Node );};




  AnyRefNode VastusLateralisSuperior1Node = {sRel = .Scale( .Data.VastusLateralisSuperior1Node );};
  AnyRefNode VastusLateralisSuperior2Node = {sRel = .Scale( .Data.VastusLateralisSuperior2Node );};



  AnyRefNode VastusMedialisInferior1Node = {sRel = .Scale( .Data.VastusMedialisInferior1Node );};
  AnyRefNode VastusMedialisInferior2Node = {sRel = .Scale( .Data.VastusMedialisInferior1Node );};
  AnyRefNode VastusMedialisMid1Node = {sRel = .Scale( .Data.VastusMedialisMid1Node );};
  AnyRefNode VastusMedialisMid2Node = {sRel = .Scale( .Data.VastusMedialisMid1Node );};



  AnyRefNode VastusMedialisSuperior1Node = {sRel = .Scale( .Data.VastusMedialisSuperior1Node );};
  AnyRefNode VastusMedialisSuperior2Node = {sRel = .Scale( .Data.VastusMedialisSuperior2Node );};
  AnyRefNode VastusMedialisSuperior3Node = {sRel = .Scale( .Data.VastusMedialisSuperior3Node );};
  AnyRefNode VastusMedialisSuperior4Node = {sRel = .Scale( .Data.VastusMedialisSuperior4Node );};
  AnyRefNode VastusMedialisSuperior5Node = {sRel = .Scale( .Data.VastusMedialisSuperior5Node );};
  AnyRefNode VastusMedialisSuperior6Node = {sRel = .Scale( .Data.VastusMedialisSuperior6Node );};



};// end of Patella

#ifdef __RightLeft__
#undef __RightLeft__
#endif

#if SignRef == 1
#define __RightLeft__ Right
#else
#define __RightLeft__ Left
#endif

AnyRefFrame &Sacrum = ...Trunk.Segments.SacrumSeg.__RightLeft__;
AnyRefFrame& SacrumSeg = ...Trunk.Segments.SacrumSeg;

SacrumSeg =
{
  __RightLeft__ =
  {
    AnyRefNode LegAttachmentNodes =
    {
      /// Folder with cadaver parameters for pelvis in the LegTLEM model
      AnyFolder &Data = ....ModelParameters.Pelvis;
      AnyFunTransform3D &Scale = ...PelvisSeg.AnatomicalFrameTrunk.Scale_Leg_Pelvis;   
    };
  };// Sacrum.Left/Right
  
  // Find drawing in the end of the file
};// SacrumSeg

AnyRefFrame &Pelvis = ...Trunk.Segments.PelvisSeg.__RightLeft__;
AnyRefFrame& PelvisSeg = ...Trunk.Segments.PelvisSeg;

PelvisSeg =
{
  __RightLeft__ =
  {
  #undef __RightLeft__
  
    #if TLEM_JOINT_TYPE_HIP != _JOINT_TYPE_USERDEFINED_
    AnyRefNode HipJoint = {
      AnyVec3 sRelUnscaled = .Muscles.Data.HipJoint;
      sRel = ..AnatomicalFrameTrunk.Scale_Leg_Pelvis(sRelUnscaled );
      #include "../DrawSettings/JointAxesProximal.any"
      AnyRefNode ISB = {
         ARel = ...AnatomicalFrameISB.ARel;
      };
    };
    #endif
    
    /// All muscle attachment nodes from the leg is placed inside
    /// their own node (coordinate system). The reason for using
    /// this procedure instead of putting the nodes directly on the
    /// pelvis segment, is that it makes it possible to have the
    /// leg as a selfcontained block. The nodes in this folder is
    /// used by the LegTLEM model for muscle attachements on pelvis.
    AnyRefNode Muscles =
    {
      /// Folder with cadaver parameters for pelvis in the LegTLEM model
      AnyFolder &Data = ....ModelParameters.Pelvis;

      AnyFunTransform3D &Scale = ..AnatomicalFrameTrunk.Scale_Leg_Pelvis;

      AnyRefNode IliacusWrapSurf =
      {
        AnyFloat p = .Scale(.Data.IliacusWrapLandmarks);  //dn(20120614): moved scaling out of WrappingCylinder5PointFit.any
        AnyFloat lengthscalefactor = 1.8;//1.4;
        AnyFloat radiusscalefactor = 1;

        AnyInt Sign = ..Sign;
        AnyMat33 transform = RotMat(-pi * (Sign + 1) / 2, y);
        AnyVar Z_rotation =0;
        #include "<ANYBODY_PATH_MODELUTILS>/WrappingSurfaces/WrappingCylinder5PointFit.any"
      };


      // Origin points on the Pelvis

      AnyRefNode ASIS = {sRel = .Scale( .Data.AsisIpsilateral); /*AnyDrawNode Node = {ScaleXYZ = {0.005, 0.005, 0.005};};*/};
      AnyRefNode PSIS = {sRel = .Scale( .Data.PsisIpsilateral); /*AnyDrawNode Node = {ScaleXYZ = {0.005, 0.005, 0.005};};*/};


      AnyRefNode AdductorBrevisProximal1Node = {sRel = .Scale( .Data.AdductorBrevisProximal1Node );};
      AnyRefNode AdductorBrevisProximal2Node = {sRel = .Scale( .Data.AdductorBrevisProximal2Node );};
      AnyRefNode AdductorBrevisMid1Node = {sRel = .Scale( .Data.AdductorBrevisMid1Node );};
      AnyRefNode AdductorBrevisMid2Node = {sRel = .Scale( .Data.AdductorBrevisMid2Node );};
      AnyRefNode AdductorBrevisDistal1Node = {sRel = .Scale( .Data.AdductorBrevisDistal1Node );};
      AnyRefNode AdductorBrevisDistal2Node = {sRel = .Scale( .Data.AdductorBrevisDistal2Node );};

      AnyRefNode AdductorLongus1Node = {sRel = .Scale( .Data.AdductorLongus1Node );};
      AnyRefNode AdductorLongus2Node = {sRel = .Scale( .Data.AdductorLongus2Node );};
      AnyRefNode AdductorLongus3Node = {sRel = .Scale( .Data.AdductorLongus3Node );};
      AnyRefNode AdductorLongus4Node = {sRel = .Scale( .Data.AdductorLongus4Node );};
      AnyRefNode AdductorLongus5Node = {sRel = .Scale( .Data.AdductorLongus5Node );};
      AnyRefNode AdductorLongus6Node = {sRel = .Scale( .Data.AdductorLongus6Node );};

      AnyRefNode AdductorMagnusDistal1Node = {sRel = .Scale( .Data.AdductorMagnusDistal1Node );};
      AnyRefNode AdductorMagnusDistal2Node = {sRel = .Scale( .Data.AdductorMagnusDistal2Node );};
      AnyRefNode AdductorMagnusDistal3Node = {sRel = .Scale( .Data.AdductorMagnusDistal3Node );};

      AnyRefNode AdductorMagnusMid1Node = {sRel = .Scale( .Data.AdductorMagnusMid1Node );};
      AnyRefNode AdductorMagnusMid2Node = {sRel = .Scale( .Data.AdductorMagnusMid2Node );};
      AnyRefNode AdductorMagnusMid3Node = {sRel = .Scale( .Data.AdductorMagnusMid3Node );};
      AnyRefNode AdductorMagnusMid4Node = {sRel = .Scale( .Data.AdductorMagnusMid4Node );};
      AnyRefNode AdductorMagnusMid5Node = {sRel = .Scale( .Data.AdductorMagnusMid5Node );};
      AnyRefNode AdductorMagnusMid6Node = {sRel = .Scale( .Data.AdductorMagnusMid6Node );};

      AnyRefNode AdductorMagnusProximal1Node = {sRel = .Scale( .Data.AdductorMagnusProximal1Node );};
      AnyRefNode AdductorMagnusProximal2Node = {sRel = .Scale( .Data.AdductorMagnusProximal2Node );};
      AnyRefNode AdductorMagnusProximal3Node = {sRel = .Scale( .Data.AdductorMagnusProximal3Node );};
      AnyRefNode AdductorMagnusProximal4Node = {sRel = .Scale( .Data.AdductorMagnusProximal4Node );};

      AnyRefNode BicepsFemorisCaputLongum1Node = {sRel = .Scale( .Data.BicepsFemorisCaputLongum1Node );};

      AnyRefNode GemellusInferior1Node = {sRel = .Scale( .Data.GemellusInferior1Node );};

      AnyRefNode GemellusSuperior1Node = {sRel = .Scale( .Data.GemellusSuperior1Node );};

      AnyRefNode GluteusMaximusSuperior1Node = {sRel = .Scale( .Data.GluteusMaximusSuperior1Node );};
      AnyRefNode GluteusMaximusSuperior2Node = {sRel = .Scale( .Data.GluteusMaximusSuperior2Node );};
      AnyRefNode GluteusMaximusSuperior3Node = {sRel = .Scale( .Data.GluteusMaximusSuperior3Node );};
      AnyRefNode GluteusMaximusSuperior4Node = {sRel = .Scale( .Data.GluteusMaximusSuperior4Node );};
      AnyRefNode GluteusMaximusSuperior5Node = {sRel = .Scale( .Data.GluteusMaximusSuperior5Node );};
      AnyRefNode GluteusMaximusSuperior6Node = {sRel = .Scale( .Data.GluteusMaximusSuperior6Node );};

      AnyRefNode GluteusMaximusInferior1Node = {sRel = .Scale( .Data.GluteusMaximusInferior1Node );};
      AnyRefNode GluteusMaximusInferior2Node = {sRel = .Scale( .Data.GluteusMaximusInferior2Node );};
      AnyRefNode GluteusMaximusInferior3Node = {sRel = .Scale( .Data.GluteusMaximusInferior3Node );};
      AnyRefNode GluteusMaximusInferior4Node = {sRel = .Scale( .Data.GluteusMaximusInferior4Node );};
      AnyRefNode GluteusMaximusInferior5Node = {sRel = .Scale( .Data.GluteusMaximusInferior5Node );};
      AnyRefNode GluteusMaximusInferior6Node = {sRel = .Scale( .Data.GluteusMaximusInferior6Node );};

      AnyRefNode GluteusMediusAnterior1Node = {sRel = .Scale( .Data.GluteusMediusAnterior1Node );};
      AnyRefNode GluteusMediusAnterior2Node = {sRel = .Scale( .Data.GluteusMediusAnterior2Node );};
      AnyRefNode GluteusMediusAnterior3Node = {sRel = .Scale( .Data.GluteusMediusAnterior3Node );};
      AnyRefNode GluteusMediusAnterior4Node = {sRel = .Scale( .Data.GluteusMediusAnterior4Node );};
      AnyRefNode GluteusMediusAnterior5Node = {sRel = .Scale( .Data.GluteusMediusAnterior5Node );};
      AnyRefNode GluteusMediusAnterior6Node = {sRel = .Scale( .Data.GluteusMediusAnterior6Node );};

      AnyRefNode GluteusMediusPosterior1Node = {sRel = .Scale( .Data.GluteusMediusPosterior1Node );};
      AnyRefNode GluteusMediusPosterior2Node = {sRel = .Scale( .Data.GluteusMediusPosterior2Node );};
      AnyRefNode GluteusMediusPosterior3Node = {sRel = .Scale( .Data.GluteusMediusPosterior3Node );};
      AnyRefNode GluteusMediusPosterior4Node = {sRel = .Scale( .Data.GluteusMediusPosterior4Node );};
      AnyRefNode GluteusMediusPosterior5Node = {sRel = .Scale( .Data.GluteusMediusPosterior5Node );};
      AnyRefNode GluteusMediusPosterior6Node = {sRel =.Scale( .Data.GluteusMediusPosterior6Node );};


      AnyRefNode GluteusMinimusAnterior1Node = {sRel = .Scale( .Data.GluteusMinimusAnterior1Node );};
      AnyRefNode GluteusMinimusMid1Node = {sRel = .Scale( .Data.GluteusMinimusMid1Node );};
      AnyRefNode GluteusMinimusPosterior1Node = {sRel = .Scale( .Data.GluteusMinimusPosterior1Node );};

      AnyRefNode Gracilis1Node = {sRel = .Scale( .Data.Gracilis1Node );};
      AnyRefNode Gracilis2Node = {sRel = .Scale( .Data.Gracilis2Node );};

      AnyRefNode IliacusLateralis1Node = {sRel = .Scale( .Data.IliacusLateralis1Node ); };
      AnyRefNode IliacusLateralis2Node = {sRel = .Scale( .Data.IliacusLateralis2Node ); };


      AnyRefNode IliacusLateralis3Node = {sRel = .Scale( .Data.IliacusLateralis3Node );};

      AnyRefNode IliacusLateralisViaNode1 = {sRel = .Scale( .Data.IliacusLateralisViaNode1 );};
      
      AnyRefNode IliacusMid1Node = {sRel = .Scale( .Data.IliacusMid1Node );};
      AnyRefNode IliacusMid2Node = {sRel = .Scale( .Data.IliacusMid2Node );};


      AnyRefNode IliacusMid3Node = {sRel = .Scale( .Data.IliacusMid3Node );};

      AnyRefNode IliacusMidViaNode1 = {sRel = .Scale( .Data.IliacusMidViaNode1 );};



      AnyRefNode IliacusMedialis1Node = {sRel =.Scale( .Data.IliacusMedialis1Node ); };
      AnyRefNode IliacusMedialis2Node = {sRel = .Scale( .Data.IliacusMedialis2Node );};


      AnyRefNode IliacusMedialis3Node = {sRel = .Scale( .Data.IliacusMedialis3Node );};


      AnyRefNode IliacusMedialisViaNode1 = {sRel = .Scale( .Data.IliacusMedialisViaNode1 );};
      
      
      
      AnyRefNode ObturatorExternusInferior1Node = {sRel = .Scale( .Data.ObturatorExternusInferior1Node );};
      AnyRefNode ObturatorExternusInferior2Node = {sRel =.Scale( .Data.ObturatorExternusInferior2Node );};

      AnyRefNode ObturatorExternusSuperior1Node = {sRel = .Scale( .Data.ObturatorExternusSuperior1Node );};
      AnyRefNode ObturatorExternusSuperior2Node = {sRel = .Scale( .Data.ObturatorExternusSuperior2Node );};
      AnyRefNode ObturatorExternusSuperior3Node = {sRel = .Scale( .Data.ObturatorExternusSuperior3Node );};


      AnyRefNode ObturatorExternusSuperiorViaNode1 = {sRel = .Scale( .Data.ObturatorExternusSuperiorViaNode1 );};

      AnyRefNode ObturatorInternus1Node = {sRel = .Scale( .Data.ObturatorInternus1Node );};
      AnyRefNode ObturatorInternus2Node = {sRel = .Scale( .Data.ObturatorInternus2Node );};
      AnyRefNode ObturatorInternus3Node = {sRel = .Scale( .Data.ObturatorInternus3Node );};

      AnyRefNode ObturatorInternusViaNode1 = {sRel = .Scale( .Data.ObturatorInternusViaNode1 );};



      AnyRefNode Pectineus1Node = {sRel = .Scale( .Data.Pectineus1Node );};
      AnyRefNode Pectineus2Node = {sRel = .Scale( .Data.Pectineus2Node );};
      AnyRefNode Pectineus3Node = {sRel = .Scale( .Data.Pectineus3Node );};
      AnyRefNode Pectineus4Node = {sRel = .Scale( .Data.Pectineus4Node );};

      AnyRefNode Piriformis1Node = {sRel = .Scale( .Data.Piriformis1Node );};


      AnyRefNode PsoasMinor1Node = {sRel = .Scale( .Data.PsoasMinor1Node );};
      AnyRefNode PsoasMinorViaNode1 = {sRel = .Scale( .Data.PsoasMinorViaNode1 );};
      // The PsoasMinor does not have a viapoint according to the Klein Horsman dataset. However, since it uses the
      // Psoas Major insertion point (see comments in Thigh segment) it needs this via point in order to wrap around
      // the cylinder in the right direction.

      AnyRefNode PsoasMajor1Node = {sRel = .Scale( .Data.PsoasMajor1Node );};
      AnyRefNode PsoasMajor2Node = {sRel = .Scale( .Data.PsoasMajor2Node );};
      AnyRefNode PsoasMajor3Node = {sRel = .Scale( .Data.PsoasMajor3Node );};
      AnyRefNode PsoasMajorViaNode1 = {sRel = .Scale( .Data.PsoasMajorViaNode1 );};


      AnyRefNode QuadratusFemoris1Node	= {sRel = .Scale( .Data.QuadratusFemoris1Node );};
      AnyRefNode QuadratusFemoris2Node	= {sRel = .Scale( .Data.QuadratusFemoris2Node );};
      AnyRefNode QuadratusFemoris3Node	= {sRel = .Scale( .Data.QuadratusFemoris3Node );};
      AnyRefNode QuadratusFemoris4Node	= {sRel = .Scale( .Data.QuadratusFemoris4Node );};


      AnyRefNode RectusFemoris1Node = {sRel = .Scale( .Data.RectusFemoris1Node );};
      AnyRefNode RectusFemoris2Node = {sRel = .Scale( .Data.RectusFemoris2Node );};


      AnyRefNode SartoriusProximal1Node = {sRel = .Scale( .Data.SartoriusProximal1Node );};
      AnyRefNode SartoriusDistal1Node = {sRel = .Scale( .Data.SartoriusDistal1Node );};



      AnyRefNode Semimembranosus1Node = {sRel = .Scale( .Data.Semimembranosus1Node );};



      AnyRefNode Semitendinosus1Node = {sRel = .Scale( .Data.Semitendinosus1Node );};

      AnyRefNode TensorFasciaeLatae1Node = {sRel =.Scale( .Data.TensorFasciaeLatae1Node );};
      AnyRefNode TensorFasciaeLatae2Node = {sRel = .Scale( .Data.TensorFasciaeLatae2Node );};


      //Ligament origin nodes from Klein-Horseman
      AnyRefNode IlioFemAntOrig = {sRel = .Scale( .Data.IlioFemAntOrig );};
      AnyRefNode IlioFemLatOrig = {sRel = .Scale( .Data.IlioFemLatOrig );};
      AnyRefNode PuboFemOrig = {sRel = .Scale( .Data.PuboFemOrig );}; //updated coordinates
      AnyRefNode IschioFemOrig = {sRel = .Scale( .Data.IschioFemOrig );};



      #ifdef GLUTEUS_MAX_WRAPPING_BETA
      AnyRefNode GluteusCylSuperior =
      {
        AnyMatrix p = .Scale(.Data.GluteusSuperiorWrapLandmarks);
        AnyFloat lengthscalefactor = 1;
        AnyFloat radiusscalefactor = 1;

        AnyVar Z_rotation =0;

        #include "<ANYBODY_PATH_MODELUTILS>/WrappingSurfaces/WrappingCylinder5PointFit.any"
        };


      AnyRefNode GluteusCylInferior =
      {
        AnyMatrix p = .Data.GluteusInferiorWrapLandmarks;
        AnyFloat lengthscalefactor = 1;
        AnyFloat radiusscalefactor = 1;

        AnyVar Z_rotation =0;

        #include "<ANYBODY_PATH_MODELUTILS>/WrappingSurfaces/WrappingCylinder5PointFit.any"
        };
      #endif

    }; // End Muscles

  }; // End Pelvis.Left/Right
  
      #if BM_PELVIS_DISPLAY >=1
      #ifndef _BM_PELVIS_DISPLAY_ 
      #define _BM_PELVIS_DISPLAY_ 
      #if (BM_PELVIS_DISPLAY == _PELVIS_DISPLAY_LEGANDTRUNKPELVIS_)
      AnyDrawSurf Drw_LegPelvis =
      #else
      AnyDrawSurf DrwPelvis =
      #endif
      {
        FileName = ..STL.FilenamePelvis;
        Opacity =  Main.DrawSettings.BonesOpacity.Pelvis;
        RGB = ...ColorRef.Segments;
        AnyFunTransform3D &Scale = .AnatomicalFrameTrunk.Scale_Leg_Pelvis ;
      };
      
      #if (BM_PELVIS_DISPLAY == _PELVIS_DISPLAY_LEGANDTRUNKPELVIS_)
      AnyDrawSurf Drw_LegSacrum =
      #else
      AnyDrawSurf DrwSacrum =
      #endif
      {
        FileName = ..STL.FilenameSacrum;
        Opacity =  Main.DrawSettings.BonesOpacity.Pelvis;
        RGB = ...ColorRef.Segments;
        AnyFunTransform3D &Scale = .AnatomicalFrameTrunk.Scale_Leg_Pelvis ;
      };
      
      #endif
      #endif
  
  
}; // End Pelvis


