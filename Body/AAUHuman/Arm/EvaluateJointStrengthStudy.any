
AnyFolder Model = {
  // Model parts included in the moment arm study
  AnyFolder &ThoraxRef = .....BodyModel.Trunk.SegmentsThorax.ThoraxSeg; 
  AnyFolder &ArmSegSideRef = .SideBodyModelRef.ShoulderArm.Seg; 
  AnyFolder &ArmJntsRef =  .SideBodyModelRef.ShoulderArm.Jnt;
  AnyFolder &MusRef = .SideBodyModelRef.ShoulderArm.Mus ;
  
 AnyFixedRefFrame ground = {
   AnyRefNode node = { 
      ARel=..ThoraxRef.Axes0;
     sRel=..ThoraxRef.r0;
   };
 };
 
  
 AnyFolder Drivers = {
   AnyVar AngularVelocity = (..RangeOfMotion[1]-..RangeOfMotion[0])*pi/180;
   
   AnyKinMeasureOrg ArmMeasure = {
     AnyKinMeasure &SCProtraction= ...SideBodyInterfaceRef.SternoClavicularProtraction;
     AnyKinMeasure &SCElevation= ...SideBodyInterfaceRef.SternoClavicularElevation;
     AnyKinMeasure &SCAxialRotation= ...SideBodyInterfaceRef.SternoClavicularAxialRotation;
     AnyKinMeasure &GHFlexion= ...SideBodyInterfaceRef.GlenohumeralFlexion;
     AnyKinMeasure &GHAbduction= ...SideBodyInterfaceRef.GlenohumeralAbduction;
     AnyKinMeasure &GHExternalRotation= ...SideBodyInterfaceRef.GlenohumeralExternalRotation;
     AnyKinMeasure &ElbowFlexion= ...SideBodyInterfaceRef.ElbowFlexion;
     AnyKinMeasure &ElbowPronation= ...SideBodyInterfaceRef.ElbowPronation;
     AnyKinMeasure &WristFlexion= ...SideBodyInterfaceRef.WristFlexion;
     AnyKinMeasure &WristAbduction= ...SideBodyInterfaceRef.WristAbduction;  
   };
   
   AnyStdJoint TrunkGround={
     AnyRefFrame &Ground = ..ground.node;
     AnyRefFrame &Thorax= ..ThoraxRef; 
   };
   
 };// Drivers
 
 AnyForce JointLoad = {
     AnyKinMeasure &ref = .Drivers.ArmMeasure;
     AnyInt Sign = -round(.Drivers.AngularVelocity/abs(.Drivers.AngularVelocity));
     F = 10*Sign*not(not(.Drivers.ArmDriver.Mask));
 };
 
};


AnyBodyStudy Study = {
  Gravity = {0,0,0};
  tStart = 0;
  tEnd = 1;
  #ifdef EVALUATE_JOINT_STRENGTH_NSTEP
  nStep = EVALUATE_JOINT_STRENGTH_NSTEP;
  #else
  nStep = 40;
  #endif
  
  
  Kinematics.SmallStepAssumptionOnOff = On;

  Kinematics.PosAnalysisOnlyOnOff = On;
  InitialConditions.PosAnalysisOnlyOnOff = On;
  
  InverseDynamics.Criterion.Type = MR_MinMaxStrict;
  
  
  AnyFolder &Model = .Model;
  
  AnyFolder JointStrength = {
    AnyFolder Abscissa  ={
      AnyVar JointAngle = not(not(..Model.Drivers.ArmDriver.DriverVel))*..Model.Drivers.ArmMeasure.Pos'*180/pi;     
    };
    AnyVar JointStrength = max(abs(.Model.JointLoad.F))/(.MaxMuscleActivity +0.00000001);
    
  };
};


#if (ANYBODY_V1 >= 6) & (ANYBODY_V2 >= 1)
AnyFolder ModelViews = { AnyFolder Views =  {}; };
#else
AnyProject ModelViews = {};
#endif

ModelViews = {
  AnyDrawGroup Selection = {
    Objects = arrcat(arrcat(ObjSearchRecursive(CompleteNameOf(&..Model.ThoraxRef), "*", "AnyDrawObject"), 
                     ObjSearchRecursive(CompleteNameOf(&..Model.ArmSegSideRef), "*", "AnyDrawObject")),
                     ObjSearchRecursive(CompleteNameOf(&..Model.MusRef), "*", "AnyDrawObject"));
  };
  Views = {
    AnyProjectModelViewDefinition SelectedView = {
      DrawGroupSequence = {&..Selection};
      Reset = {On};
    };
  };
};
AnyOperationSequence Run = 
{
    AnyOperationMacro SetView = 
    {
      MacroStr = { "classoperation " + CompleteNameOf(&..ModelViews.Views.SelectedView) + strquote("Set View") };
    };
    AnyOperation &Study = .Study.InverseDynamics;
//    #ifdef ANYBODY_PATH_OUTPUT
//    AnyOperationMacro Save = 
//    {
//      MacroStr = {
//           "classoperation " + CompleteNameOf(&.Study.Output) + strquote("Save data") 
//           + " --type=" + strquote("Deep") +" --file=" + strquote(
//           ANYBODY_PATH_OUTPUT + .OutputFileName + ".anydata.h5")
//      };
//    #endif
};
