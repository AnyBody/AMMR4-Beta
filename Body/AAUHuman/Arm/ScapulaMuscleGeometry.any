// Nodes for muscle attachments bml etc. data from VU sub2
AnyFolder &Scapula =.Seg.Scapula;

Scapula = {
   
  
  
  
  
  // Definition of cylinder used for wrapping of the trapezius muscles 
  // the cylinder starts in ai and points towards ts.
  AnyRefNode margo_medialis={ 
    /*
    AnyVar Radius =0.01;
    AnyVar Length=0.2; 
    AnyVec3 p2=sRel; // Starting point of the vector.
    AnyVec3 p1= 0.5*(.ai.sRel+.ts.sRel)-{0.01,...Sign*0.0,0.01}; // End point of the vector
    AnyVec3 v ={0,0,1}; // arbitary vector for cross product.

    AnyVec3 P1=.ai.sRel-.Scale({0.00414,...Sign*-0.049655,0.01});
    AnyVec3 P2={-0.111446, 0.118042, -0.003720};//sRel+VZ*Length;
    AnyVec3 P3 = {-0.134876, -0.080581, 0.006280};//sRel-VX*Radius;
  
    AnyVec3 VecZ={(p1[0]-p2[0]),(p1[1]-p2[1]),(p1[2]-p2[2])}; // Direction of the cylinder.
    AnyVec3 VecY={(v[1]*VecZ[2]-v[2]*VecZ[1]),(v[2]*VecZ[0]-v[0]*VecZ[2]),(v[0]*VecZ[1]-v[1]*VecZ[0])};
    AnyVec3 VecX={(VecY[1]*VecZ[2]-VecY[2]*VecZ[1]),(VecY[2]*VecZ[0]-VecY[0]*VecZ[2]),(VecY[0]*VecZ[1]-VecY[1]*VecZ[0])};

    sRel=.ai.sRel-.Scale({0.01,...Sign*0.0,0.01}+{-0.005860, ...Sign*-0.049655, 0.000000});
    
    
    //Length calculation
    AnyVar LengthX=sqrt((VecX[0])^2+(VecX[1])^2+(VecX[2])^2);
    AnyVar LengthZ=sqrt((VecZ[0])^2+(VecZ[1])^2+(VecZ[2])^2);
    AnyVar LengthY=sqrt((VecY[0])^2+(VecY[1])^2+(VecY[2])^2);
    
    //Normalizing
    AnyVec3 VX=VecX/LengthX;
    AnyVec3 VY=VecY/LengthY;
    AnyVec3 VZ=VecZ/LengthZ;

    ARel = {
      {VX[0],VY[0],VZ[0]},
      {VX[1],VY[1],VZ[1]},
      {VX[2],VY[2],VZ[2]}};
    */
    
    AnyVec3 P2=.Scale({-0.111446, 0.118042, -0.003720})*.Mirror;
    AnyVec3 P3 =.Scale({-0.134876, -0.080581, 0.006280})*.Mirror;
    
      
   
    sRel=.ai.sRel-.Scale({0.01,0.0,0.01}+{-0.005860,-0.049655, 0.000000})*.Mirror;
    
    //Calculate rot matrix for cylinder using three points
    //p2-p1 used to find x axis
    //p3-p1 used to find the y axis
    //z axis found as cross product
    AnyMat33  Mat = RotMat(sRel,P3,P2);
    
    //Switch around the on the columns to compensate that the cylinder has 
    //main axis along the zaxis
    ARel={
      {Mat[0][2],Mat[0][0],Mat[0][1]},
      {Mat[1][2],Mat[1][0],Mat[1][1]},
      {Mat[2][2],Mat[2][0],Mat[2][1]}};          
    
    AnySurfCylinder cyl = { 
      Radius=((.sRel[0]-.P3[0])^2+(.sRel[1]-.P3[1])^2+(.sRel[2]-.P3[2])^2)^0.5;
      Length= ((.sRel[0]-.P2[0])^2+(.sRel[1]-.P2[1])^2+(.sRel[2]-.P2[2])^2)^0.5;
      CapRatio=1.0;
      //AnyDrawParamSurf drw={RGB={1,0,0};};
    };
  }; 

  // Definition of cylinder used for wrapping of Deltoid scapula muscles 
  // the cylinder starts in gh and points towards ts.
  AnyRefNode deltoid_cyl={ 
    
    /*
    AnyVec3 p2=sRel; // Starting point of the vector.
    AnyVec3 p1= .gh.sRel+{0.005,-...Sign*0.0,0.01}; // End point of the vector
    AnyVec3 v ={0,0,1}; // arbitary vector for cross product.
    
    AnyVec3 VecZ={(p1[0]-p2[0]),(p1[1]-p2[1]),(p1[2]-p2[2])}; // Direction of the cylinder.
    AnyVec3 VecY={(v[1]*VecZ[2]-v[2]*VecZ[1]),(v[2]*VecZ[0]-v[0]*VecZ[2]),(v[0]*VecZ[1]-v[1]*VecZ[0])};
    AnyVec3 VecX={(VecY[1]*VecZ[2]-VecY[2]*VecZ[1]),(VecY[2]*VecZ[0]-VecY[0]*VecZ[2]),(VecY[0]*VecZ[1]-VecY[1]*VecZ[0])};
    
    sRel=.ai.sRel;
    
    //Length calculation
    AnyVar LengthX=sqrt((VecX[0])^2+(VecX[1])^2+(VecX[2])^2);
    AnyVar LengthZ=sqrt((VecZ[0])^2+(VecZ[1])^2+(VecZ[2])^2);
    AnyVar LengthY=sqrt((VecY[0])^2+(VecY[1])^2+(VecY[2])^2);
    
    //Normalizing
    AnyVec3 VX=VecX/LengthX;
    AnyVec3 VY=VecY/LengthY;
    AnyVec3 VZ=VecZ/LengthZ;

    //Note STC issue for scaling
    ARel = {
      {VX[0],VY[0],VZ[0]},
      {VX[1],VY[1],VZ[1]},
      {VX[2],VY[2],VZ[2]}};
    
    AnySurfCylinder cyl = { 
      Radius=0.018;
      Length=0.18; 
      CapRatio=1.0;
      AnyDrawParamSurf drw={RGB={0,1,0};};
    };
    */
        

    AnyVec3 P2 = .Scale({0.027588, -0.047361, -0.015292})*.Mirror; //P2=.ai.sRel + VZ*Length;
    AnyVec3 P3 = .Scale({-0.128825, -0.129236, 0.024150})*.Mirror; //P3=.ai.sRel - VX*Radius;
    
    sRel=.ai.sRel;
    
   
    //Calculate rot matrix for cylinder using three points
    //p2-p1 used to find x axis
    //p3-p1 used to find the y axis
    //z axis found as cross product
    AnyMat33  Mat = RotMat(sRel,P3,P2);
    
    //Switch around the on the columns to compensate that the cylinder has 
    //main axis along the zaxis
    ARel={
      {Mat[0][2],Mat[0][0],Mat[0][1]},
      {Mat[1][2],Mat[1][0],Mat[1][1]},
      {Mat[2][2],Mat[2][0],Mat[2][1]}};          
    
    AnySurfCylinder cyl = { 
      Radius=((.sRel[0]-.P3[0])^2+(.sRel[1]-.P3[1])^2+(.sRel[2]-.P3[2])^2)^0.5;
      Length= ((.sRel[0]-.P2[0])^2+(.sRel[1]-.P2[1])^2+(.sRel[2]-.P2[2])^2)^0.5;
      CapRatio=1.0;
      //AnyDrawParamSurf drw={RGB={0,0,1};};
    };
    
  }; 
  

  // Definition of cylinder used for wrapping of Deltoid scapula muscles 
  // the cylinder starts in deltoid O_deltoideus_scapular_part_1 and points towards acromion.
  AnyRefNode acromion_cyl={ 
    /*
    AnyVar Radius=0.01;
    AnyVar Length=0.08;     
  
    AnyVec3 P1 = sRel;
    AnyVec3 P2 =sRel+VZ*Length;
    AnyVec3 P3 =sRel+VX*Radius;
        
    
    AnyVec3 p2=sRel; // Starting point of the vector.
    AnyVec3 p1= p2+{0.025,...Sign*0.005,-0.09}; // End point of the vector
    AnyVec3 v ={0,1,0}; // arbitary vector for cross product.
    
    AnyVec3 VecZ={(p1[0]-p2[0]),(p1[1]-p2[1]),(p1[2]-p2[2])}; // Direction of the cylinder.
    AnyVec3 VecY={(v[1]*VecZ[2]-v[2]*VecZ[1]),(v[2]*VecZ[0]-v[0]*VecZ[2]),(v[0]*VecZ[1]-v[1]*VecZ[0])};
    AnyVec3 VecX={(VecY[1]*VecZ[2]-VecY[2]*VecZ[1]),(VecY[2]*VecZ[0]-VecY[0]*VecZ[2]),(VecY[0]*VecZ[1]-VecY[1]*VecZ[0])};
    
    sRel=.O_deltoideus_scapular_part_3.sRel+{0.03,...Sign*-0.005,0};
    
    //Length calculation
    AnyVar LengthX=sqrt((VecX[0])^2+(VecX[1])^2+(VecX[2])^2);
    AnyVar LengthZ=sqrt((VecZ[0])^2+(VecZ[1])^2+(VecZ[2])^2);
    AnyVar LengthY=sqrt((VecY[0])^2+(VecY[1])^2+(VecY[2])^2);
    
    //Normalizing
    AnyVec3 VX=VecX/LengthX;
    AnyVec3 VY=VecY/LengthY;
    AnyVec3 VZ=VecZ/LengthZ;

    //Note STC issue for scaling
    ARel = {
      {VX[0],VY[0],VZ[0]},
      {VX[1],VY[1],VZ[1]},
      {VX[2],VY[2],VZ[2]}};
    
    AnySurfCylinder cyl = { 
      Radius=0.01;
      Length=0.08; 
      CapRatio=1.0;
    };
    
    */
    
    AnyVec3 P2 =.Scale({0.039946, -0.011151, -0.068103})*.Mirror;//sRel+VZ*Length;
    AnyVec3 P3 =.Scale({0.018708, -0.025413, 0.008353})*.Mirror;//sRel+VX*Radius;
        
    
    sRel=.O_deltoideus_scapular_part_3.sRel+.Scale({0.03,-0.005,0})*.Mirror;
    //Calculate rot matrix for cylinder using three points
    //p2-p1 used to find x axis
    //p3-p1 used to find the y axis
    //z axis found as cross product
    AnyMat33  Mat = RotMat(sRel,P3,P2);
    
    //Switch around the on the columns to compensate that the cylinder has 
    //main axis along the zaxis
    ARel={
      {Mat[0][2],Mat[0][0],Mat[0][1]},
      {Mat[1][2],Mat[1][0],Mat[1][1]},
      {Mat[2][2],Mat[2][0],Mat[2][1]}};          
    
    AnySurfCylinder cyl = { 
      Radius=((.sRel[0]-.P3[0])^2+(.sRel[1]-.P3[1])^2+(.sRel[2]-.P3[2])^2)^0.5;
      Length= ((.sRel[0]-.P2[0])^2+(.sRel[1]-.P2[1])^2+(.sRel[2]-.P2[2])^2)^0.5;
      CapRatio=1.0;
      //AnyDrawParamSurf drw={RGB={1,1,0};};
    };
    
  }; 
  
 
  //AnyRefNode P1 ={sRel=.coracoid_cyl2.P3;AnyDrawRefFrame  Drw={RGB={0,0,1};};};
  //AnyRefNode P2 ={sRel=.coracoid_cyl2.P2; AnyDrawRefFrame Drw={RGB={0,1,0};};};
  
  
 
  
     // Definition of cylinder used for wrapping of subscapularis muscles 
  // the cylinder replicates the shape of the  coracoid process.
  AnyRefNode coracoid_cyl={ 
    
    AnyVec3 P2 =.Scale({-0.0,-0.03+0.005,-0.07})*.Mirror;
    AnyVec3 P3 =sRel+.Scale({0.0,0.0,0.01})*.Mirror;//sRel+VX*Radius;
        
    //AnyDrawRefFrame drw={};
    sRel=.gh.sRel+.Scale({-0.05,0.035+0.005,0})*.Mirror;
   
   
    
    //Calculate rot matrix for cylinder using three points
    //p2-p1 used to find x axis
    //p3-p1 used to find the y axis
    //z axis found as cross product

     AnyMat33  Mat = RotMat(sRel,P2,P3);
    
     //AnyDrawRefFrame drw={RGB={0.2,0.2,0.2};};
    //Switch around the on the columns to compensate that the cylinder has 
    //main axis along the zaxis
   
    ARel={
      {Mat[0][1],Mat[0][2],Mat[0][0]},
      {Mat[1][1],Mat[1][2],Mat[1][0]},
      {Mat[2][1],Mat[2][2],Mat[2][0]}};              
    

    AnySurfCylinder cyl = { 
      Radius=((.sRel[0]-.P3[0])^2+(.sRel[1]-.P3[1])^2+(.sRel[2]-.P3[2])^2)^0.5;
      Length= ((.sRel[0]-.P2[0])^2+(.sRel[1]-.P2[1])^2+(.sRel[2]-.P2[2])^2)^0.5;
      CapRatio=1.0;
//      AnyDrawParamSurf drw={RGB={0,1,0};};
    };
    
  }; 
  

     // Definition of cylinder used for wrapping of subscapularis muscles 
  // the cylinder replicates the shape of the  coracoid process.
  AnyRefNode coracoid_cyl2={ 
    
   AnyVec3 P2 =.Scale({0.03,-0.03+0.005,-0.12})*.Mirror;
    AnyVec3 P3 =sRel+.Scale({0.01,0.0,0.01})*.Mirror;//sRel+VX*Radius;
        
//    AnyDrawRefFrame drw={};
    sRel=.gh.sRel+.Scale({-0.05,0.035+0.005,0})*.Mirror;
   
    
    //Calculate rot matrix for cylinder using three points
    //p2-p1 used to find x axis
    //p3-p1 used to find the y axis
    //z axis found as cross product

     AnyMat33  Mat = RotMat(sRel,P2,P3);
    
     //AnyDrawRefFrame drw={RGB={0.2,0.2,0.2};};
    //Switch around the on the columns to compensate that the cylinder has 
    //main axis along the zaxis
   
    ARel={
      {Mat[0][1],Mat[0][2],Mat[0][0]},
      {Mat[1][1],Mat[1][2],Mat[1][0]},
      {Mat[2][1],Mat[2][2],Mat[2][0]}
    };              
    

    AnySurfCylinder cyl = { 
      Radius=((.sRel[0]-.P3[0])^2+(.sRel[1]-.P3[1])^2+(.sRel[2]-.P3[2])^2)^0.5;
      Length= ((.sRel[0]-.P2[0])^2+(.sRel[1]-.P2[1])^2+(.sRel[2]-.P2[2])^2)^0.5;
      CapRatio=1.0;
//      AnyDrawParamSurf drw={RGB={0,0,1};};
    };
    
  }; 

  

  
  
/*  AnyRefNode P3 ={sRel=.subscapularis_cyl.P3;AnyDrawRefFrame  Drw={RGB={0,0,1};};};
  AnyRefNode P2 ={sRel=.subscapularis_cyl.P2; AnyDrawRefFrame Drw={RGB={0,1,0};};};
  AnyRefNode P1 ={sRel=.subscapularis_cyl.sRel;AnyDrawRefFrame  Drw={RGB={0,0,1};};};
  */
    // Definition of cylinder used for wrapping of subscapularis muscles 
  AnyRefNode subscapularis_cyl={ 
    
    AnyVec3 P2 =sRel+.Scale({0.015-0.02,-0.06,0.025+0.005})*.Mirror;//.Scale({-0.0,-0.03,-0.07})*.Mirror;
    AnyVec3 P3 =sRel+.Scale({0.0,0.008,0.008})*.Mirror;//sRel+VX*Radius;
  
  sRel=.gh.sRel+.Scale({-0.03-0.015,0.015+0.01,-0.02+0.005})*.Mirror;

    //Calculate rot matrix for cylinder using three points
    //p2-p1 used to find x axis
    //p3-p1 used to find the y axis
    //z axis found as cross product

     AnyMat33  Mat = RotMat(sRel,P2,P3);
    
    //AnyDrawRefFrame drw={RGB={0.2,0.2,0.2};};
    //Switch around the on the columns to compensate that the cylinder has 
    //main axis along the zaxis
   
    ARel={
      {Mat[0][1],Mat[0][2],Mat[0][0]},
      {Mat[1][1],Mat[1][2],Mat[1][0]},
      {Mat[2][1],Mat[2][2],Mat[2][0]}};              
    
    AnySurfCylinder cyl = { 
      Radius=((.sRel[0]-.P3[0])^2+(.sRel[1]-.P3[1])^2+(.sRel[2]-.P3[2])^2)^0.5;
      Length= ((.sRel[0]-.P2[0])^2+(.sRel[1]-.P2[1])^2+(.sRel[2]-.P2[2])^2)^0.5;
      CapRatio=1.0;
      //AnyDrawParamSurf drw={RGB={1,0,1};};
    };
  }; 
   
  
  
  AnyVec3 T={-0.02,0.012,0.005}; //corections
  AnyRefNode O_deltoideus_scapular_part_1 = {
    //AnyDrawRefFrame drw={};
    sRel = .Scale({-0.021964, -0.018987, 0.017237}+{-0.06,0.008,-0.0040})*.Mirror;  };
  AnyRefNode O_deltoideus_scapular_part_2 = {
   sRel = .Scale({-0.021964, -0.018987, 0.017237}+{0.01,0.011,-0.008})*.Mirror; };
  
  AnyRefNode O_deltoideus_scapular_part_3 = {sRel = .Scale({0.018565-0.01, -0.020427, 0.008868}+{0.02,0.009,-0.01})*.Mirror;};
  AnyRefNode O_deltoideus_scapular_part_4 = {sRel = .Scale({0.018565+0.01, -0.020427, 0.008868}+{0.01,0.012,-0.035})*.Mirror;};
  AnyRefNode O_deltoideus_scapular_part_5 = {sRel = .Scale({0.027144+0.025, (-0.013524-0.005), -0.008283-0.0025}+{-0.01,0.012,-0.035})*.Mirror; }; // Corrected value
  AnyRefNode O_deltoideus_scapular_part_6 = {sRel = .Scale({0.027144+0.025, (-0.013524-0.0025), -0.008283-.015}+{-0.015,0.012,-0.03})*.Mirror; }; // Corrected value
  
  AnyRefNode O_subscapularis_1 = {sRel = .Scale({-0.117070, -0.037374 , 0.001273})*.Mirror;};
  AnyRefNode O_subscapularis_2 = {sRel = .Scale({-0.106823, -0.031073, -0.001931})*.Mirror;};
  AnyRefNode O_subscapularis_3 = {sRel = .Scale({-0.119662, -0.092706, 0.005038})*.Mirror;};
  AnyRefNode O_subscapularis_4 = {sRel = .Scale({-0.098537, -0.079715, -0.001576})*.Mirror;};
  AnyRefNode O_subscapularis_5 = {sRel = .Scale({-0.105751, -0.108456, 0.002014})*.Mirror;};
  AnyRefNode O_subscapularis_6 = {sRel = .Scale({-0.078670, -0.091811, -0.006469})*.Mirror;};
  AnyRefNode O_supraspinatus_1 = {sRel = .Scale({-0.087612, 0.009190, -0.012824})*.Mirror;};
  AnyRefNode O_supraspinatus_2 = {sRel = .Scale({-0.074835, 0.008454, -0.018189})*.Mirror;};
  AnyRefNode O_supraspinatus_3 = {sRel = .Scale({-0.086524, 0.001699, -0.002132})*.Mirror;};
  AnyRefNode O_supraspinatus_4 = {sRel = .Scale({-0.066764, 0.000551, -0.010438})*.Mirror;};
  AnyRefNode O_supraspinatus_5 = {sRel = .Scale({-0.076042, -0.006054, 0.004172})*.Mirror;};
  AnyRefNode O_supraspinatus_6 = {sRel = .Scale({-0.063672, -0.006783, -0.001029})*.Mirror;};
  AnyRefNode O_infraspinatus_1 = {sRel = .Scale({-0.094472, -0.034274, 0.010150})*.Mirror;};
  AnyRefNode O_infraspinatus_2 = {sRel = .Scale({-0.061549, -0.024149, 0.005710})*.Mirror;};
  AnyRefNode O_infraspinatus_3 = {sRel = .Scale({-0.111265, -0.061317, 0.009120})*.Mirror;};
  AnyRefNode O_infraspinatus_4 = {sRel = .Scale({-0.063611, -0.046668, 0.002686})*.Mirror;};
  AnyRefNode O_infraspinatus_5 = {sRel = .Scale({-0.120721, -0.087803, 0.006848})*.Mirror;};
  AnyRefNode O_infraspinatus_6 = {sRel = .Scale({-0.089751, -0.078270, 0.002667})*.Mirror;};
  
  AnyRefNode O_teres_minor_1 = {sRel = .Scale({-0.052603, -0.076275, -0.004653})*.Mirror;};
  AnyRefNode O_teres_minor_2 = {sRel = .Scale({-0.050384, -0.076967, -0.005156})*.Mirror;};
  AnyRefNode O_teres_minor_3 = {sRel = .Scale({-0.064938, -0.084562, -0.002430})*.Mirror;};
  AnyRefNode O_teres_minor_4 = {sRel = .Scale({-0.059461, -0.086266, -0.003667})*.Mirror;};
  AnyRefNode O_teres_minor_5 = {sRel = .Scale({-0.071681, -0.092655, -0.001380})*.Mirror;};
  AnyRefNode O_teres_minor_6 = {sRel = .Scale({-0.067851, -0.093853, -0.002244})*.Mirror;};
  
  AnyRefNode O_teres_major_1 = {sRel = .Scale({-0.101160, -0.109234, 0.003289})*.Mirror;};
  AnyRefNode O_teres_major_2 = {sRel = .Scale({-0.094252, -0.111334, -0.000220})*.Mirror;};
  AnyRefNode O_teres_major_3 = {sRel = .Scale({-0.117363, -0.115701, 0.005858})*.Mirror;};
  AnyRefNode O_teres_major_4 = {sRel = .Scale({-0.103807, -0.119734, -0.000867})*.Mirror;};
  AnyRefNode O_teres_major_5 = {sRel = .Scale({-0.122360, -0.122399, 0.004290})*.Mirror;};
  AnyRefNode O_teres_major_6 = {sRel = .Scale({-0.110655, -0.125941, -0.001546})*.Mirror;};
  
  AnyRefNode O_biceps_brachii_caput_breve = {
    // sRel = .Scale({0.006927, -0.029410, -0.053235})*.Mirror;}; // Original number from data
    sRel = .Scale({0.01, -0.0259410, -0.085})*.Mirror; // This number has been changed 
    //AnyDrawRefFrame drw={RGB={0,1,0};};
  };
  
  AnyRefNode O_biceps_brachii_caput_longum = {
    // sRel = .Scale({0.002473, -0.024529, -0.024242}+.Soffset)*.Smat; // Original number from data
    sRel = .Scale({-0.018, -0.024529, -0.024242})*.Mirror; // This number has been changed

  };
  
  AnyRefNode O_coracobrachialis_1 = {
    //sRel = .Scale({0.004515, -0.029586, -0.052879})*.Mirror;
    sRel = .Scale({0.01, -0.0259410, -0.085})*.Mirror; // This number has been changed 
  };
  AnyRefNode O_coracobrachialis_2 = {
    //sRel = .Scale({0.004515, -0.029586, -0.052879})*.Mirror;
    sRel = .Scale({0.01, -0.0259410, -0.085})*.Mirror; // This number has been changed 
  };
  AnyRefNode O_coracobrachialis_3 = {
    //sRel = .Scale({-0.000986, -0.029598, -0.054989})*.Mirror;
    sRel = .Scale({0.01, -0.0259410, -0.085})*.Mirror; // This number has been changed 
  };
  AnyRefNode O_coracobrachialis_4 = {
    //sRel = .Scale({-0.000986, -0.029598, -0.054989})*.Mirror;
    sRel = .Scale({0.01, -0.0259410, -0.085})*.Mirror; // This number has been changed 
  };
  
  AnyRefNode O_coracobrachialis_5 = {
    //sRel = .Scale({-0.006942, -0.029611, -0.057278})*.Mirror;
    sRel = .Scale({0.01, -0.0259410, -0.085})*.Mirror; // This number has been changed 
  };
  AnyRefNode O_coracobrachialis_6 = {
    //sRel = .Scale({-0.006942, -0.029611, -0.057278})*.Mirror;
    sRel = .Scale({0.01, -0.0259410, -0.085})*.Mirror; // This number has been changed 

  };
  
  AnyRefNode I_trapezius_scapular_part_1 = {sRel = .Scale({-0.086823, -0.012118, 0.013531})*.Mirror;};
  AnyRefNode I_trapezius_scapular_part_2 = {sRel = .Scale({-0.085097, -0.009392, 0.013756})*.Mirror;};
  AnyRefNode I_trapezius_scapular_part_3 = {sRel = .Scale({-0.084147, -0.008617, 0.013764})*.Mirror;};
  AnyRefNode I_trapezius_scapular_part_4 = {sRel = .Scale({-0.074760, -0.005252, 0.013167})*.Mirror;};
  AnyRefNode I_trapezius_scapular_part_5 = {sRel = .Scale({-0.042636, -0.002774, 0.008364})*.Mirror;};
  AnyRefNode I_trapezius_scapular_part_6 = {sRel = .Scale({-0.008965, 0.003103, -0.004761})*.Mirror;};
  
  AnyRefNode I_rhomboideus_1 = {sRel = .Scale({-0.145167, -0.110189, 0.012478})*.Mirror;};
  AnyRefNode I_rhomboideus_2 = {sRel = .Scale({-0.131936, -0.066717, 0.008610})*.Mirror;};
  AnyRefNode I_rhomboideus_3 = {sRel = .Scale({-0.118702, -0.023236, 0.004743})*.Mirror;};
  
  AnyRefNode I_levator_scapulae_1 = {sRel = .Scale({-0.115845, -0.007797, 0.002254})*.Mirror;};
  AnyRefNode I_levator_scapulae_2 = {sRel = .Scale({-0.099963, 0.006836, -0.011831})*.Mirror;};
  AnyRefNode I_levator_scapulae_3 = {sRel = .Scale({-0.089070, 0.021474, -0.025909})*.Mirror;};
  AnyRefNode I_levator_scapulae_4 = { sRel = .Scale({-0.08070, 0.015474, -0.025909})*.Mirror;}; //this point has been added
  
  AnyVec3 Pec ={0.01,-0.005,-0.015}; //correction!
  AnyRefNode I_pectoralis_minor_1 = {sRel = .Scale({-0.009520, -0.015997, -0.054575}+.Pec)*.Mirror;};
  AnyRefNode I_pectoralis_minor_2 = {sRel = .Scale({-0.006040, -0.020567, -0.057330}+.Pec)*.Mirror;};
  AnyRefNode I_pectoralis_minor_3 = {sRel = .Scale({-0.002557, -0.025139, -0.060071}+.Pec)*.Mirror;};
  AnyRefNode I_pectoralis_minor_4 = { sRel = .Scale({0.000919, -0.029718, -0.062827}+.Pec)*.Mirror;};
  
  AnyRefNode I_serratus_anterior_1 = {sRel = .Scale({-0.136417, -0.133527, 0.004607})*.Mirror;};
  AnyRefNode I_serratus_anterior_2 = {sRel = .Scale({-0.134547, -0.134926, 0.004544})*.Mirror;};
  AnyRefNode I_serratus_anterior_3 = {sRel = .Scale({-0.138247, -0.131093, 0.004759})*.Mirror;};
  AnyRefNode I_serratus_anterior_4 = {sRel = .Scale({-0.141509, -0.111143, 0.005854})*.Mirror;};
  AnyRefNode I_serratus_anterior_5 = {sRel = .Scale({-0.132423, -0.060856, 0.005562})*.Mirror;};
  AnyRefNode I_serratus_anterior_6 = {sRel = .Scale({-0.100436, 0.005643, -0.010479})*.Mirror;};
  //  AnyRefNode conoid = {sRel = .Scale({-0.030040, -0.008900, -0.035754})*.Mirror;};
  
  
  
  // Nodes for muscle attachments bml etc. data from MAYO sub2
  AnyRefNode O_Biceps_LH = {sRel = .Scale({-0.021775, -0.017136, -0.001841})*.Mirror;};
  AnyRefNode O_Biceps_SH = {sRel = .Scale({-0.020215, -0.015694, -0.035300})*.Mirror;};
  AnyRefNode O_Cor_brach_1 = {sRel = .Scale({-0.018439, -0.015277, -0.033949})*.Mirror;};
  AnyRefNode O_Cor_brach_2 = {sRel = .Scale({-0.018439, -0.015277, -0.033949})*.Mirror;};
  AnyRefNode O_Triceps_LH_1 = {sRel = .Scale({-0.033101+0.035, -0.067389+0.005, 0.003096-0.01})*.Mirror;}; //corrected
  AnyRefNode O_Triceps_LH_2 = {sRel = .Scale({-0.045529+0.035, -0.068439+0.005, 0.007386-0.01})*.Mirror;};//corrected
  
}; 


