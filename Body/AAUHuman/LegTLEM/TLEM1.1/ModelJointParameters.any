AnyFolder &PelvisRef = Pelvis;
PelvisRef = {
  AnyVec3 HipJoint = {0,0,0}*.TF';
};

AnyFolder &ThighRef = Thigh;
ThighRef = {
  AnyFunTransform3D &Scale = ..Seg.Thigh.Scale; 
  
  AnyVec3 KneeJoint = {0.0384, -0.4078, 0.0138}*.TF';
  AnyVec3 PatellaFemurJoint = {0.0351, -0.3851, 0.0190}*.TF';
  AnyVec3 KneeJointAxis = ..Sign*{ -0.528, -0.107, 0.843}*.TF'/vnorm({ -0.528, -0.107, 0.843});
  AnyVec3 PatellaFemurJointAxis = ..Sign*{-0.465,0.024,0.885}*.TF'/vnorm({-0.465,0.024,0.885});
  AnyVec3 HipJoint = {0.0, 0.0, 0.0}*.TF';
  AnyVec3 KneeJointsRelUnscaled = KneeJoint;
  
  //  // Neutral definition of HipJoint
  //  AnyVec3 HipsRelUnscaled = HipJoint;
  //  AnyMat33 HipARelUnscaled = RotMat(HipsRelUnscaled , KneeJoint, HipsRelUnscaled + KneeARelUnscaled'[2])*RotMat(-pi/2,x)*RotMat(pi/2,z);
  //  AnyVec3 HipsRel = Scale(HipJoint);
  //  // Setting the USE_AMMR14_HIP_ROTATIONS flag will imitate AMMR1.4 behaviour
  //  #ifndef USE_AMMR14_HIP_ROTATIONS
  //    // The orientation of the HipJoint coordinate system follows ISB recommendation. The y axis follows the 
  //    // long axis of the thigh, and the knee axis lies in the z-y plane
  //    AnyMat33 HipARel = RotMat(HipsRel, Scale(KneeJoint), HipsRel+ KneeARel'[2])*RotMat(-pi/2,x)*RotMat(pi/2,z);
  //  #else
  //    AnyMat33 HipARel = RotMat(..Sign*-30*pi/180,y) * RotMat(-18*pi/180,z);
  //  #endif
  //
  //  // Neutral definition of the patella-femur joint
  //  // Control point for the PatellaFemurJoint. Found by projecting the EpicondylusFemoris bony landmarks onto the 
  //  // PatellaFemurJoint axis from the cadaver data set. Thus, scaling which moves the control points will also scale the PatellaFemurJointjoint axis
  //  AnyVec3 PFLateralControlPoint = Scale(PatellaFemurJoint + (..ModelParameters.Thigh.EpicondylusFemorisLateralis - PatellaFemurJoint)*PatellaFemurJointAxis'*PatellaFemurJointAxis);
  //  // Control point for the PatellaFemurJoint. Found by projecting the EpicondylusFemoris bony landmarks onto the 
  //  // PatellaFemurJoint axis from the cadaver data set. Thus, scaling which moves the control points will also scale the PatellaFemurJointjoint axis
  //  AnyVec3 PFMedialControlPoint = Scale(PatellaFemurJoint + (..ModelParameters.Thigh.EpicondylusFemorisMedialis - PatellaFemurJoint)*PatellaFemurJointAxis'*PatellaFemurJointAxis);
  //  AnyVec3 PatellaFemursRel = Scale(PatellaFemurJoint);
  //  // PatellaFemurJoint Joint orientation is calculated based on the direction between the two control points.   
  //  AnyMat33 PatellaFemurARel = RotMat(PatellaFemursRel, PatellaFemursRel + ..Sign*(PFLateralControlPoint-PFMedialControlPoint ), Scale(HipJoint))*RotMat(pi/2,y);
  //    
  // Neutral definition of the knee joint
  // This can be used for controlling varus valgus the varible can be linked to a design varible and changed,
  //  AnyVar AxisRot=0;  
  //  #ifdef BONY_LANDMARK_DEFINED_JOINTAXIS
  //    AnyVec3 KneesRelUnscaled = 0.5*(..ModelParameters.Thigh.EpicondylusFemorisLateralis +..ModelParameters.Thigh.EpicondylusFemorisMedialis);
  //    AnyMat33 KneeARelUnscaled = RotMat(KneesRelUnscaled , KneesRelUnscaled + ..Sign*(..ModelParameters.Thigh.EpicondylusFemorisLateralis -..ModelParameters.Thigh.EpicondylusFemorisMedialis), HipJoint)*RotMat(pi/2,y)*RotMat(AxisRot,x);
  //    // Knee joint is defined from the two epicondyle bony landmarks
  //    AnyVec3 KneesRel =0.5*(Scale(..ModelParameters.Thigh.EpicondylusFemorisLateralis) + Scale(..ModelParameters.Thigh.EpicondylusFemorisMedialis));
  //    // Knee joint axis is defined from the two epicondyle bony landmarks
  //    AnyMat33 KneeARel = RotMat(KneesRel, KneesRel + ..Sign*(Scale(..ModelParameters.Thigh.EpicondylusFemorisLateralis) - Scale(..ModelParameters.Thigh.EpicondylusFemorisMedialis)), Scale(HipJoint))*RotMat(pi/2,y)*RotMat(AxisRot,x);
  //  #else
  //    AnyVec3 KneesRelUnscaled = KneeJoint;
  //    AnyMat33 KneeARelUnscaled = RotMat(KneesRelUnscaled , KneesRelUnscaled + ..Sign*(KneeLateralControlPoint-KneeMedialControlPoint ), HipJoint)*RotMat(pi/2,y)*RotMat(AxisRot,x);
  //    // Control point for the knee joint. Found by projecting the EpicondylusFemoris bony landmarks onto the 
  //    // knee axis from the cadaver data set. Thus, scaling which moves the control points will also scale the Knee joint axis
  //    AnyVec3 KneeLateralControlPoint = KneeJoint + (..ModelParameters.Thigh.EpicondylusFemorisLateralis - KneeJoint)*KneeJointAxis'*KneeJointAxis;
  //    // Control point for the knee joint. Found by projecting the EpicondylusFemoris bony landmarks onto the 
  //    // knee axis from the cadaver data set. Thus, scaling which moves the control points will also scale the Knee joint axis
  //    AnyVec3 KneeMedialControlPoint = KneeJoint + (..ModelParameters.Thigh.EpicondylusFemorisMedialis - KneeJoint)*KneeJointAxis'*KneeJointAxis;
  //    AnyVec3 KneesRel = Scale(KneeJoint);
  //    // Setting the USE_AMMR14_HIP_ROTATIONS flag will imitate AMMR1.4 behaviour
  //    #ifndef USE_AMMR14_HIP_ROTATIONS
  //      // Knee Joint orientation is calculated based on the direction between the two control points.   
  //      AnyMat33 KneeARel = RotMat(KneesRel, KneesRel + ..Sign*(Scale(KneeLateralControlPoint)-Scale(KneeMedialControlPoint)), Scale(HipJoint))*RotMat(pi/2,y)*RotMat(AxisRot,x);
  //    #else
  //      AnyMat33 KneeARel = RotMat(..Sign*7.46*pi/180,x) * RotMat(..Sign*-32.25*pi/180,y)*RotMat(..Sign*AxisRot*pi/180,x);
  //    #endif
  //  #endif
};

AnyFolder &PatellaRef = Patella;
PatellaRef = {
  AnyFunTransform3D &Scale = ..Seg.Patella.Scale;   
  AnyVec3 PatellaFemurJoint = {0.0351, -0.3851, 0.0190}*.TF';
  AnyVec3 PatellaFemurJointAxis = ..Sign*{-0.465,0.024,0.885}*.TF'/vnorm({-0.465,0.024,0.885});
  AnyVec3 HipJoint = {0.0, 0.0, 0.0}*.TF';
  
  //    // Control point for the PatellaFemurJoint. Found by projecting the EpicondylusFemoris bony landmarks onto the 
  //    // PatellaFemurJoint axis from the cadaver data set. Thus, scaling which moves the control points will also scale the PatellaFemurJointjoint axis
  //    AnyVec3 LateralControlPoint = Scale(PatellaFemurJoint + (..ModelParameters.Patella.EpicondylusFemorisLateralis - PatellaFemurJoint)*PatellaFemurJointAxis'*PatellaFemurJointAxis);
  //    // Control point for the PatellaFemurJoint. Found by projecting the EpicondylusFemoris bony landmarks onto the 
  //    // PatellaFemurJoint axis from the cadaver data set. Thus, scaling which moves the control points will also scale the PatellaFemurJointjoint axis
  //    AnyVec3 MedialControlPoint = Scale(PatellaFemurJoint + (..ModelParameters.Patella.EpicondylusFemorisMedialis - PatellaFemurJoint )*PatellaFemurJointAxis'*PatellaFemurJointAxis);
  //    AnyVec3 PatellasRel = Scale(PatellaFemurJoint );
  //    // PatellaFemurJoint Joint orientation is calculated based on the direction between the two control points.   
  //    AnyMat33 PatellaARel = RotMat(PatellasRel, PatellasRel + ..Sign*(LateralControlPoint-MedialControlPoint ), Scale(HipJoint))*RotMat(pi/2,y);
};

AnyFolder &ShankRef = Shank;
ShankRef = {
  AnyFunTransform3D &Scale = ..Seg.Shank.Scale; 
  AnyVec3 AnkleJoint = {0.072, -0.8275, 0.0125}*.TF';
  AnyVec3 KneeJoint = {0.0384, -0.4078, 0.0138}*.TF';
  AnyVec3 AnkleJointAxis = ..Sign*{-0.683553, -0.2060334, 0.7002182}*.TF'/vnorm({-0.683553, -0.2060334, 0.7002182 });
  AnyVec3 KneeJointAxis = ..Sign*{ -0.528, -0.107, 0.843}*.TF'/vnorm({ -0.528, -0.107, 0.843});
  
  //    // Neutral definition of talocrural joint
  //    // This switch is used to control two definition of the joint axis. One specified by the original cadaver data set (default),
  //    // and one where the joint is defined to through the bony landmarks. 
  //    #ifdef BONY_LANDMARK_DEFINED_JOINTAXIS
  //      AnyVec3 TalocruralsRelUnscaled =  0.5*(..ModelParameters.Shank.LateralAnkleAxisMarker+..ModelParameters.Shank.MedialAnkleAxisMarker);       
  //      AnyMat33 TalocruralARelUnscaled = RotMat(TalocruralsRelUnscaled ,TalocruralsRelUnscaled + ..Sign*(..ModelParameters.Shank.LateralAnkleAxisMarker -..ModelParameters.Shank.MedialAnkleAxisMarker ), KneeJoint)*RotMat(pi/2,y);
  //      AnyVec3 TalocruralsRel = 0.5*(Scale(..ModelParameters.Shank.LateralAnkleAxisMarker)+Scale(..ModelParameters.Shank.MedialAnkleAxisMarker));
  //      AnyMat33 TalocruralARel = RotMat(TalocruralsRel,TalocruralsRel+ ..Sign*(Scale(..ModelParameters.Shank.LateralAnkleAxisMarker) -Scale(..ModelParameters.Shank.MedialAnkleAxisMarker) ), KneeJoint)*RotMat(pi/2,y); 
  //   #else
  //      AnyVec3 TalocruralsRelUnscaled =  AnkleJoint;
  //      AnyMat33 TalocruralARelUnscaled =   RotMat(TalocruralsRelUnscaled, TalocruralsRelUnscaled + ..Sign*(AnkleLateralControlPoint-AnkleMedialControlPoint ), KneeJoint)*RotMat(pi/2,y);
  //      // Control point for the Ankle joint. Found by projecting the malleolus bony landmarks onto the 
  //      // ankle axis from the cadaver data set. Thus, scaling the control points will also scale the ankle joint axis
  //      AnyVec3 AnkleLateralControlPoint =  AnkleJoint + (..ModelParameters.Shank.LateralMalleolus - AnkleJoint)*AnkleJointAxis'*AnkleJointAxis;
  //      // Control point for the Ankle joint. Found by projecting the malleolus bony landmarks onto the 
  //      // ankle axis from the cadaver data set. Thus, scaling the control points will also scale the ankle joint axis
  //      AnyVec3 AnkleMedialControlPoint = AnkleJoint + (..ModelParameters.Shank.MedialMalleolus - AnkleJoint)*AnkleJointAxis'*AnkleJointAxis;
  //      AnyVec3 TalocruralsRel = Scale(AnkleJoint);
  //      // Ankle Joint orientation is calculated based on the direction between the two control points.   
  //      AnyMat33 TalocruralARel = RotMat(TalocruralsRel, TalocruralsRel +..Sign*(Scale(AnkleLateralControlPoint)-Scale(AnkleMedialControlPoint) ), Scale(KneeJoint))*RotMat(pi/2,y);
  //    #endif
  
  // Neutral definition of the knee joint
  // Bony Landmarks transformed transformed to the shank coordinate system in the neutral configuration
  AnyVec3 LateralFemuralCondyleInNeutralConf = (..ModelParameters.Thigh.EpicondylusFemorisLateralis *.Thigh.RotNeutral'+.Thigh.PosNeutral-.Shank.PosNeutral)*.Shank.RotNeutral;
  // Bony Landmarks transformed transformed to the shank coordinate system in the neutral configuration
  AnyVec3 MedialFemuralCondyleInNeutralConf = (..ModelParameters.Thigh.EpicondylusFemorisMedialis *.Thigh.RotNeutral'+.Thigh.PosNeutral-.Shank.PosNeutral)*.Shank.RotNeutral;
  //    // This switch is used to control two definition of the joint axis. One specified by the original cadaver data set (default),
  //    // and one where the joint is defined to through the bony landmarks. 
  //    #ifdef BONY_LANDMARK_DEFINED_JOINTAXIS
  //      AnyVec3 KneesRelUnscaled = 0.5*(LateralFemuralCondyleInNeutralConf + MedialFemuralCondyleInNeutralConf);
  //      AnyMat33 KneeARelUnscaled =  RotMat(KneesRelUnscaled ,KneesRelUnscaled+ ..Sign*(LateralFemuralCondyleInNeutralConf - MedialFemuralCondyleInNeutralConf), AnkleJoint)*RotMat(pi,z)*RotMat(-pi/2,y);
  //      // Knee joint is defined from the two epicondyle bony landmarks
  //      AnyVec3 KneesRel = 0.5*(Scale(LateralFemuralCondyleInNeutralConf )+Scale( MedialFemuralCondyleInNeutralConf));
  //      // Knee joint axis is defined from the two epicondyle bony landmarks
  //      AnyMat33 KneeARel = RotMat(KneesRel, KneesRel+ ..Sign*(Scale(LateralFemuralCondyleInNeutralConf) - Scale(MedialFemuralCondyleInNeutralConf)), Scale(AnkleJoint))*RotMat(pi,z)*RotMat(-pi/2,y);
  //    #else
  //      AnyVec3 KneesRelUnscaled = KneeJoint;
  //      AnyMat33 KneeARelUnscaled =  RotMat(KneesRelUnscaled , KneesRelUnscaled + ..Sign*(LateralControlPoint-MedialControlPoint), AnkleJoint)*RotMat(pi,z)*RotMat(-pi/2,y);
  //      // Control point for the knee joint. Found by projecting the EpicondylusFemoris bony landmarks onto the 
  //      // knee axis from the cadaver data set. Thus, scaling the control points will also scale the Knee joint axis
  //      AnyVec3 LateralControlPoint = KneeJoint + (LateralFemuralCondyleInNeutralConf - KneeJoint)*KneeJointAxis'*KneeJointAxis;
  //      // Control point for the knee joint. Found by projecting the EpicondylusFemoris bony landmarks onto the 
  //      // knee axis from the cadaver data set. Thus, scaling the control points will also scale the Knee joint axis
  //      AnyVec3 MedialControlPoint = KneeJoint + (MedialFemuralCondyleInNeutralConf - KneeJoint)*KneeJointAxis'*KneeJointAxis;
  //      AnyVec3 KneesRel = Scale(KneeJoint);
  //      
  //      // Setting the USE_AMMR14_HIP_ROTATIONS flag will imitate AMMR1.4 behaviour
  //      #ifdef USE_AMMR14_HIP_ROTATIONS
  //        AnyMat33 KneeARel = RotMat(..Sign*7.46*pi/180,x) * RotMat(..Sign*-32.25*pi/180,y);
  //      #else
  //        // Knee Joint orientation is calculated based on the direction between the two control points.   
  //        AnyMat33 KneeARel = RotMat(KneesRel, KneesRel + ..Sign*(Scale(LateralControlPoint)-Scale(MedialControlPoint)), Scale(AnkleJoint))*RotMat(pi,z)*RotMat(-pi/2,y);
  //      #endif
  //    #endif
};

AnyFolder &TalusRef = Talus;
TalusRef = {
  AnyFunTransform3D &Scale = ..Seg.Talus.Scale; 
  
  // Recalculated into Talus' coordnate system in the neutral configuration
  AnyVec3 KneeJoint = {0.1957086, -0.450982, 0.1546587}*.TF';
  AnyVec3 SubTalarJoint ={  0.070, -0.851, 0.015}*.TF';  
  AnyVec3 AnkleJoint= {0.072, -0.8275, 0.0125}*.TF';
  AnyVec3 AnkleJointAxis = ..Sign*{-0.683553, -0.2060334, 0.7002182}*.TF'/vnorm({-0.683553, -0.2060334,0.7002182 });
  AnyVec3 SubTalarJointAxis = ..Sign*{ -0.9416034, -0.2229949, -0.2523019}*.TF'/vnorm({ -0.9416034, -0.2229949, -0.2523019 } );
  
  // Neutral definition of subtalar joint
  AnyVec3 LateralTibialEpicondyle = (..Seg.Shank.StdPar.LateralTibialEpicondyle *.Shank.RotNeutral'+.Shank.PosNeutral-.Talus.PosNeutral)*.Talus.RotNeutral;
  AnyVec3 MedialTibialEpicondyle = (..Seg.Shank.StdPar.MedialTibialEpicondyle *.Shank.RotNeutral'+.Shank.PosNeutral-.Talus.PosNeutral)*.Talus.RotNeutral;
  AnyVec3 LateralMalleolus = (..Seg.Shank.StdPar.LateralMalleolus *.Shank.RotNeutral'+.Shank.PosNeutral-.Talus.PosNeutral)*.Talus.RotNeutral;
  AnyVec3 MedialMalleolus = (..Seg.Shank.StdPar.MedialMalleolus *.Shank.RotNeutral'+.Shank.PosNeutral-.Talus.PosNeutral)*.Talus.RotNeutral;
  
  AnyVec3 KneeJointInNeutralConfig = (.Thigh.KneeJointsRelUnscaled *.Thigh.RotNeutral'+.Thigh.PosNeutral-.Talus.PosNeutral)*.Talus.RotNeutral;
  //    AnyVec3 SubTalarsRelUnscaled = SubTalarJoint;
  //    AnyVec3 SubTalarsRel = .Talus.Scale(SubTalarJoint);
  //    AnyMat33 SubTalarARelUnscaled = RotMat( SubTalarsRelUnscaled , SubTalarsRelUnscaled + SubTalarJointAxis, KneeJointInNeutralConfig )*RotMat(pi/2,y);
  //    AnyMat33 SubTalarARel = RotMat( SubTalarsRel, SubTalarsRel + SubTalarJointAxis, KneeJointInNeutralConfig )*RotMat(pi/2,y);
  
  //    // Neutral definition of talocrural joint
  //    // Switch to change the joint definition to follow bony landmarks instead of the original dataset 
  //    // Default is the orginal dataset. 
  //    #ifdef BONY_LANDMARK_DEFINED_JOINTAXIS
  //      AnyVec3 TalocruralsRelUnscaled =  0.5*(..ModelParameters.Talus.LateralAnkleAxisMarker+..ModelParameters.Talus.MedialAnkleAxisMarker);
  //      AnyMat33 TalocruralARelUnscaled = RotMat(TalocruralsRelUnscaled , TalocruralsRelUnscaled + ..Sign*(..ModelParameters.Talus.LateralAnkleAxisMarker -..ModelParameters.Talus.MedialAnkleAxisMarker ), KneeJointInNeutralConfig )*RotMat(pi/2,y);
  //      // Ankle joint is defined from the two malleolus bony landmarks
  //      AnyVec3 TalocruralsRel = 0.5*(Scale(..ModelParameters.Talus.LateralAnkleAxisMarker)+Scale(..ModelParameters.Talus.MedialAnkleAxisMarker));
  //      // Ankle joint axis is defined from the two malleolus bony landmarks
  //      AnyMat33 TalocruralARel = RotMat(TalocruralsRel,TalocruralsRel+ ..Sign*(Scale(..ModelParameters.Talus.LateralAnkleAxisMarker) -Scale(..ModelParameters.Talus.MedialAnkleAxisMarker) ), KneeJointInNeutralConfig )*RotMat(pi/2,y); 
  //    #else
  //      AnyVec3 TalocruralsRelUnscaled = AnkleJoint;
  //      AnyMat33 TalocruralARelUnscaled = RotMat(TalocruralsRelUnscaled, TalocruralsRelUnscaled +..Sign*AnkleJointAxis, KneeJointInNeutralConfig )*RotMat(pi/2,y);
  //      // Control point for the Ankle joint. Found by projecting the malleolus bony landmarks onto the 
  //      // ankle axis from the cadaver data set. Thus, scaling that moves the control points will also scale the ankle joint axis
  //      AnyVec3 LateralControlPoint = Scale(AnkleJoint + (..ModelParameters.Talus.LateralMalleolus - AnkleJoint)*AnkleJointAxis'*AnkleJointAxis);
  //      // Control point for the Ankle joint. Found by projecting the malleolus bony landmarks onto the 
  //      // ankle axis from the cadaver data set. Thus, scaling that moves the control points will also scale the ankle joint axis
  //      AnyVec3 MedialControlPoint = Scale(AnkleJoint + (..ModelParameters.Talus.MedialMalleolus - AnkleJoint)*AnkleJointAxis'*AnkleJointAxis );
  //      // Ankle Joint defined directly from the cadaver dataset. 
  //      AnyVec3 TalocruralsRel = Scale(AnkleJoint);
  //      // Ankle Joint orientation is calculated based on the direction between the two control points.   
  //      AnyMat33 TalocruralARel = RotMat(TalocruralsRel, TalocruralsRel  +..Sign*(LateralControlPoint-MedialControlPoint ), KneeJointInNeutralConfig )*RotMat(pi/2,y);
  //    #endif
};

AnyFolder &FootRef = Foot;
FootRef = {
  AnyFunTransform3D &Scale = ..Seg.Foot.Scale; 
  // Joint Parameters
  AnyVec3 MetatarsalJoint1Node ={0.18, -0.9600, 0.05}*.TF';
  AnyVec3 MetatarsalJoint2Node = {0.1650, -0.9600, 0.065}*.TF';
  AnyVec3 MetatarsalJoint3Node = {0.1450, -0.9600,0.0700  }*.TF';
  AnyVec3 MetatarsalJoint4Node = {0.1350, -0.9600, 0.0800 }*.TF';
  AnyVec3 MetatarsalJoint5Node = {0.12, -0.95500, 0.095 }*.TF';
  AnyVec3 ToeJoint = {0.18, -0.94, 0.05}*.TF'; 
  AnyVec3 AnkleJoint= {0.072, -0.8275, 0.0125}*.TF';
  AnyVec3 SubTalarJoint = {0.070, -0.851, 0.015}*.TF';  
  AnyVec3 AnkleJointAxis = ..Sign*{-0.683553, -0.2060334, 0.7002182}*.TF'/vnorm({-0.683553, -0.2060334,0.7002182 });
  AnyVec3 SubTalarJointAxis = ..Sign*{ -0.9416034, -0.2229949, -0.2523019}*.TF'/vnorm({ -0.9416034, -0.2229949, -0.2523019 } );
  // Recalculated into Foot's coordnate system in the neutral configuration
  AnyVec3 KneeJoint =  {0.1793069, -0.4413312, 0.141487}*.TF';
  AnyVec3 LateralMalleolus = (..Seg.Shank.StdPar.LateralMalleolus *.Shank.RotNeutral'+.Shank.PosNeutral-.Foot.PosNeutral)*.Foot.RotNeutral;
  AnyVec3 MedialMalleolus = (..Seg.Shank.StdPar.MedialMalleolus *.Shank.RotNeutral'+.Shank.PosNeutral-.Foot.PosNeutral)*.Foot.RotNeutral;
  AnyVec3 LateralTibialEpicondyle = (..Seg.Shank.StdPar.LateralTibialEpicondyle *.Shank.RotNeutral'+.Shank.PosNeutral-.Foot.PosNeutral)*.Foot.RotNeutral;
  AnyVec3 MedialTibialEpicondyle = (..Seg.Shank.StdPar.MedialTibialEpicondyle *.Shank.RotNeutral'+.Shank.PosNeutral-.Foot.PosNeutral)*.Foot.RotNeutral;
  
  
  
  //AnyVec3 SubTalarsRel = Scale(SubTalarJoint);
  //AnyMat33 SubTalarARel = RotMat(SubTalarsRel, SubTalarsRel + SubTalarJointAxis, KneeJoint)*RotMat(pi/2,y);
};

//This is the unscaled length of the patellar ligament, this length is used to constrain the patella motion
AnyVar PatellarLigamentLength = 0.0605;