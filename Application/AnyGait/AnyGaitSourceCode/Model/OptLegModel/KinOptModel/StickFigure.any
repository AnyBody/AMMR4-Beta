
//  #include "Marker.any"

  AnyFolder StickFigure = {
  
    
  AnyFolder Posture = {
  #if IncludeRight == 1
  AnyFolder Right = {
    
    ////// Inititals positions of the static markers   ////////
     
    AnyVec3 sRTHI =   { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTHI.PosInterpol.Data[0][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTHI.PosInterpol.Data[1][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTHI.PosInterpol.Data[2][0]};
    AnyVec3 sRKNE =   { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RKNE.PosInterpol.Data[0][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RKNE.PosInterpol.Data[1][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RKNE.PosInterpol.Data[2][0]};
    AnyVec3 sRTHL =   { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTHL.PosInterpol.Data[0][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTHL.PosInterpol.Data[1][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTHL.PosInterpol.Data[2][0]};
    AnyVec3 sRTIB =   { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTIB.PosInterpol.Data[0][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTIB.PosInterpol.Data[1][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTIB.PosInterpol.Data[2][0]};
    AnyVec3 sRANK =   { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RANK.PosInterpol.Data[0][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RANK.PosInterpol.Data[1][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RANK.PosInterpol.Data[2][0]};
    AnyVec3 sRMMA =   { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RMMA.PosInterpol.Data[0][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RMMA.PosInterpol.Data[1][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RMMA.PosInterpol.Data[2][0]};
    AnyVec3 sRHEE =   { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RHEE.PosInterpol.Data[0][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RHEE.PosInterpol.Data[1][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RHEE.PosInterpol.Data[2][0]};
    AnyVec3 sRTOE =   { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTOE.PosInterpol.Data[0][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTOE.PosInterpol.Data[1][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTOE.PosInterpol.Data[2][0]};
        
    AnyVec3 sRAnkleCenter = (sRANK + sRMMA )/2;                         
                              
                            
    // In principle the knee center can be any point along the revolute knee joint axis, thus
    // selecting the middle point between the epicondyle makes sense anatomically. 
    // However, to correspond with the LegTLEM model the knee center is chosen 
    // to be a little closer to the lateral side.
    //AnyVec3 sRKneeCenter = (0.60135*sRKneeLateral + 0.39865*sRKneeMedial);

    AnyVec3 sRKneeCenter = (sRKNE + sRTHL)/2;
    
    
    AnyFolder Thigh = {
      
      //The origin of the  reference frame is found by projecting the 
      // hip-kneeCenter vector to the y axis of the thigh (u2)
      AnyVec3 r0_static = ..Trunk.RHipJoint.r0_static;//.sRKneeCenter+ ( ..Trunk.RHipJoint.r0_static-.sRKneeCenter)*u2'*u2;
      
      
      
      // Basis for the thigh coordinate system. 
      // u3 is define by a line though mediala and lateral epicondily makers
      // u1 is a vector pependicular to u3 and HipJoint-sRKneeCenter
      // u2 is the remaining orthonormal direction (cross product of u3, and u1) (y axis of thigh)
      AnyVec3 u3 = (.sRKNE - .sRKneeCenter ) / vnorm(.sRTHL - .sRKneeCenter );
      AnyVec3 u1 = cross(..Trunk.RHipJoint.r0_static -.sRKneeCenter, u3)/vnorm( cross(..Trunk.RHipJoint.r0_static -.sRKneeCenter, u3));
      AnyVec3 u2 = cross(u3,u1);
      
      AnyMatrix Axes0_static= {u1, u2, u3}';
      
      #if IncludeKnee + IncludeHip > 0    
      CreateLoadPositions InitialPos = {
        iCluster1 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RKNE.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RKNE.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RKNE.PosInterpol.Data[2][Main.StaticFrameNo]};
          iCluster2 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTHI.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTHI.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTHI.PosInterpol.Data[2][Main.StaticFrameNo]};
          iCluster3 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTHL.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTHL.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTHL.PosInterpol.Data[2][Main.StaticFrameNo]};
          sCluster1 = ..sRKNE;
          sCluster2 = ..sRTHI;
          sCluster3 = ..sRTHL;
      };
//    AnyFolder InitialPos = {
//      AnyVec3 r0=.r0_static;
//      AnyMat33 Axes0 = .Axes0_static;
//    };
      #endif
      
      
      AnyFolder RTHI = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sRTHI -.r0_static)')';
      };
      AnyFolder RKNE = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sRKNE -.r0_static)')';
      };
      AnyFolder RTHL = 
      {
        AnyVec3 sRel_static= ( .Axes0_static'*(..sRTHL -.r0_static)')';
      };
      AnyFolder HipJoint = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(...Trunk.RHipJoint.r0_static - .r0_static)')';
      };
      AnyFolder KneeJoint = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sRKneeCenter - .r0_static)')';       
      };
      
      
      #if IncludeRight == 1
      #if IncludeHip + IncludeKnee > 0
       AnyFolder &ThighRef = ....LegModel.Right.Seg.Thigh;
       ThighRef = {
         AnyRefNode RTHI = {
           sRel = ..RTHI.sRel_static;
         };
         AnyRefNode RKNE = {
           sRel = ..RKNE.sRel_static;
         };
         AnyRefNode RKneeMedial= {
           sRel = ..RTHL.sRel_static;
         };

         AnyRefNode RTHL = {
           sRel = ..RTHL.sRel_static;
         };

       };
      #endif 
      #endif
      
      
    };
    
    AnyFolder Shank = {
      
//      // Initial Segment position
//      AnyVec3 r0_static = .sRKneeCenter;   
//      
//      // Vector defining the point of projection of knee joint center on the line passing though 
//      // medial and lateral ankle Markers ( represented by u3)
//      AnyVec3 sTmp = (r0_static-.sRAnkleCenter )*u3'*u3 + .sRAnkleCenter;
//      
//      // Basis for the thigh coordinate system. 
//      // u3 is define by a line though mediala and lateral epicondily makers
//      // u2 is a direction defined by the RThighLateral marker rejekted from u3
//      // u1 is the remaining orthonormal direction (cross product of u2, and u3) 
//      AnyVec3 u3 = (.sRAnkleLateral - .sRAnkleCenter) / vnorm(.sRAnkleLateral - .sRAnkleCenter);
//      AnyVec3 u2 = (r0_static - sTmp ) /vnorm( r0_static - sTmp) ;
//      AnyVec3 u1 = cross(u2, u3);
//      
      
      
      
      
      //The origin of the  reference frame is found by projecting the 
      // kneeCenter-ankleCenter vector onto the y axis of the shank (u2)
      AnyVec3 r0_static = .sRAnkleCenter+ ( .sRKneeCenter- .sRAnkleCenter )*u2'*u2;      
      
      // Basis for the thigh coordinate system. 
      // u3 is define by a line though mediala and lateral malleolus makers
      // u1 is a vector pependicular to u3 and the sRKneeCenter-sRAnkleCenter vector
      // u2 is the remaining orthonormal direction (cross product of u3, and u1) (y axis of shank)
      AnyVec3 u3 = (.sRANK - .sRAnkleCenter) / vnorm(.sRANK - .sRAnkleCenter);
      AnyVec3 u1 = cross(.sRKneeCenter - .sRAnkleCenter, u3)/vnorm( cross(.sRKneeCenter - .sRAnkleCenter, u3 ));
      AnyVec3 u2 = cross(u3,u1);
      
      
            
      
      
      AnyMatrix Axes0_static = {u1, u2, u3}';
      
      #if IncludeKnee + IncludeAnkle > 0
      CreateLoadPositions InitialPos = {
          iCluster1 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RANK.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RANK.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RANK.PosInterpol.Data[2][Main.StaticFrameNo]};
          iCluster2 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RKNE.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RKNE.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RKNE.PosInterpol.Data[2][Main.StaticFrameNo]};
          iCluster3 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTIB.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTIB.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTIB.PosInterpol.Data[2][Main.StaticFrameNo]};
          sCluster1 = ..sRANK;
          sCluster2 = ..sRKNE;
          sCluster3 = ..sRTIB;
      };
//    AnyFolder InitialPos = {
//      AnyVec3 r0=.r0_static;
//      AnyMat33 Axes0 = .Axes0_static;
//    };
      #endif
            
      AnyFolder RKNE = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sRKNE -.r0_static)')';
      };
      AnyFolder RTHL = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sRTHL -.r0_static)')';
      };
      AnyFolder RTIB = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sRTIB -.r0_static)')';
      };
      AnyFolder RANK = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sRANK -.r0_static)')';
      };
      AnyFolder RMMA = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sRMMA -.r0_static)')';
      };
      AnyFolder AnkleJoint = {
        AnyVec3 sRel_static= (.Axes0_static'*( ..sRAnkleCenter -.r0_static)')';
      };
      AnyFolder RHipJoint = {
        AnyVec3 sRel_static=  (.Axes0_static'*(...Trunk.RHipJoint.r0_static - .r0_static)')';
      };
      AnyFolder RKneeJoint = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sRKneeCenter - .r0_static)')';       
        AnyMat33 ARel_static = RotMat(sRel_static, .RKNE.sRel_static,.RHipJoint.sRel_static)* RotMat(90*pi/180,y);
      };      
      
      #if IncludeRight == 1
      #if IncludeKnee + IncludeAnkle > 0 
      AnyFolder &ShankRef = ....LegModel.Right.Seg.Shank;
      
      ShankRef = {
         AnyRefNode RTIB = {
           sRel = ..RTIB.sRel_static;
         };
         AnyRefNode RANK = {
           sRel = ..RANK.sRel_static;
         };
         AnyRefNode RMMA = {
           sRel = ..RMMA.sRel_static;
         };
         AnyRefNode RKNE = {
           sRel = ..RKNE.sRel_static;
         };
         AnyRefNode RTHL = {
           sRel = ..RTHL.sRel_static;
           AnyDrawNode drw = {
             RGB = {1,0,0}; 
             Opacity = 0.5;
             ScaleXYZ = {0.005, 0.005, 0.005};
           };

         };
      };
      #endif
      #endif
      
    };
    
    AnyFolder Foot = {
      // Initial Segment position
      AnyVec3 r0_static = .sRHEE; 
      
      // Vector defining the point of projection of AnkleJoint on the 
      // line between RHeel and RToe (represented by u1)
      AnyVec3 sTmp = (.sRAnkleCenter - r0_static) *u1'*u1+ r0_static;
      
      AnyVec3 u1 = (.sRTOE-.sRHEE) /vnorm( .sRTOE-.sRHEE );
      AnyVec3 u2 = (.sRAnkleCenter - sTmp) /vnorm(.sRAnkleCenter -sTmp);
      AnyVec3 u3 = cross(u1,u2);
      
      AnyMatrix Axes0_static = {u1, u2, u3}';
      
      #if IncludeAnkle == 1
      CreateLoadPositions InitialPos = {
          iCluster1 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RHEE.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RHEE.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RHEE.PosInterpol.Data[2][Main.StaticFrameNo]};
          iCluster2 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTOE.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTOE.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RTOE.PosInterpol.Data[2][Main.StaticFrameNo]};
          iCluster3 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RMMA.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RMMA.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RMMA.PosInterpol.Data[2][Main.StaticFrameNo]};
          sCluster1 = ..sRHEE;
          sCluster2 = ..sRTOE;
          sCluster3 = ..sRMMA;
      };
//    AnyFolder InitialPos = {
//      AnyVec3 r0=.r0_static;
//      AnyMat33 Axes0 = .Axes0_static;
//    };
      #endif
      
      
      AnyFolder RKneeCenter = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sRKneeCenter -.r0_static)')';
      };
      AnyFolder RHEE = {
        AnyVec3 sRel_static= (.Axes0_static'*(..sRHEE -.r0_static)')';
      };
      AnyFolder RTOE = {
        AnyVec3 sRel_static= (.Axes0_static'*(..sRTOE -.r0_static)')';
      };
      AnyFolder AnkleJoint = {
        AnyVec3 sRel_static= (.Axes0_static'*( ..sRAnkleCenter -.r0_static)')';
        AnyMat33 ARel_static = .Axes0_static'*..Shank.Axes0_static;
      };
      AnyFolder RANK = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sRANK -.r0_static)')';
      };
      AnyFolder RMMA = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sRMMA -.r0_static)')';
      };      
      
      
      #if IncludeRight == 1  
      #if IncludeAnkle == 1
      AnyFolder &FootRef = ....LegModel.Right.Seg.Foot;
     
      FootRef = {
        AnyRefNode RHEE = {
          sRel = ..RHEE.sRel_static;
        };
        AnyRefNode RTOE = {
          sRel = ..RTOE.sRel_static;
        };
         AnyRefNode RANK = {
           sRel = ..RANK.sRel_static;
         };
         AnyRefNode RMMA = {
           sRel = ..RMMA.sRel_static;
         };
        
       };
      #endif
      #endif
      

  
      
      
      
    };

    
  };
  #endif
  
  
  AnyFolder Trunk = {
    
     //// Initial positions of static Markers /////
    AnyVec3 sRASI =          { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RASI.PosInterpol.Data[0][0],
                               Main.ModelSetup.StaticData.Points.Markers.ABTstat_RASI.PosInterpol.Data[1][0],
                               Main.ModelSetup.StaticData.Points.Markers.ABTstat_RASI.PosInterpol.Data[2][0]};
    AnyVec3 sLASI =          { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LASI.PosInterpol.Data[0][0],
                               Main.ModelSetup.StaticData.Points.Markers.ABTstat_LASI.PosInterpol.Data[1][0],
                               Main.ModelSetup.StaticData.Points.Markers.ABTstat_LASI.PosInterpol.Data[2][0]};
     AnyVec3 sRPSI =         { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RPSI.PosInterpol.Data[0][0],
                               Main.ModelSetup.StaticData.Points.Markers.ABTstat_RPSI.PosInterpol.Data[1][0],
                               Main.ModelSetup.StaticData.Points.Markers.ABTstat_RPSI.PosInterpol.Data[2][0]};
     AnyVec3 sLPSI =         { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LPSI.PosInterpol.Data[0][0],
                               Main.ModelSetup.StaticData.Points.Markers.ABTstat_LPSI.PosInterpol.Data[1][0],
                               Main.ModelSetup.StaticData.Points.Markers.ABTstat_LPSI.PosInterpol.Data[2][0]};
     AnyVec3 sPSIMidPoint = 0.5*(sRPSI+sLPSI);
     AnyVec3 sRMMA =         { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RMMA.PosInterpol.Data[0][0],
                               Main.ModelSetup.StaticData.Points.Markers.ABTstat_RMMA.PosInterpol.Data[1][0],
                               Main.ModelSetup.StaticData.Points.Markers.ABTstat_RMMA.PosInterpol.Data[2][0]}; 
     AnyVec3 sLMMA =         { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LMMA.PosInterpol.Data[0][0],
                               Main.ModelSetup.StaticData.Points.Markers.ABTstat_LMMA.PosInterpol.Data[1][0],
                               Main.ModelSetup.StaticData.Points.Markers.ABTstat_LMMA.PosInterpol.Data[2][0]}; 
                              
                              
    // Pelvis axis and positions
    AnyFolder Pelvis = {
      AnyVec3 r0_static = 0.5*(.sRASI+.sLASI);
      AnyVec3 u1 = (tmp  - .sPSIMidPoint) / vnorm( tmp - .sPSIMidPoint) ;
      AnyVec3 u2 = cross(u3, u1);
      AnyVec3 u3 = (.sRASI - .sLASI ) / vnorm(.sRASI - .sLASI ) ;
      
      AnyVec3 tmp = (.sPSIMidPoint-.sLASI )*u3'* u3 + .sLASI ;
      AnyMatrix Axes0_static= {u1,u2,u3}';
      
     AnyVec3 dRPSI =          { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RPSI.PosInterpol.Data[0][Main.StaticFrameNo],
                                Main.ModelSetup.StaticData.Points.Markers.ABTstat_RPSI.PosInterpol.Data[1][Main.StaticFrameNo],
                                Main.ModelSetup.StaticData.Points.Markers.ABTstat_RPSI.PosInterpol.Data[2][Main.StaticFrameNo]};
     AnyVec3 dLPSI =          { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LPSI.PosInterpol.Data[0][Main.StaticFrameNo],
                                Main.ModelSetup.StaticData.Points.Markers.ABTstat_LPSI.PosInterpol.Data[1][Main.StaticFrameNo],
                                Main.ModelSetup.StaticData.Points.Markers.ABTstat_LPSI.PosInterpol.Data[2][Main.StaticFrameNo]};
      
      
      AnyVec3 dPSIMidPoint = 0.5*(dRPSI +dLPSI );
      #if IncludeHip == 1
      CreateLoadPositions InitialPos = {
        iCluster1 =   { Main.ModelSetup.StaticData.Points.Markers.ABTstat_RASI.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RASI.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_RASI.PosInterpol.Data[2][Main.StaticFrameNo]};
          iCluster2 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LASI.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LASI.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LASI.PosInterpol.Data[2][Main.StaticFrameNo]};
          iCluster3 = { .dPSIMidPoint[0],
                        .dPSIMidPoint[1],
                        .dPSIMidPoint[2]};
          sCluster1 = ..sRASI;
          sCluster2 = ..sLASI;
          sCluster3 = ..sPSIMidPoint;
      };  
//    AnyFolder InitialPos = {
//      AnyVec3 r0={0,0,0};
//      AnyMat33 Axes0 = RotMat(0.0,z);
//    };

      #endif
      
      AnyFolder RHipJoint = {
        AnyVec3 sRel_static= (.Axes0_static'*(..RHipJoint.r0_static - .r0_static)')';
      };
      
      AnyFolder LHipJoint = {
        AnyVec3 sRel_static= (.Axes0_static'*(..LHipJoint.r0_static - .r0_static)')';
      };
      
      AnyFolder RASI = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sRASI-.r0_static)')';
      };
      AnyFolder LASI = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sLASI-.r0_static)')';
      };
      AnyFolder RPSI = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sRPSI-.r0_static)')';
      };
      AnyFolder PSIMidPoint = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sPSIMidPoint-.r0_static)')';
      };
      AnyFolder LPSI = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sLPSI-.r0_static)')';
      };
      
      #if IncludeHip == 1
      AnyFolder &PelvisRef = ....LegModel.Trunk.Seg.Pelvis;
      
      PelvisRef = {
        AnyRefNode RASI = {
          AnyDrawNode drw={RGB={0,0.76953125,0};ScaleXYZ={1,1,1}*0.005;};
          sRel = ..RASI.sRel_static;
        };
        AnyRefNode LASI = {
          AnyDrawNode drw={RGB={0,0.76953125,0};ScaleXYZ={1,1,1}*0.005;};          
          sRel = ..LASI.sRel_static;
        };
        AnyRefNode RPSI = {
          AnyDrawNode drw={RGB={0,0.76953125,0};ScaleXYZ={1,1,1}*0.005;};          
          sRel = ..RPSI.sRel_static;
        };
        AnyRefNode PSIMidPoint = {
          sRel = ..PSIMidPoint.sRel_static;
        };
        AnyRefNode LPSI = {
          AnyDrawNode drw={RGB={0,0.76953125,0};ScaleXYZ={1,1,1}*0.005;};          
          sRel = ..LPSI.sRel_static;
        };
                
      };
      #endif
      
      
    };
    AnyFolder RHipJoint = {
      // Initial position of hip joint based on anatomical landmarks as described by 
      // Alexander L. Bell 1990 "A comparison of the accuracy of several hip center location prediction methods"
      AnyVec3 r0_static = .Pelvis.r0_static+(.Pelvis.Axes0_static*....LegModel.Trunk.Seg.Pelvis.RHipJoint.sRel')';

      
      AnyFloat AsisDist = vnorm(.sRASI -.sLASI);
      
      // Anatomical Hip postition by Bell  (1989)
      AnyVec3 AnatomicalHipPosBell = {-0.22*AsisDist, -0.30*AsisDist, 0.36*AsisDist};//+Main.SubjectSpecificData.Anthropometrics.Pelvis.RightHipCenterOffset;
      
      // Calculation of the anatomical hip joint position used by Vicons Plug-in gait system. Based on the work by Davis 
      // (Lleg) Asis-malleoulus dist:
      // (xdis) Trochanter-asis dist: (0.1288* Asis-mallous)-48.56 (this formula is given by plug-in gait manual)
      // (dasis) Asis dist: 
      // (rmarker) marker diameter:
      // Beta = 18
      // Theta = 28.4
      // sign = +1 (right leg)
      // C =0.115*Lleg-0.153
      // X = (-xdis -rmarker)cos(beta)+C(cos(theta)sin(beta))
      // Y = sign(C*sin(theta)-dasis/2)
      // Z = (-xdis-rmarker)sin(beta)-C*cos(theta)*cos(beta)
      
      AnyVar Lleg = vnorm(.sRASI - .sRMMA);
      AnyVar MeanLleg = (vnorm(.sLASI - .sLMMA)+vnorm(.sRASI - .sRMMA))/2;      
      
      AnyVar xdis = (0.1288*Lleg)-0.04856;
      AnyVar rmarker = 0.007;
      AnyVar beta = pi*18/180;
      AnyVar theta = pi*28.4/180;
      AnyVar sign = 1;
      AnyVar C = 0.115*MeanLleg-0.0153;
      AnyVar XHD = (-xdis-rmarker)*cos(beta)+C*cos(theta)*sin(beta);
      AnyVar YHD = sign*(C*sin(theta)-AsisDist/2);
      AnyVar ZHD = (-xdis-rmarker)*sin(beta)-C*cos(theta)*cos(beta);

      AnyVec3 AnatomicalHipPosDavis = {XHD,ZHD,-YHD};//+Main.SubjectSpecificData.Anthropometrics.Pelvis.RightHipCenterOffset;
      
      AnyVar PelvisDepth = vnorm((.sRASI+.sLASI)/2-(.sLPSI+.sRPSI)/2);

      AnyVar XHH = (-0.24*PelvisDepth*1000-9.9)/1000;
      AnyVar YHH = (-0.16*AsisDist*1000-0.04*Lleg*1000-7.1)/1000;
      AnyVar ZHH = (0.28*PelvisDepth*1000+0.16*AsisDist*1000+7.9)/1000;


      AnyVec3 AnatomicalHipPosHarrington = {XHH,YHH,ZHH};
    };
    AnyFolder LHipJoint = {
      AnyVec3 r0_static = .Pelvis.r0_static+(.Pelvis.Axes0_static*....LegModel.Trunk.Seg.Pelvis.LHipJoint.sRel')';
      
     AnyFloat AsisDist = vnorm(.sRASI -.sLASI);
      
      // Anatomical Hip postition by Bell  (1989)
      AnyVec3 AnatomicalHipPosBell = {-0.22*AsisDist, -0.30*AsisDist, -0.36*AsisDist};//+Main.SubjectSpecificData.Anthropometrics.Pelvis.LeftHipCenterOffset;
      
      // Calculation of the anatomical hip joint position used by Vicons Plug-in gait system. Based on the work by Davis 
      // (Lleg) Asis-malleoulus dist:
      // (xdis) Trochanter-asis dist: (0.1288* Asis-mallous)-48.56 (this formula is given by plug-in gait manual)
      // (dasis) Asis dist: 
      // (rmarker) marker diameter:
      // Beta = 18
      // Theta = 28.4
      // sign = +1 (right leg)
      // C =0.115*Lleg-0.153
      // X = (-xdis -rmarker)cos(beta)+C(cos(theta)sin(beta))
      // Y = sign(C*sin(theta)-dasis/2)
      // Z = (-xdis-rmarker)sin(beta)-C*cos(theta)*cos(beta)
      
      AnyVar Lleg = vnorm(.sLASI - .sLMMA);
      AnyVar MeanLleg = (vnorm(.sLASI - .sLMMA)+vnorm(.sRASI - .sRMMA))/2;      
      
      AnyVar xdis = (0.1288*Lleg)-0.04856;
      AnyVar rmarker = 0.007;
      AnyVar beta = pi*18/180;
      AnyVar theta = pi*28.4/180;
      AnyVar sign = 1;
      AnyVar C = 0.115*MeanLleg-0.0153;
      AnyVar XH = (-xdis-rmarker)*cos(beta)+C*cos(theta)*sin(beta);
      AnyVar YH = sign*(C*sin(theta)-AsisDist/2);
      AnyVar ZH = (-xdis-rmarker)*sin(beta)-C*cos(theta)*cos(beta);

      AnyVec3 AnatomicalHipPosDavis = {XH,ZH,YH};//+Main.SubjectSpecificData.Anthropometrics.Pelvis.LeftHipCenterOffset;

      AnyVar PelvisDepth = vnorm((.sRASI+.sLASI)/2-(.sLPSI+.sRPSI)/2);

      AnyVar XHH = (-0.24*PelvisDepth*1000-9.9)/1000;
      AnyVar YHH = (-0.16*AsisDist*1000-0.04*Lleg*1000-7.1)/1000;
      AnyVar ZHH = (0.28*PelvisDepth*1000+0.16*AsisDist*1000+7.9)/1000;

      AnyVec3 AnatomicalHipPosHarrington = {XHH,YHH,-ZHH};
      
    };    
    
    
  };
  
  #if IncludeLeft == 1
  AnyFolder Left = {
        ////// Inititals positions of the static Markers  ///////
    AnyVec3 sLTHI =   { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTHI.PosInterpol.Data[0][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTHI.PosInterpol.Data[1][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTHI.PosInterpol.Data[2][0]};
    AnyVec3 sLKNE =   { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LKNE.PosInterpol.Data[0][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LKNE.PosInterpol.Data[1][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LKNE.PosInterpol.Data[2][0]};
    AnyVec3 sLTHL =   { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTHL.PosInterpol.Data[0][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTHL.PosInterpol.Data[1][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTHL.PosInterpol.Data[2][0]};
    AnyVec3 sLTIB =   { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTIB.PosInterpol.Data[0][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTIB.PosInterpol.Data[1][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTIB.PosInterpol.Data[2][0]};
    AnyVec3 sLANK =   { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LANK.PosInterpol.Data[0][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LANK.PosInterpol.Data[1][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LANK.PosInterpol.Data[2][0]};
    AnyVec3 sLMMA =   { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LMMA.PosInterpol.Data[0][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LMMA.PosInterpol.Data[1][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LMMA.PosInterpol.Data[2][0]};
    AnyVec3 sLHEE =   { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LHEE.PosInterpol.Data[0][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LHEE.PosInterpol.Data[1][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LHEE.PosInterpol.Data[2][0]};
    AnyVec3 sLTOE =   { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTOE.PosInterpol.Data[0][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTOE.PosInterpol.Data[1][0],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTOE.PosInterpol.Data[2][0]};
    
    
    //AnyVec3 sLAnkleCenter = (sLAnkleLateral + sLAnkleMedial) /2; 
    AnyVec3 sLKneeCenter = (sLKNE + sLTHL) /2;
    
    
    AnyVec3 sLAnkleCenter = (sLANK + sLMMA)/2;                         
                              
                             
    AnyFolder Thigh = {
      AnyVec3 r0_static = ..Trunk.LHipJoint.r0_static;
      
      // Vector defining the point of projection of 'RThighLateral' marker on the line passing though 
      // medial and lateral epicondyle Markers ( represented by u3)
      AnyVec3 sTmp = (r0_static -.sLKneeCenter )*u3'*u3 + .sLKneeCenter ;
      
      // Basis for the thigh coordinate system. 
      // u3 is define by a line though mediala and lateral epicondily makers
      // u2 is a direction of define by the RThighLateral marker rejekted from u3
      // u1 is the remaining orthonormal direction (cross product of u2, and u3) 
      AnyVec3 u3 = -(.sLKNE - .sLKneeCenter ) / vnorm(.sLTHL - .sLKneeCenter );
      AnyVec3 u2 = (r0_static-sTmp)/vnorm(r0_static-sTmp);
      AnyVec3 u1 = cross(u2, u3);
      
      AnyMatrix Axes0_static= {u1, u2, u3}';
      
      #if IncludeKnee + IncludeHip > 0    
      CreateLoadPositions InitialPos = {
          iCluster1 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LKNE.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LKNE.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LKNE.PosInterpol.Data[2][Main.StaticFrameNo]};
          iCluster2 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTHI.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTHI.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTHI.PosInterpol.Data[2][Main.StaticFrameNo]};
          iCluster3 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTHL.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTHL.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTHL.PosInterpol.Data[2][Main.StaticFrameNo]};
          sCluster1 = ..sLKNE ;
          sCluster2 = ..sLTHI;
          sCluster3 = ..sLTHL;
      };  
//    AnyFolder InitialPos = {
//      AnyVec3 r0=.r0_static;
//      AnyMat33 Axes0 = .Axes0_static;
//    };

      #endif
      
      
      AnyFolder LTHI = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sLTHI -.r0_static)')';
      };
      AnyFolder LKNE = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sLKNE -.r0_static)')';
      };
      AnyFolder LTHL = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sLTHL -.r0_static)')';
      };
      AnyFolder HipJoint = 
      {
        AnyVec3 sRel_static= {0,0,0};
      };
      AnyFolder KneeJoint = 
      {       
        AnyVec3 sRel_static= (.Axes0_static'*(..sLKneeCenter - .r0_static)')';
        
      };
      
      
      #if IncludeLeft == 1
      #if IncludeHip + IncludeKnee > 0
      AnyFolder &ThighRef = ....LegModel.Left.Seg.Thigh;
      
      ThighRef = {
        AnyRefNode LTHI = {
          sRel = ..LTHI.sRel_static;
        };
        AnyRefNode LKNE = {
          sRel = ..LKNE.sRel_static;
        };
        AnyRefNode LTHL = {
          sRel = ..LTHL.sRel_static;
           AnyDrawNode drw = {
             RGB = {1,0,0}; 
             Opacity = 0.5;
             ScaleXYZ = {0.005, 0.005, 0.005};
           };

          
        };
      };
      #endif
      #endif
      
      
    };
    
    AnyFolder Shank = {
      
      // Initial Segment position
      AnyVec3 r0_static = .sLKneeCenter;   
      
      // Point of projection of knee joint center on the line passing though 
      // medial and lateral ankle Markers ( represented by u3)
      AnyVec3 sTmp = (r0_static-.sLAnkleCenter )*u3'*u3 + .sLAnkleCenter;
      
      // Basis for the thigh coordinate system. 
      // u3 is define by a line though mediala and lateral malleolus makers
      // u2 is a unit vector from the sTmp point to the kneeCenter
      // u1 is the remaining orthonormal direction (cross product of u2, and u3) 
      AnyVec3 u3 = -(.sLANK - .sLAnkleCenter) / vnorm(.sLANK - .sLAnkleCenter);
      AnyVec3 u2 = (r0_static - sTmp ) /vnorm( r0_static - sTmp) ;
      AnyVec3 u1 = cross(u2, u3);
      
      AnyMatrix Axes0_static = {u1, u2, u3}';
      
      #if IncludeKnee + IncludeAnkle > 0
      CreateLoadPositions InitialPos = {
          iCluster1 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LANK.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LANK.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LANK.PosInterpol.Data[2][Main.StaticFrameNo]};
          iCluster2 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LKNE.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LKNE.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LKNE.PosInterpol.Data[2][Main.StaticFrameNo]};
          iCluster3 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTIB.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTIB.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTIB.PosInterpol.Data[2][Main.StaticFrameNo]};
          sCluster1 = ..sLANK;
          sCluster2 = ..sLKNE;
          sCluster3 = ..sLTIB;

      };
//    AnyFolder InitialPos = {
//      AnyVec3 r0=.r0_static;
//      AnyMat33 Axes0 = .Axes0_static;
//    };

      #endif
            
      AnyFolder LKNE = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sLKNE -.r0_static)')';
      };
      AnyFolder LTHL = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sLTHL -.r0_static)')';
      };
      AnyFolder LTIB = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sLTIB -.r0_static)')';
      };
      AnyFolder LANK = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sLANK -.r0_static)')';
      };
      AnyFolder LMMA = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sLMMA -.r0_static)')';
      };
      AnyFolder HipJoint = {
        AnyVec3 sRel_static=  (.Axes0_static'*(...Trunk.LHipJoint.r0_static - .r0_static)')';
      };
      
      AnyFolder AnkleJoint = {
        AnyVec3 sRel_static= (.Axes0_static'*( ..sLAnkleCenter -.r0_static)')';
      };
      AnyFolder KneeJoint = {
        AnyVec3 sRel_static= (.Axes0_static'*(..sLKneeCenter - .r0_static)')';       
        AnyMat33 ARel_static = RotMat(sRel_static, .LKNE.sRel_static,.HipJoint.sRel_static)* RotMat(-90*pi/180,y);
        
      };
      
      #if IncludeLeft == 1
      #if IncludeKnee + IncludeAnkle > 0
      AnyFolder &ShankRef = ....LegModel.Left.Seg.Shank;
      
      ShankRef = {
        AnyRefNode LTIB = {
          sRel = ..LTIB.sRel_static;
        };
        
        AnyRefNode LANK = {
          sRel = ..LANK.sRel_static;
        };
        AnyRefNode LMMA = {
          sRel = ..LMMA.sRel_static;
        };
      };
      #endif
      #endif
      
    };
    
    
    AnyFolder Foot = {
      // Initial Segment position
      AnyVec3 r0_static = .sLHEE; 
      
      // Vector defining the point of projection of AnkleJoint on the 
      // line between LHeel and LToe (represented by u1)
      AnyVec3 sTmp = (.sLAnkleCenter - r0_static) *u1'*u1+ r0_static;
      
      AnyVec3 u1 = (.sLTOE-.sLHEE) /vnorm( .sLTOE-.sLHEE );
      AnyVec3 u2 = (.sLAnkleCenter - sTmp) /vnorm(.sLAnkleCenter -sTmp);
      AnyVec3 u3 = cross(u1,u2);
      
      AnyMatrix Axes0_static = {u1, u2, u3}';
      
      #if IncludeAnkle == 1
      CreateLoadPositions InitialPos = {
          iCluster1 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LHEE.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LHEE.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LHEE.PosInterpol.Data[2][Main.StaticFrameNo]};
          iCluster2 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTOE.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTOE.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LTOE.PosInterpol.Data[2][Main.StaticFrameNo]};
          iCluster3 = { Main.ModelSetup.StaticData.Points.Markers.ABTstat_LMMA.PosInterpol.Data[0][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LMMA.PosInterpol.Data[1][Main.StaticFrameNo],
                        Main.ModelSetup.StaticData.Points.Markers.ABTstat_LMMA.PosInterpol.Data[2][Main.StaticFrameNo]};
          sCluster1 = ..sLHEE;
          sCluster2 = ..sLTOE;
          sCluster3 = ..sLMMA;
      };
//    AnyFolder InitialPos = {
//      AnyVec3 r0=.r0_static;
//      AnyMat33 Axes0 = .Axes0_static;
//    };

      #endif
      
      
     
      

      AnyFolder LHEE = {
        AnyVec3 sRel_static= (.Axes0_static'*(..sLHEE -.r0_static)')';
      };
      
      AnyFolder LTOE = {
        AnyVec3 sRel_static= (.Axes0_static'*(..sLTOE -.r0_static)')';
      };
      
      AnyFolder AnkleJoint = {
        AnyVec3 sRel_static= (.Axes0_static'*( ..sLAnkleCenter -.r0_static)')';
        AnyMat33 ARel_static = .Axes0_static'*..Shank.Axes0_static;        
      };
      AnyFolder LANK = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sLANK -.r0_static)')';
      };
      AnyFolder LMMA = 
      {
        AnyVec3 sRel_static= (.Axes0_static'*(..sLMMA -.r0_static)')';
      };
      
      
      #if IncludeLeft == 1
      #if IncludeAnkle == 1
      AnyFolder &FootRef = ....LegModel.Left.Seg.Foot;
      
      FootRef = {
        AnyRefNode LHEE = {
          sRel = ..LHEE.sRel_static;
        };
        AnyRefNode LTOE = {
          sRel = ..LTOE.sRel_static;
        };
        AnyRefNode LANK = {
          sRel = ..LANK.sRel_static;
        };
        AnyRefNode LMMA = {
          sRel = ..LMMA.sRel_static;
        };
      };
      #endif
      #endif
      
    };
    
    
  };
  #endif
  
    
    
   

};
};
