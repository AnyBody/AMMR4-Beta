     
    #if UseDanamicLoadPosition == 1
    
      #class_template CreateLoadPositions {
         
        
          #var AnyVec3 iCluster1;
          #var AnyVec3 iCluster2; 
          #var AnyVec3 iCluster3; 
          #var AnyVec3 sCluster1;
          #var AnyVec3 sCluster2; 
          #var AnyVec3 sCluster3; 

          
        
        // Calculate initial postions based on dynamic markerset
           // Global rotation of the two marker clusters
         AnyMatrix Axes0_iCluster = RotMat(iCluster1, iCluster2, iCluster3);
         AnyMatrix Axes0_sCluster  = RotMat(sCluster1, sCluster2, sCluster3);
           // Relative rotation matrix for the marker cluster to the segment
         AnyMatrix ARel_Cluster = .Axes0_static' * Axes0_sCluster ;
           // Rotation matrix for initial position
          
          //#if UseStaticLoadPosition == 0
           AnyMatrix Axes0 = Axes0_iCluster*ARel_Cluster';
          //#else
          // AnyMatrix Axes0 = Axes0_iCluster*ARel_Cluster';
          //#endif
         
           //Position of the two marker clusters
         AnyVec3 r0_iCluster = (iCluster1 + iCluster2) /2;
         AnyVec3 r0_sCluster = (sCluster1 + sCluster2) /2;
           // Relative position vector for the cluster
         AnyVec3 sRel_Cluster = ( .Axes0_static'*(r0_sCluster - .r0_static)' )';
           // Initial positions of segments
          //#if UseStaticLoadPosition == 0
           AnyVec3 r0 = r0_iCluster - ( Axes0 * sRel_Cluster' )';        
          //#else
           //AnyMatrix Axes0 = Axes0_iCluster*ARel_Cluster';
          //#endif
          
      };
   #else
   
   #class_template CreateLoadPositions {
         
        
          #var AnyVec3 iCluster1;
          #var AnyVec3 iCluster2; 
          #var AnyVec3 iCluster3; 
          #var AnyVec3 sCluster1;
          #var AnyVec3 sCluster2; 
          #var AnyVec3 sCluster3; 

         AnyMatrix Axes0 = .Axes0_static;
         
         AnyVec3 r0 = .r0_static; 
       
   };
  
   #endif
      
      
  
  
  