AnyFolder &BikeParameters=Main.BikeParameters;
AnyFolder &RefHM = Main.Model.HumanModel;

AnyFolder &pelvisref=RefHM.Trunk.SegmentsLumbar.PelvisSeg;     
AnyFolder &JntPos=Main.Model.Mannequin.Posture;
AnyFolder &JntVel=Main.Model.Mannequin.PostureVel;


//This is the joint which connects the Pelvis segment to the bike.
AnyKinLinear SaddelJointLin ={
  Ref=0; 
  AnyRefNode & Saddel = ...BikeModel.BikeFrame.SaddelPos;
  AnyRefNode & Sacrum=...HumanModel.Trunk.SegmentsLumbar.PelvisSeg.HipJointsCenter;     
  Saddel ={AnyDrawRefFrame  drw={}; };
};

AnyKinEqSimpleDriver SaddelLin = {
  AnyKinLinear &Jnt = .SaddelJointLin;
  DriverPos = {0,0,0};
  DriverVel = {0.0,0,0};
  Reaction.Type = {Off,Off,Off}; 
};


AnyKinRotational SaddelJointRot ={
  AnyRefNode & Sacrum=...HumanModel.Trunk.SegmentsLumbar.PelvisSeg.HipJointsCenter;     
  AnyRefNode & Saddel = ...BikeModel.BikeFrame.SaddelPos;
  Type=RotAxesAngles;
};

AnyKinEqSimpleDriver SaddelRotation = {
  AnyKinRotational &Jnt = .SaddelJointRot;
  DriverPos = {0.2*pi,0,0};
  DriverVel = {0.0,0,0};
  //Setting Reaction.Type=1 means that the joint will generate the moment it will 
  //need to balance this DOF, setting it to 0 which is default will mean that muscles 
  //forces will be used for balancing the joint
  Reaction.Type = {Off,On,Off}; 
};

//-------------------------------------------------------
//  Drivers - spine
//-------------------------------------------------------

 // ************************************
  // Drivers for the spine
  // ************************************
  
  //Neck driver 
  AnyKinEqSimpleDriver NeckJntDriver = {
    AnyRevoluteJoint &T12L1Joint = ...HumanModel.Interface.Trunk.NeckJoint;
    DriverPos = pi/180*{.JntPos.NeckExtension};
    DriverVel = pi/180*{.JntVel.NeckExtension};
    Reaction.Type = {Off};
  };
  
  //Thorax pelvis rotation driver
  AnyKinEqSimpleDriver PostureDriver ={
    AnyKinMeasureOrg &Ref2 = ...HumanModel.Interface.Trunk.PelvisThoraxLateralBending;        
    AnyKinMeasureOrg &Ref3 = ...HumanModel.Interface.Trunk.PelvisThoraxRotation;   
    AnyKinMeasureOrg &Ref1 = ...HumanModel.Interface.Trunk.PelvisThoraxExtension;
   
    DriverPos = pi/180*{
          .JntPos.PelvisThoraxLateralBending,
      .JntPos.PelvisThoraxRotation,
      .JntPos.PelvisThoraxExtension
    };
    DriverVel = pi/180*{
      .JntVel.PelvisThoraxLateralBending,
      .JntVel.PelvisThoraxRotation,
      .JntVel.PelvisThoraxExtension
    };
    Reaction.Type = {Off,Off,Off};  
  };  

  


AnyFolder Right ={   
  
 AnyRevoluteJoint PedalFootJoint = {
    Axis=z;  
    AnyRefNode &ref1= ....BikeModel.Crank.RPedal;
    AnyRefNode &ref2 = ...ModelFolder.Right.Leg.Seg.Foot.GroundJoint;
    #include "../../../Body/AAUHuman/ToolBox/JointReactions/DrawJointReactions.any"
      AnyFolder &DrawRef=Main.DrawSettings;
     
  };
  
  // This measure is for controlling the rotation.
  AnyKinRotational PedalJointRot = {
    AnyRefFrame &Ground = ....BikeModel.BikeFrame;
    AnyRefNode &Foot = ...ModelFolder.Right.Leg.Seg.Foot.GroundJoint;
    Type=RotAxesAngles;
  };
  
  AnyKinMeasureOrg FootRMovement = {
    AnyKinRotational &GroundFoot = .PedalJointRot;
    MeasureOrganizer = {0};  // Standard rotational order = z,y,x = 0,1,2
  }; 

  AnyKinEqFourierDriver PedalRRotationFourier  ={
    AnyKinMeasureOrg &Jnt = .FootRMovement;
    Type = CosSin;
    AnyVar a0 = -0.3797-0.5*pi;
    AnyVar a1 = -0.0205;
    AnyVar b1 = 0.3393;
    AnyVar a2 = 0.004906;
    AnyVar b2 = 0.03654;
    AnyVar w = 7.681;
    Freq = ..BikeParameters.Cadence/60; 
    A = { {a0+0.5*pi,a1,a2} };
    B = {{0,b1,b2} }; 
    Reaction.Type = {Off};
  };
  //------------------------------------------------------
  //This joint locks the hand to the bike
  //-------------------------------------------------------
  AnySphericalJoint HandToBike = {
    AnyRefNode &ref1 = ....BikeModel.BikeFrame.RightHand;
    AnyRefFrame &ref2= ...ModelFolder.Right.ShoulderArm.Seg.Glove;
 #include "../../../Body/AAUHuman/ToolBox/JointReactions/DrawJointReactions.any"
      AnyFolder &DrawRef=Main.DrawSettings;
     
  }; //Hand to ground
  
  AnyKinRotational HandToBikeRot = {
    AnyRefNode &GroundNode = ....BikeModel.BikeFrame.RightHand;
    AnyRefFrame &ref2= ...ModelFolder.Right.ShoulderArm.Seg.Glove;
    Type=RotVector;
  }; //Hand to ground
  
  
  
  AnyKinEqSimpleDriver HandToBikeDrv={
    AnyKinRotational &ref=.HandToBikeRot;
//    DriverPos = {0.446805, 0.850377, 2.871550};
//    DriverVel={0,0,0};
//    Reaction.Type={On,On,On};
    DriverPos = {0.446805, 0.850377};
    DriverVel={0,0};
    Reaction.Type={On,On};
MeasureOrganizer={0,1};
  };
  
 
  // ************************************
  // Drivers for the right arm
  // ************************************

  
  //Sterno clavicular joint driver
  AnyKinEqSimpleDriver SCDriverRight ={
    AnyKinMeasureOrg &ref1 =....HumanModel.Interface.Right.SternoClavicularProtraction;
    AnyKinMeasureOrg &ref2 =....HumanModel.Interface.Right.SternoClavicularElevation;
    AnyKinMeasureOrg &ref3 =....HumanModel.Interface.Right.SternoClavicularAxialRotation;
    DriverPos = pi/180*{
      ..JntPos.Right.SternoClavicularProtraction,
      ..JntPos.Right.SternoClavicularElevation,
      ..JntPos.Right.SternoClavicularAxialRotation
    };
    DriverVel = {
      ..JntVel.Right.SternoClavicularProtraction,
      ..JntVel.Right.SternoClavicularElevation,
      ..JntVel.Right.SternoClavicularAxialRotation
};
    Reaction.Type={Off,Off,Off};
  };//Wrist driver 
  AnyKinEqSimpleDriver WristDriverRight ={
    AnyKinMeasureOrg &ref1 =....HumanModel.Interface.Right.WristFlexion;
    AnyKinMeasureOrg &ref2 =....HumanModel.Interface.Right.WristAbduction;
    DriverPos = pi/180*{
         ..JntPos.Right.WristFlexion,
         ..JntPos.Right.WristAbduction
       };

    DriverVel = pi/180*{
         ..JntVel.Right.WristFlexion,
         ..JntVel.Right.WristAbduction};
    Reaction.Type={Off,Off};
  };

};//Right


AnyFolder Left ={

    
  AnyRevoluteJoint PedalFootJoint = {
    AnyRefNode &ref1= ....BikeModel.Crank.LPedal;
    AnyRefNode &ref2 = ...ModelFolder.Left.Leg.Seg.Foot.GroundJoint;
    Axis=z;  
    #include "../../../Body/AAUHuman/ToolBox/JointReactions/DrawJointReactions.any"
         AnyFolder &DrawRef=Main.DrawSettings;
  
  };
  
  // This measure is for controlling the rotation.
  AnyKinRotational PedalJointRot = {
    AnyRefFrame &Ground = ....BikeModel.BikeFrame;
    AnyRefNode &Foot = ...ModelFolder.Left.Leg.Seg.Foot.GroundJoint;
    Type=RotAxesAngles;
  };
  
  AnyKinMeasureOrg FootLMovement = {
    AnyKinRotational &GroundFoot = .PedalJointRot;
    MeasureOrganizer = {0};  // Standard rotational order = z,y,x = 0,1,2
  }; 
  

  
  AnyKinEqFourierDriver PedalLRotationFourier ={  
    AnyKinMeasureOrg &Jnt = .FootLMovement;
    Type = CosSin;
    AnyVar a0 = -0.3797-0.5*pi;
    AnyVar a1 = 0.0205;
    AnyVar b1 = -0.3393;
    AnyVar a2 = 0.004906;
    AnyVar b2 = 0.03654;
    AnyVar w = 7.681;
    Freq = ..BikeParameters.Cadence/60; 
    A = { {a0+0.5*pi,a1,a2}};
    B = {{0,b1,b2}}; 
    Reaction.Type = {Off};
 };
  //------------------------------------------------------
  //This joint locks the hand to the bike
  //-------------------------------------------------------
  AnySphericalJoint HandToBike = {
    AnyRefNode &ref1 = ....BikeModel.BikeFrame.LeftHand;
   AnyRefFrame &ref2= ...ModelFolder.Left.ShoulderArm.Seg.Glove;
        #include "../../../Body/AAUHuman/ToolBox/JointReactions/DrawJointReactions.any"
  AnyFolder &DrawRef=Main.DrawSettings;
   }; //Hand to bike
  
  AnyKinRotational HandToBikeRot = {
    AnyRefNode &GroundNode = ....BikeModel.BikeFrame.LeftHand;
    AnyRefFrame &ref2= ...ModelFolder.Left.ShoulderArm.Seg.Glove;
    Type=RotVector;
  }; //Hand to ground
  
  
  
  AnyKinEqSimpleDriver HandToBikeDrv={
    AnyKinRotational &ref=.HandToBikeRot;
//    DriverPos = {-0.446805, -0.850377, 2.871550};
//    DriverVel={0,0,0};
//    Reaction.Type={On,On,On};
    DriverPos = {-0.446805, -0.850377};
    DriverVel={0,0};
    Reaction.Type={On,On};

    MeasureOrganizer={0,1};
  };
  
  
  
  // ************************************
  // Drivers for the left arm
  // ************************************
  
  //Sterno clavicular joint driver
  AnyKinEqSimpleDriver SCDriverLeft ={
    AnyKinMeasureOrg &ref1 =....HumanModel.Interface.Left.SternoClavicularProtraction;
    AnyKinMeasureOrg &ref2 =....HumanModel.Interface.Left.SternoClavicularElevation;
    AnyKinMeasureOrg &ref3 =....HumanModel.Interface.Left.SternoClavicularAxialRotation;
    
    DriverPos = pi/180*{
      ..JntPos.Left.SternoClavicularProtraction,
      ..JntPos.Left.SternoClavicularElevation,
      ..JntPos.Left.SternoClavicularAxialRotation
    };
    
    DriverVel = pi/180*{
      ..JntVel.Left.SternoClavicularProtraction,
      ..JntVel.Left.SternoClavicularElevation,
      ..JntVel.Left.SternoClavicularAxialRotation
    };

    Reaction.Type={Off,Off,Off};
  };
 
  
  //Wrist driver
  AnyKinEqSimpleDriver WristDriverLeft ={
    AnyKinMeasureOrg &ref1 =....HumanModel.Interface.Left.WristFlexion;
    AnyKinMeasureOrg &ref2 =....HumanModel.Interface.Left.WristAbduction;
    DriverPos = pi/180*{
         ..JntPos.Left.WristFlexion,
         ..JntPos.Left.WristAbduction};

    DriverVel = pi/180*{
         ..JntVel.Left.WristFlexion,
         ..JntVel.Left.WristAbduction};
    Reaction.Type={Off,Off};
  };
  
  
};//left




