/* Definition of Driver for the segments in the lumbar spine. From PelvisL5 to T12L1

Mark de Zee
*/

AnyFolder &RefHM = Main.HumanModel.BodyModel;

AnyFolder Joints={
  AnyRevoluteJoint GroundPelvisJnt = {
    Axis = z;
    AnyRefNode &GroundNode = Main.Model.EnvironmentModel.GlobalRef.GroundNode;
    AnyRefNode &PelvisNode = ..RefHM.Trunk.SegmentsLumbar.PelvisSeg.GroundPelvisJntNode;
  };
};


AnyFolder DriversLumbar = {
  
  AnyKinEqSimpleDriver GroundPelvisJntDriver = {
    AnyRevoluteJoint &GroundPelvisJoint = ..Joints.GroundPelvisJnt;
    DriverPos = {0.0*pi};
    DriverVel = {0.0};
    Reaction.Type = {On};
  };
  
  //Thorax pelvis rotation driver
  AnyKinEqSimpleDriver PostureDriver ={
    AnyKinMeasureOrg &Ref2 = ..RefHM.Interface.Trunk.PelvisThoraxLateralBending;        
    AnyKinMeasureOrg &Ref3 = ..RefHM.Interface.Trunk.PelvisThoraxRotation;   
    AnyKinMeasureOrg &Ref1 = ..RefHM.Interface.Trunk.PelvisThoraxExtension;
    
    DriverPos = pi/180*{0.0,0.0,0.0};
    DriverVel = pi/180*{0.0,0.0,0.0};
    Reaction.Type = {Off,Off,Off};  
  };
  

/// These reaction forces are supporting the lumbar spine.
/// This is necessary, because there are no muscles.
  AnyReacForce SacrumPelvisReaction = {
    AnyJoint &u2 = ..RefHM.Trunk.JointsLumbar.L5SacrumJnt;
    AnyJoint &u3 = ..RefHM.Trunk.JointsLumbar.L4L5Jnt;
    AnyJoint &u4 = ..RefHM.Trunk.JointsLumbar.L3L4Jnt;
    AnyJoint &u5 = ..RefHM.Trunk.JointsLumbar.L2L3Jnt;
    AnyJoint &u6 = ..RefHM.Trunk.JointsLumbar.L1L2Jnt;
    AnyJoint &u7 = ..RefHM.Trunk.JointsLumbar.T12L1Jnt;
  };
    
};

AnyFolder DriversCervical = {
  
  AnyKinRotational SkullThoraxRotMeasure = {
    AnyRefFrame &Skull = ..RefHM.Trunk.SegmentsThorax.SkullSeg; 
    AnyRefFrame &Thorax = ..RefHM.Trunk.SegmentsThorax.ThoraxSeg;  
    Type = RotVector;
    AngVelOnOff = On;
  };  
  
  AnyFolder Flexion = {
    
    AnyKinMeasureOrg C3C2JntFlexion  = {
      MeasureOrganizer = {2};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.C3C2Jnt;
    };  
    
    AnyKinMeasureOrg C4C3JntFlexion  = {
      MeasureOrganizer = {2};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.C4C3Jnt;
    };  
    
    AnyKinMeasureOrg C5C4JntFlexion  = {
      MeasureOrganizer = {2};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.C5C4Jnt;
    };  
    
    AnyKinMeasureOrg C6C5JntFlexion  = {
      MeasureOrganizer = {2};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.C6C5Jnt;
    };  
    
    AnyKinMeasureOrg C7C6JntFlexion  = {
      MeasureOrganizer = {2};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.C7C6Jnt;
    };  
    
    AnyKinMeasureOrg T1C7JntFlexion  = {
      MeasureOrganizer = {2};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.T1C7Jnt;
    };  
    
    AnyKinEqSimpleDriver CervicalFlexionRhythmDrv = {
      
      AnyKinMeasureLinComb Measure = {
        
        AnyKinMeasure &u0 = ..SkullThoraxFlexion;
        AnyKinMeasure &u1 = ....RefHM.Trunk.JointsCervicalSpine.C1C0Jnt;
        AnyKinMeasure &u2 = ..C3C2JntFlexion;
        AnyKinMeasure &u3 = ..C4C3JntFlexion;
        AnyKinMeasure &u4 = ..C5C4JntFlexion;
        AnyKinMeasure &u5 = ..C6C5JntFlexion;
        AnyKinMeasure &u6 = ..C7C6JntFlexion;
        AnyKinMeasure &u7 = ..T1C7JntFlexion;
        Const = {0, 0, 0, 0, 0, 0};
        Coef = {
          {40/122, 1, 0, 0, 0, 0, 0, 0},
          {0, 0, 1, -1, 0, 0,  0,  0},
          {0, 0, 0, 1, -1, 0,  0,  0},
          {0, 0, 0, 0, 1, -1,  0,  0},
          {0, 0, 0, 0, 0,  1, -1,  0},
          {0, 0, 0, 0, 0,  0,  1, -1}};
        
      }; // Measure
      
      DriverPos = {0, 0, 0, 0, 0, 0};
      DriverVel = {0, 0, 0, 0, 0, 0};
      Reaction.Type = {Off,Off,Off, Off,Off,Off};
      
    }; // CervicalFlexionRhythmDrv
    
    AnyKinMeasureOrg SkullThoraxFlexion  = {
      MeasureOrganizer = {2};
      AnyKinMeasure &ref = ..SkullThoraxRotMeasure;
    };
    
    AnyKinEqSimpleDriver SkullThoraxFlexionDriver ={
      AnyKinMeasureOrg &Ref = .SkullThoraxFlexion;              
      DriverPos = pi/180*{0.0};
      DriverVel = pi/180*{0.0};
      Reaction.Type = {Off};  
    };  
    
  };
  
  
  AnyFolder LateralBending = {
    
    AnyKinMeasureOrg C3C2JntLateralBending  = {
      MeasureOrganizer = {0};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.C3C2Jnt;
    };  
    
    AnyKinMeasureOrg C4C3JntLateralBending  = {
      MeasureOrganizer = {0};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.C4C3Jnt;
    };  
    
    AnyKinMeasureOrg C5C4JntLateralBending  = {
      MeasureOrganizer = {0};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.C5C4Jnt;
    };  
    
    AnyKinMeasureOrg C6C5JntLateralBending  = {
      MeasureOrganizer = {0};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.C6C5Jnt;
    };  
    
    AnyKinMeasureOrg C7C6JntLateralBending  = {
      MeasureOrganizer = {0};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.C7C6Jnt;
    };  
    
    AnyKinMeasureOrg T1C7JntLateralBending  = {
      MeasureOrganizer = {0};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.T1C7Jnt;
    };  
    
    AnyKinEqSimpleDriver CervicalLateralBendingRhythmDrv = {
      
      AnyKinMeasureLinComb Measure = {
        
        AnyKinMeasure &u2 = ..C3C2JntLateralBending;
        AnyKinMeasure &u3 = ..C4C3JntLateralBending;
        AnyKinMeasure &u4 = ..C5C4JntLateralBending;
        AnyKinMeasure &u5 = ..C6C5JntLateralBending;
        AnyKinMeasure &u6 = ..C7C6JntLateralBending;
        AnyKinMeasure &u7 = ..T1C7JntLateralBending;
        Const = {0, 0, 0, 0, 0};
        Coef = {
          {1, -1, 0, 0,  0,  0},
          {0, 1, -1, 0,  0,  0},
          {0, 0, 1, -1,  0,  0},
          {0, 0, 0,  1, -1,  0},
          {0, 0, 0,  0,  1, -1}};
        
      }; // Measure
      
      DriverPos = {0, 0, 0, 0, 0};
      DriverVel = {0, 0, 0, 0, 0};
      Reaction.Type = {Off,Off,Off, Off,Off};
      
    }; // CervicalLateralBendingRhythmDrv
    
    AnyKinMeasureOrg SkullThoraxLateralBending  = {
      MeasureOrganizer = {0};
      AnyKinMeasure &ref = ..SkullThoraxRotMeasure;
    };
    
    AnyKinEqSimpleDriver SkullThoraxLateralBendingDriver ={
      AnyKinMeasureOrg &Ref = .SkullThoraxLateralBending;              
      DriverPos = pi/180*{0.0};
      DriverVel = pi/180*{0.0};
      Reaction.Type = {Off};  
    };  
    
  };
  
  AnyFolder Rotation = {
    
    AnyKinMeasureOrg C3C2JntRotation  = {
      MeasureOrganizer = {1};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.C3C2Jnt;
    };  
    
    AnyKinMeasureOrg C4C3JntRotation  = {
      MeasureOrganizer = {1};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.C4C3Jnt;
    };  
    
    AnyKinMeasureOrg C5C4JntRotation  = {
      MeasureOrganizer = {1};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.C5C4Jnt;
    };  
    
    AnyKinMeasureOrg C6C5JntRotation  = {
      MeasureOrganizer = {1};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.C6C5Jnt;
    };  
    
    AnyKinMeasureOrg C7C6JntRotation  = {
      MeasureOrganizer = {1};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.C7C6Jnt;
    };  
    
    AnyKinMeasureOrg T1C7JntRotation  = {
      MeasureOrganizer = {1};
      AnyKinMeasure &ref = ...RefHM.Trunk.JointsCervicalSpine.T1C7Jnt;
    };  
    
    AnyKinEqSimpleDriver CervicalRotationRhythmDrv = {
      
      AnyKinMeasureLinComb Measure = {
        
        AnyKinMeasure &u0 = ..SkullThoraxRotation;
        AnyKinMeasure &u1 = ....RefHM.Trunk.JointsCervicalSpine.C2C1Jnt;
        AnyKinMeasure &u2 = ..C3C2JntRotation;
        AnyKinMeasure &u3 = ..C4C3JntRotation;
        AnyKinMeasure &u4 = ..C5C4JntRotation;
        AnyKinMeasure &u5 = ..C6C5JntRotation;
        AnyKinMeasure &u6 = ..C7C6JntRotation;
        AnyKinMeasure &u7 = ..T1C7JntRotation;
        Const = {0, 0, 0, 0, 0, 0};
        Coef = {
          {77/132, 1, 0, 0, 0, 0, 0, 0},
          {0, 0, 1, -1, 0, 0,  0,  0},
          {0, 0, 0, 1, -1, 0,  0,  0},
          {0, 0, 0, 0, 1, -1,  0,  0},
          {0, 0, 0, 0, 0,  1, -1,  0},
          {0, 0, 0, 0, 0,  0,  1, -1}};
        
      }; // Measure
      
      DriverPos = {0, 0, 0, 0, 0, 0};
      DriverVel = {0, 0, 0, 0, 0, 0};
      Reaction.Type = {Off,Off,Off, Off,Off,Off};
      
    }; // CervicalRotationRhythmDrv
    
    AnyKinMeasureOrg SkullThoraxRotation  = {
      MeasureOrganizer = {1};
      AnyKinMeasure &ref = ..SkullThoraxRotMeasure;
    };
    
    AnyKinEqSimpleDriver SkullThoraxRotationDriver ={
      AnyKinMeasureOrg &Ref = .SkullThoraxRotation;              
      DriverPos = pi/180*{0.0};
      DriverVel = pi/180*{0.0};
      Reaction.Type = {Off};  
    };  
    
  };
  
};

AnyFolder DriversArms={
  
  // Aliases for convenient referencing
  AnyFolder &JntPos=..Mannequin.Posture;  
  AnyFolder &JntVel=..Mannequin.PostureVel;  
  
  
  //Sterno clavicular joint driver
  AnyKinEqSimpleDriver SCDriverRight ={
    AnyKinMeasureOrg &ref1 =..RefHM.Interface.Right.SternoClavicularProtraction;
    AnyKinMeasureOrg &ref2 =..RefHM.Interface.Right.SternoClavicularElevation;
    AnyKinMeasureOrg &ref3 =..RefHM.Interface.Right.SternoClavicularAxialRotation;
    DriverPos = pi/180*{
      .JntPos.Right.SternoClavicularProtraction,
      .JntPos.Right.SternoClavicularElevation,
      .JntPos.Right.SternoClavicularAxialRotation
    };
    DriverVel = {
      .JntVel.Right.SternoClavicularProtraction,
      .JntVel.Right.SternoClavicularElevation,
      .JntVel.Right.SternoClavicularAxialRotation
    };
    //Reaction.Type={Off,Off,Off};
    Reaction.Type={On,On,On};
  };
  
  
  //Glenohumeral joint 
  AnyKinEqSimpleDriver GHDriverRight={
    AnyKinMeasureOrg &ref1 =..RefHM.Interface.Right.GlenohumeralAbduction;
    AnyKinMeasureOrg &ref2 =..RefHM.Interface.Right.GlenohumeralFlexion;
    AnyKinMeasureOrg &ref3 =..RefHM.Interface.Right.GlenohumeralExternalRotation;
    
    DriverPos=pi/180*{
      .JntPos.Right.GlenohumeralAbduction,  //GH joint
      .JntPos.Right.GlenohumeralFlexion,  //GH joint
      .JntPos.Right.GlenohumeralExternalRotation  //GH joint
    };
    DriverVel = pi/180*{
      .JntVel.Right.GlenohumeralAbduction,  //GH joint
      .JntVel.Right.GlenohumeralFlexion,  //GH joint
      .JntVel.Right.GlenohumeralExternalRotation  //GH joint
    };    
    //Reaction.Type={Off,Off,Off};
    Reaction.Type={On,On,On};
  };
  
  
  //Elbow flexion driver  
  AnyKinEqSimpleDriver ElbowFlexionDriverRight={
    AnyKinMeasureOrg  &Elbow =..RefHM.Interface.Right.ElbowFlexion;
    DriverPos=pi/180*{.JntPos.Right.ElbowFlexion};  
    DriverVel = pi/180*{.JntVel.Right.ElbowFlexion};  
    Reaction.Type={On};
  };
  
  //Elbow pronation driver
  AnyKinEqSimpleDriver ElbowPronationDriverRight={
    AnyKinMeasureOrg &Elbow =..RefHM.Interface.Right.ElbowPronation;
    DriverPos = pi/180*{.JntPos.Right.ElbowPronation };  
    
    DriverVel=pi/180*{.JntVel.Right.ElbowPronation };  
    Reaction.Type={On};
  };
  
  //Wrist driver 
  AnyKinEqSimpleDriver WristDriverRight ={
    AnyKinMeasureOrg &ref1 =..RefHM.Interface.Right.WristFlexion;
    AnyKinMeasureOrg &ref2 =..RefHM.Interface.Right.WristAbduction;
    DriverPos = pi/180*{
      .JntPos.Right.WristFlexion,
      .JntPos.Right.WristAbduction
    };
    
    DriverVel = pi/180*{
      .JntVel.Right.WristFlexion,
      .JntVel.Right.WristAbduction};
    Reaction.Type={On,On};
  };
  
  
  //Sterno clavicular joint driver
  AnyKinEqSimpleDriver SCDriverLeft ={
    AnyKinMeasureOrg &ref1 =..RefHM.Interface.Left.SternoClavicularProtraction;
    AnyKinMeasureOrg &ref2 =..RefHM.Interface.Left.SternoClavicularElevation;
    AnyKinMeasureOrg &ref3 =..RefHM.Interface.Left.SternoClavicularAxialRotation;
    DriverPos = pi/180*{
      .JntPos.Left.SternoClavicularProtraction,
      .JntPos.Left.SternoClavicularElevation,
      .JntPos.Left.SternoClavicularAxialRotation
    };
    DriverVel = {
      .JntVel.Left.SternoClavicularProtraction,
      .JntVel.Left.SternoClavicularElevation,
      .JntVel.Left.SternoClavicularAxialRotation
    };
    //Reaction.Type={Off,Off,Off};
    Reaction.Type={On,On,On};
  };
  
  
  //Glenohumeral joint 
  AnyKinEqSimpleDriver GHDriverLeft={
    AnyKinMeasureOrg &ref1 =..RefHM.Interface.Left.GlenohumeralAbduction;
    AnyKinMeasureOrg &ref2 =..RefHM.Interface.Left.GlenohumeralFlexion;
    AnyKinMeasureOrg &ref3 =..RefHM.Interface.Left.GlenohumeralExternalRotation;
    
    DriverPos=pi/180*{
      .JntPos.Left.GlenohumeralAbduction,  //GH joint
      .JntPos.Left.GlenohumeralFlexion,  //GH joint
      .JntPos.Left.GlenohumeralExternalRotation  //GH joint
    };
    DriverVel = pi/180*{
      .JntVel.Left.GlenohumeralAbduction,  //GH joint
      .JntVel.Left.GlenohumeralFlexion,  //GH joint
      .JntVel.Left.GlenohumeralExternalRotation  //GH joint
    };    
    //Reaction.Type={Off,Off,Off};
    Reaction.Type={On,On,On};
  };
  
  
  //Elbow flexion driver  
  AnyKinEqSimpleDriver ElbowFlexionDriverLeft={
    AnyKinMeasureOrg  &Elbow =..RefHM.Interface.Left.ElbowFlexion;
    DriverPos=pi/180*{.JntPos.Left.ElbowFlexion};  
    DriverVel = pi/180*{.JntVel.Left.ElbowFlexion};  
    Reaction.Type={On};
  };
  
  //Elbow pronation driver
  AnyKinEqSimpleDriver ElbowPronationDriverLeft={
    AnyKinMeasureOrg &Elbow =..RefHM.Interface.Left.ElbowPronation;
    DriverPos = pi/180*{.JntPos.Left.ElbowPronation };  
    
    DriverVel=pi/180*{.JntVel.Left.ElbowPronation };  
    Reaction.Type={On};
  };
  
  //Wrist driver 
  AnyKinEqSimpleDriver WristDriverLeft ={
    AnyKinMeasureOrg &ref1 =..RefHM.Interface.Left.WristFlexion;
    AnyKinMeasureOrg &ref2 =..RefHM.Interface.Left.WristAbduction;
    DriverPos = pi/180*{
      .JntPos.Left.WristFlexion,
      .JntPos.Left.WristAbduction
    };
    
    DriverVel = pi/180*{
      .JntVel.Left.WristFlexion,
      .JntVel.Left.WristAbduction};
    Reaction.Type={On,On};
  };
  
  
};
