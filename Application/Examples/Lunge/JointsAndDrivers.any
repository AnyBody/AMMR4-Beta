/** This folder contains the drivers for the model. The model is driven
using joint angles whose movements are determined by an external
optimization process that has fitted the joint angles as well as possible
to the measured marker trajectories.*/
AnyFolder JointsAndDrivers = {
  
  AnyFixedRefFrame GlobalRef = {
    Origin = {0,0,0};
  };
  
  // Aliases for convenient referencing
  AnyFolder &JntPos=..Mannequin.Posture;  
  AnyFolder &JntVel=..Mannequin.PostureVel;  
  
  //Neck driver 
  AnyKinEqSimpleDriver NeckJntDriver = {
    AnyRevoluteJoint &T12L1Joint = ....HumanModel.BodyModel.Interface.Trunk.NeckJoint;
    DriverPos = pi/180*{.JntPos.NeckExtension};
    DriverVel = pi/180*{.JntVel.NeckExtension};
    Reaction.Type = {Off};
  };
  
  //Thorax pelvis rotation driver
  AnyKinEqSimpleDriver PostureDriver ={
    AnyKinMeasureOrg &Ref2 = ...HumanModel.Interface.Trunk.PelvisThoraxLateralBending;        
    AnyKinMeasureOrg &Ref3 = ...HumanModel.Interface.Trunk.PelvisThoraxRotation;   
    AnyKinMeasureOrg &Ref1 = ...HumanModel.Interface.Trunk.PelvisThoraxExtension;
   
    DriverPos = pi/180*{
          .JntPos.PelvisThoraxLateralBending,
      .JntPos.PelvisThoraxRotation,
      .JntPos.PelvisThoraxExtension
    };
    DriverVel = pi/180*{
      .JntVel.PelvisThoraxLateralBending,
      .JntVel.PelvisThoraxRotation,
      .JntVel.PelvisThoraxExtension
    };
    Reaction.Type = {Off,Off,Off};  
  };  
  
  /// Models loaded by measured GRFs must be balanced by a boundary
  /// condition where the body ends, in this case at the pelvis.
  AnyReacForce PelvisGroundReaction={
    AnyKinMeasureOrg meas1 = { 
      AnyKinLinear Lin = {
        AnyFixedRefFrame &ref1 =...GlobalRef;
        AnySeg &ref2 = Main.Model.HumanModel.Trunk.SegmentsLumbar.PelvisSeg;
      };
      MeasureOrganizer = {0,1,2}; 
    };
    AnyKinRotational Rot={
      AnyFixedRefFrame &ref1 =..GlobalRef;
      AnySeg &ref2 = Main.Model.HumanModel.Trunk.SegmentsLumbar.PelvisSeg;
      Type=RotVector;
    };
  };
  
  /// This measure organizer collects joint degrees of freedom to be driven
  /// by the optimized joint angles variations
  AnyKinMeasureOrg JointMeasures = {
    AnyKinLinear PelvisLin = {
      //Ref = -1;
      AnyRefFrame &ref1 = Main.Model.Environment.GlobalRef;
      AnySeg &ref2 = Main.Model.HumanModel.Trunk.SegmentsLumbar.PelvisSeg;
    };
    
    AnyKinRotational PelvisRot = {
      Type = RotAxesAngles;
      AnyRefFrame &ref1 = Main.Model.Environment.GlobalRef;
      AnySeg &ref2 = Main.Model.HumanModel.Trunk.SegmentsLumbar.PelvisSeg;
    };
    
    AnyKinRotational LeftHip = {
      Type = RotAxesAngles;
      AnyRefFrame &ref1 = Main.Model.HumanModel.Trunk.SegmentsLumbar.PelvisSeg.HipJointLeft;
      AnyRefFrame &ref2 = Main.Model.HumanModel.Left.Leg.Seg.Thigh.HipJoint;
    };
    
    AnyRevoluteJoint &LeftKnee = Main.Model.HumanModel.Left.Leg.Jnt.Knee;
    AnyUniversalJoint &LeftAnkle = Main.Model.HumanModel.Left.Leg.Jnt.Ankle;
    
    AnyKinRotational RightHip = {
      Type = RotAxesAngles;
      AnyRefFrame &ref1 = Main.Model.HumanModel.Trunk.SegmentsLumbar.PelvisSeg.HipJointRight;
      AnyRefFrame &ref2 = Main.Model.HumanModel.Right.Leg.Seg.Thigh.HipJoint;
    };
    
    AnyRevoluteJoint &RightKnee = Main.Model.HumanModel.Right.Leg.Jnt.Knee;
    AnyUniversalJoint &RightAnkle = Main.Model.HumanModel.Right.Leg.Jnt.Ankle;
  };
  
  /// This driver uses the optimized joint angles to move the model.
  AnyKinEqInterPolDriver Jntdriver = {
    Type = Bspline;
    BsplineOrder = 4;
    FileName = "output-euler.txt";
    AnyKinMeasureOrg &meas = .JointMeasures;
    Reaction.Type={Off,Off,Off,Off,Off,Off,Off,Off,Off,Off,Off,Off,Off,Off,Off,Off,Off,Off};
  };
};


