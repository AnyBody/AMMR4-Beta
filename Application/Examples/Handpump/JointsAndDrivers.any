/**The kinematics is based on the standing model:
- The two feet are constrained forward/backward and vertically (x & y)
- The pelvis is controlled laterally (z)
- The CoM is constrained forward/backward and laterally above the origin.

The remaining degrees of freedom (with the exception of a few shoulder
movements) are controlled by parameters in the mannequin.any file.

The forces defined in the mannequin.any file are attached to the body
locations at the bottom of this file.*/
AnyFolder Joints = {
  AnySphericalJoint rhHandle = {
    AnyRefFrame &Glove = Main.Model.HumanModel.Right.ShoulderArm.Seg.Glove;
    AnyRefFrame &Handle = Main.Model.EnvironmentModel.Wheel.rHandle;
  };
  
  AnySphericalJoint lhHandle = {
    AnyRefFrame &Glove = Main.Model.HumanModel.Left.ShoulderArm.Seg.Glove;
    AnyRefFrame &Handle = Main.Model.EnvironmentModel.Wheel.lHandle;
  };  
};

AnyFolder Drivers = {
  
  // Aliases for convenient referencing
  AnyFolder &JntPos=..Mannequin.Posture;  
  AnyFolder &Thorax = ..HumanModel.Trunk.SegmentsThorax.ThoraxSeg;
  AnyFolder &LegR = ..HumanModel.Right.Leg;
  AnyFolder &LegL = ..HumanModel.Left.Leg;
  
  /// Place the right toe on the ground
  AnyKinEqSimpleDriver RToeGroundConstraint = {
    AnyKinLinear ToePos = {
      AnyFixedRefFrame &Ground = Main.Model.EnvironmentModel.GlobalRef;
      AnyRefNode &Ball = Main.Model.HumanModel.Right.Leg.Seg.Foot.ToeJoint;
    };
    MeasureOrganizer = {1};  // Only the y coordinate
    DriverPos = {0.0};
    DriverVel = {0};
    Reaction.Type = {Off};   // Provide ground reaction forces
  };
  
  /// Place the right heel on the ground
  AnyKinEqSimpleDriver RHeelGroundConstraint ={
    AnyKinLinear HeelPos = {
      AnyFixedRefFrame &Ground = Main.Model.EnvironmentModel.GlobalRef;
      AnyRefNode &Ball = Main.Model.HumanModel.Right.Leg.Seg.Foot.HeelJoint;
    };
    MeasureOrganizer = {1};  // Only the y coordinate
    DriverPos = {0.0};
    DriverVel = {0};
    Reaction.Type = {Off};   // Provide ground reaction forces
  };
  
  /// Place the left toe on the ground
  AnyKinEqSimpleDriver LToeGroundConstraint = {
    AnyKinLinear ToePos = {
      AnyFixedRefFrame &Ground = Main.Model.EnvironmentModel.GlobalRef;
      AnyRefNode &Ball = Main.Model.HumanModel.Left.Leg.Seg.Foot.ToeJoint;
    };
    MeasureOrganizer = {1};  // Only the y coordinate
    DriverPos = {0.0};
    DriverVel = {0};
    Reaction.Type = {Off};  // Provide ground reaction
    
  };
  
  /// Place the left heel on the ground
  AnyKinEqSimpleDriver LHeelGroundConstraint ={
    AnyKinLinear HeelPos = {
      AnyFixedRefFrame &Ground = Main.Model.EnvironmentModel.GlobalRef;
      AnyRefNode &Ball = Main.Model.HumanModel.Left.Leg.Seg.Foot.HeelJoint;
    };
    MeasureOrganizer = {1};  // Only the y coordinate
    DriverPos = {0.0};
    DriverVel = {0};
    Reaction.Type = {Off};  // Provide ground reaction
  };
  
  /// Position the right Ankle right above the z axis
  AnyKinEqSimpleDriver RAnkleX = {
    AnyKinLinear AnklePos = {
      AnyFixedRefFrame &Ground = Main.Model.EnvironmentModel.GlobalRef;
      AnyRefNode &Ankle = ..LegR.Seg.Foot.AnkleJoint;
    };
    MeasureOrganizer = {0};  // Only the x coordinate
    DriverPos = {0.0};
    DriverVel = {0.0};
    Reaction.Type = {Off};
  };
  
  /// Position the left Ankle right above the z axis
  AnyKinEqSimpleDriver LAnkleX ={
    AnyKinLinear AnklePos = {
      AnyFixedRefFrame &Ground = Main.Model.EnvironmentModel.GlobalRef;
      AnyRefNode &Ankle = ..LegL.Seg.Foot.AnkleJoint;
    };
    MeasureOrganizer = {0};  // Only the x coordinate
    DriverPos = {0.0};
    DriverVel = {0.0};
    Reaction.Type = {Off};
  };
  
  /// Constraint of the collective CoM to be right above the GlobalRef
  AnyKinEqSimpleDriver CoMDriver = {
    AnyKinCoM CoM = {
      AnyFolder &Body = Main.Model.HumanModel;
    };
    MeasureOrganizer = {0,2};  // Only the x and z directions
    DriverPos = {0,0};
    DriverVel = {0,0};
    Reaction.Type = {Off,Off};
  };  
  
  AnyFolder &RefHM = Main.Model.HumanModel;
  
  AnyFolder &ref=Main.Model.HumanModel.Trunk;
  
  // ************************************
  //Drivers for the spine
  // ************************************
  
  /// Neck driver 
  AnyKinEqSimpleDriver NeckJntDriver = {
    AnyRevoluteJoint &T12L1Joint = ...HumanModel.Interface.Trunk.NeckJoint;
    DriverPos = pi/180*{.JntPos.NeckExtension};
    DriverVel = {0};
    Reaction.Type = {Off};
  };
  
  /// Thorax pelvis rotation driver
  AnyKinEqSimpleDriver PostureDriver ={
    AnyKinMeasureOrg &Ref2 = ...HumanModel.Interface.Trunk.PelvisThoraxLateralBending;        
    AnyKinMeasureOrg &Ref3 = ...HumanModel.Interface.Trunk.PelvisThoraxRotation;   
    AnyKinMeasureOrg &Ref1 = ...HumanModel.Interface.Trunk.PelvisThoraxExtension;
    
    DriverPos = pi/180*{
      .JntPos.PelvisThoraxLateralBending,
      .JntPos.PelvisThoraxRotation,
      .JntPos.PelvisThoraxExtension
    };
    // This is static posture, so all velocities are zero.
    DriverVel = pi/180*{0.0,0.0,0.0};
    Reaction.Type = {Off,Off,Off};  
  };  
  
  
  
  // ************************************
  // Drivers for the right arm
  // ************************************
  
  /// Sterno-clavicular joint driver
  AnyKinEqSimpleDriver SCDriverRight ={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Right.SternoClavicularProtraction;
    AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Right.SternoClavicularElevation;
    AnyKinMeasureOrg &ref3 =...HumanModel.Interface.Right.SternoClavicularAxialRotation;
    DriverPos = pi/180*{
      .JntPos.Right.SternoClavicularProtraction,
      .JntPos.Right.SternoClavicularElevation,
      .JntPos.Right.SternoClavicularAxialRotation
    };
    DriverVel = {0.0,0.0,0};
    Reaction.Type={Off,Off,Off};
  };
  
  /// Glenohumeral joint driver. Flexion and rotation are controlled not by this
  /// driver but by the hands' contact to the handles.
  AnyKinEqSimpleDriver GHDriverRight={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Right.GlenohumeralAbduction;
    DriverPos = pi/180*{
      .JntPos.Right.GlenohumeralAbduction  //GH joint
    };    
    DriverVel={0};
    Reaction.Type={Off};
  };
    
  /// Elbow pronation driver
  AnyKinEqSimpleDriver ElbowPSDriverRight={
    AnyKinMeasureOrg &Elbow =...HumanModel.Interface.Right.ElbowPronation;
    DriverPos = pi/180*{.JntPos.Right.ElbowPronation };  
    DriverVel={0.0};
    Reaction.Type={Off};
  };
  
  /// Wrist driver 
  AnyKinEqSimpleDriver WristDriverRight ={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Right.WristFlexion;
    AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Right.WristAbduction;
    DriverPos = pi/180*{
      .JntPos.Right.WristFlexion,
      .JntPos.Right.WristAbduction};
    DriverVel = {0,0};
    Reaction.Type={Off,Off};
  };
  
  // ************************************
  // Drivers for the left arm
  // ************************************
  
  ///Sterno-clavicular joint driver
  AnyKinEqSimpleDriver SCDriverLeft ={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Left.SternoClavicularProtraction;
    AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Left.SternoClavicularElevation;
    AnyKinMeasureOrg &ref3 =...HumanModel.Interface.Left.SternoClavicularAxialRotation;
    
    DriverPos = pi/180*{
      .JntPos.Left.SternoClavicularProtraction,
      .JntPos.Left.SternoClavicularElevation,
      .JntPos.Left.SternoClavicularAxialRotation
    };    
    DriverVel = {0.0,0.0,0};
    Reaction.Type={Off,Off,Off};
  };
  
  /// Glenohumeral joint driver. Flexion and rotation are controlled not by this
  /// driver but by the hands' contact to the handles.
  AnyKinEqSimpleDriver GHDriverLeft={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Left.GlenohumeralAbduction;
    DriverPos = pi/180*{
      .JntPos.Left.GlenohumeralAbduction  //GH joint
    };    
    DriverVel={0};
    Reaction.Type={Off};
  };
    
  ///Elbow pronation driver 
  AnyKinEqSimpleDriver ElbowPDriverLeft={
    AnyKinMeasureOrg &Elbow =...HumanModel.Interface.Left.ElbowPronation;
    DriverPos = pi/180*{.JntPos.Left.ElbowPronation };  
    DriverVel={0.0};
    Reaction.Type={Off};
  };
  ///Wrist driver
  AnyKinEqSimpleDriver WristDriverLeft ={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Left.WristFlexion;
    AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Left.WristAbduction;
    DriverPos = pi/180*{
      .JntPos.Left.WristFlexion,
      .JntPos.Left.WristAbduction};
    
    DriverVel = pi/180*{0,0};
    Reaction.Type={Off,Off};
  };
  
  
  // ************************************
  // Drivers for the right leg
  // ************************************
  
  ///Hip driver 
  AnyKinEqSimpleDriver HipDriverRight={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Right.HipFlexion;
    AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Right.HipExternalRotation;
    AnyKinMeasureOrg &ref3 =...HumanModel.Interface.Right.HipAbduction;
    DriverPos = pi/180*{
      .JntPos.Right.HipFlexion,
      .JntPos.Right.HipExternalRotation,
      .JntPos.Right.HipAbduction
    };    
    DriverVel={0,0,0};
    Reaction.Type={Off,Off,Off};
    
  };
  
  ///Knee driver
  AnyKinEqSimpleDriver KneeDriverRight={
    AnyKinMeasureOrg  &Knee = ...HumanModel.Interface.Right.KneeFlexion;
    DriverPos = pi/180*{.JntPos.Right.KneeFlexion};  
    DriverVel={0.0};
    Reaction.Type={Off};
  };
  
  ///Ankle driver
  AnyKinEqSimpleDriver AnkleDriverRight={
    AnyKinMeasureOrg &ref2=...HumanModel.Interface.Right.AnkleEversion;
    DriverPos = pi/180*{ .JntPos.Right.AnkleEversion};  
    DriverVel={0.0};
    Reaction.Type={Off};
  };
  
  
  // ************************************
  // Drivers for the Left leg
  // ************************************
  
  ///Left hip driver
  AnyKinEqSimpleDriver HipDriverLeft={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Left.HipFlexion;
    AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Left.HipExternalRotation;
    AnyKinMeasureOrg &ref3 =...HumanModel.Interface.Left.HipAbduction;
    DriverPos = pi/180*{
      .JntPos.Left.HipFlexion,
      .JntPos.Left.HipExternalRotation,
      .JntPos.Left.HipAbduction
    };    
    DriverVel={0,0,0};
    Reaction.Type={Off,Off,Off};
  };
  
  ///Knee driver
  AnyKinEqSimpleDriver KneeDriverLeft={
    AnyKinMeasureOrg &Knee =...HumanModel.Interface.Left.KneeFlexion;
    DriverPos = pi/180*{      .JntPos.Left.KneeFlexion   };  
    DriverVel={0.0};
    Reaction.Type={Off};
  };
  
  ///Ankle driver
  AnyKinEqSimpleDriver AnkleDriverLeft={
    AnyKinMeasureOrg &ref1=...HumanModel.Interface.Left.AnklePlantarFlexion;
    AnyKinMeasureOrg &ref2=...HumanModel.Interface.Left.AnkleEversion;
    MeasureOrganizer={1};
    //DriverPos = pi/180*{.JntPos.Left.AnklePlantarFlexion,.JntPos.Left.AnkleEversion};  
    DriverPos = pi/180*{.JntPos.Left.AnkleEversion};  
    
    DriverVel={0.0};
    Reaction.Type={Off};
  };
  
  /// Reaction forces below the right foot. It is supported
  /// regardless of its position.
  AnyReacForce RightFootReaction = {
    AnyKinRotational rot = {
      AnySeg &ref1=..LegR.Seg.Foot;
      AnyFixedRefFrame &ref2 = ....EnvironmentModel.GlobalRef;
      Type = RotVector;
      AngVelOnOff = On;
    };  
    
    AnyKinLinear RightFootLinMeasure = {
      AnySeg &ref1=..LegR.Seg.Foot;
      AnyFixedRefFrame &ref2 = ....EnvironmentModel.GlobalRef;  
    };
  };
  
  /// Reaction forces below the left foot. It is supported
  /// regardless of its position.
  AnyReacForce LeftFootReaction = {    
    AnyKinLinear LeftFootLinMeasure = {
      AnySeg &ref1=..LegL.Seg.Foot;
      AnyFixedRefFrame &ref2 = ....EnvironmentModel.GlobalRef;
    };
    AnyKinRotational LeftFootRotMeasure = {
      AnySeg &ref1=..LegL.Seg.Foot;
      AnyFixedRefFrame &ref2 = ....EnvironmentModel.GlobalRef;
      Type = RotVector;
      AngVelOnOff = On;
    };  
  };
  
};//Drivers

// ---------------------------------
// Loads from the Mannequin.any file
// ---------------------------------
AnyFolder MannequinLoads = {
  AnyFolder &hm = Main.Model.HumanModel;  // For easy reference
  AnyFolder &mql = Main.Model.Mannequin.Load;
  
  AnyForce3D TopVertebra = {
    AnyRefNode &ApplPoint = .hm.Trunk.SegmentsThorax.ThoraxSeg.C1HatNode;
    F = .mql.TopVertebra;
  };
  
  AnyFolder Right = {
    AnyFolder &rhm = .hm.Right;
    AnyFolder &locmql = .mql.Right;
    
    AnyForce3D Shoulder = {
      AnyRefNode &ApplPoint = .rhm.ShoulderArm.Seg.Humerus.gh;
      F = .locmql.Shoulder;
    };
    
    AnyForce3D Elbow = {
      AnyRefNode &ApplPoint = .rhm.ShoulderArm.Seg.Humerus.fe;
      F = .locmql.Elbow;
    };
    
    AnyForce3D Hand = {
      AnyRefNode &ApplPoint = .rhm.ShoulderArm.Seg.Hand.PalmJoint;
      //      F = .locmql.Hand*t;
      F = .locmql.Hand;
    };
    
    AnyForce3D Hip = {
      AnyRefNode &ApplPoint = .rhm.Leg.Seg.Thigh.HipJoint;
      F = .locmql.Hip;
    };
    
    AnyForce3D Knee = {
      AnyRefNode &ApplPoint = .rhm.Leg.Seg.Thigh.KneeJoint;
      F = .locmql.Knee;
    };
    
    AnyForce3D Ankle = {
      AnyRefNode &ApplPoint = .rhm.Leg.Seg.Foot.AnkleJoint;
      F = .locmql.Ankle;
    };    
  };  // Right
  
  AnyFolder Left = {
    AnyFolder &lhm = .hm.Left;
    AnyFolder &locmql = .mql.Left;
    
    AnyForce3D Shoulder = {
      AnyRefNode &ApplPoint = .lhm.ShoulderArm.Seg.Humerus.gh;
      F = .locmql.Shoulder;
    };
    
    AnyForce3D Elbow = {
      AnyRefNode &ApplPoint = .lhm.ShoulderArm.Seg.Humerus.fe;
      F = .locmql.Elbow;
    };
    
    AnyForce3D Hand = {
      AnyRefNode &ApplPoint = .lhm.ShoulderArm.Seg.Hand.PalmJoint;
      //      F = .locmql.Hand*t;
      F = .locmql.Hand;
    };
    
    AnyForce3D Hip = {
      AnyRefNode &ApplPoint = .lhm.Leg.Seg.Thigh.HipJoint;
      F = .locmql.Hip;
    };
    
    AnyForce3D Knee = {
      AnyRefNode &ApplPoint = .lhm.Leg.Seg.Thigh.KneeJoint;
      F = .locmql.Knee;
    };
    
    AnyForce3D Ankle = {
      AnyRefNode &ApplPoint = .lhm.Leg.Seg.Foot.AnkleJoint;
      F = .locmql.Ankle;
    };    
  };  // Left
};

