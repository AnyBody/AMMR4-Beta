/* ----------------------------------------------------------------
Drivers for the model:

-The pelvis is locked to the ground 
-The remaining degrees of freedom are controlled by parameters in the mannequin.any file.
-This file is a good way to get an overview of the dof in the full body model
 all the dof in the body model is driven from this file.
-In total 

Soeren, March 1, 2006.
----------------------------------------------------------------  */

#if GLOBAL_DRIVER_SWITCH == 1
  
  // ************************************
  // Drivers for attaching the pelvis to the global reference system
  // ************************************  

  #if TRUNK == 1
  
  #if PELVIS_POS_X_DRIVER == 1
  AnyKinEqSimpleDriver PelvisGroundDriverPosX ={
    AnyKinLinear lin ={
      AnyFixedRefFrame &ref1 =....EnvironmentModel.GlobalRef;
      AnySeg &ref2 =....HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg;
    };
    MeasureOrganizer = {0};
    DriverPos={.JntPos.PelvisPosX}+{LinDesVar[0]};
    DriverVel={.JntVel.PelvisPosX};
    Reaction.Type={On};
    AnyVec3 Lin ={0,0,0};
    AnyVec3 LinDesVar= DesignVar(Lin);

  };

  AnyDrawWidgetLin PelvisWidgetLinX =   {
    Visible = On;
    //Opacity = 1;
    Operation = &.Study;
    
    UpdateEvent = OnMouseRelease;
    MaxDrawSize = 0.4;
    //MinDrawSize = 0;
    RefFrame =&...EnvironmentModel.GlobalRef;
    Target = &.PelvisGroundDriverPosX.LinDesVar;
    
    AnyMat33 test=..HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg.Axes;
    RelRotMat = &test;
    
    AnyVec3 RelPosition = {.PelvisGroundDriverPosX.DriverPos[0]-.PelvisGroundDriverPosX.LinDesVar[0],.PelvisGroundDriverPosX.lin.Pos[1],.PelvisGroundDriverPosX.lin.Pos[2]};
    RelPos=&RelPosition;
    AxisOnOff = {On, Off, Off};
  };
  
  
  #else
  #endif
  
  
  #if PELVIS_POS_Y_DRIVER == 1
  AnyKinEqSimpleDriver PelvisGroundDriverPosY ={
    AnyKinLinear lin ={
      AnyFixedRefFrame &ref1 =....EnvironmentModel.GlobalRef;
      AnySeg &ref2 =....HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg;
    };
    MeasureOrganizer = {1};
    DriverPos={.JntPos.PelvisPosY}+LinDesVar[1];
    DriverVel={.JntVel.PelvisPosY};
    Reaction.Type={On};
    AnyVec3 Lin ={0,0,0};
    AnyVec3 LinDesVar= DesignVar(Lin);


  };
  
   AnyDrawWidgetLin PelvisWidgetLinY =   {
    Visible = On;
    //Opacity = 1;
    Operation = &.Study;
    
    UpdateEvent = OnMouseRelease;
    MaxDrawSize = 0.4;
    //MinDrawSize = 0;
    RefFrame =&...EnvironmentModel.GlobalRef;
    Target = &.PelvisGroundDriverPosY.LinDesVar;
    
    AnyMat33 test=..HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg.Axes;
    RelRotMat = &test;
    
    AnyVec3 RelPosition = {.PelvisGroundDriverPosY.lin.Pos[0],.PelvisGroundDriverPosY.DriverPos[0]-.PelvisGroundDriverPosY.LinDesVar[1],.PelvisGroundDriverPosY.lin.Pos[2]};
    RelPos=&RelPosition;
    AxisOnOff = {Off, On, Off};
  };

  #else
  #endif

  
  
  #if PELVIS_POS_Z_DRIVER == 1
  AnyKinEqSimpleDriver PelvisGroundDriverPosZ ={
    AnyKinLinear lin ={
      AnyFixedRefFrame &ref1 =....EnvironmentModel.GlobalRef;
      AnySeg &ref2 =....HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg;
    };
    MeasureOrganizer = {2};
    DriverPos={.JntPos.PelvisPosZ}+LinDesVar[2];
    DriverVel={.JntVel.PelvisPosZ};
    Reaction.Type={On};
        AnyVec3 Lin ={0,0,0};
    AnyVec3 LinDesVar= DesignVar(Lin);


  };
  
   AnyDrawWidgetLin PelvisWidgetLinZ =   {
    Visible = On;
    //Opacity = 1;
    Operation = &.Study;
    
    UpdateEvent = OnMouseRelease;
    MaxDrawSize = 0.4;
    //MinDrawSize = 0;
    RefFrame =&...EnvironmentModel.GlobalRef;
    Target = &.PelvisGroundDriverPosZ.LinDesVar;
    
    AnyMat33 test=..HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg.Axes;
    RelRotMat = &test;
    
    AnyVec3 RelPosition = {.PelvisGroundDriverPosZ.lin.Pos[0],.PelvisGroundDriverPosZ.lin.Pos[1],.PelvisGroundDriverPosZ.DriverPos[0]-.PelvisGroundDriverPosZ.LinDesVar[2]};
    RelPos=&RelPosition;
    AxisOnOff = {Off, Off, On};
  };
  
  #else
  #endif

  
  #if PELVIS_ROT_Z_DRIVER == 1
  AnyKinEqSimpleDriver PelvisGroundDriverRotZ ={
    AnyKinRotational rot ={
      AnyFixedRefFrame &ref1 =....EnvironmentModel.GlobalRef;
      AnySeg &ref2 =....HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg;
      Type=RotAxesAngles;
    };
    MeasureOrganizer = {0};
    DriverPos={pi/180*.JntPos.PelvisRotZ}+RotDesVar[0];
    DriverVel={pi/180*.JntVel.PelvisRotZ};
    Reaction.Type={On};
      AnyVec3 Rot ={0,0,0};
    AnyVec3 RotDesVar= DesignVar(Rot);

  };
  
  
  
   AnyDrawWidgetRot PelvisPosRotZ =   {
    //Visible = On;
    //Opacity = 1;
     Operation = &.Study;
    UpdateEvent = OnMouseRelease;
    MaxDrawSize = 0.2;
    MinDrawSize = 0;
    RefFrame =&...HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg;
    Target = &.PelvisGroundDriverRotZ.RotDesVar;
    AxisOnOff = {On, Off, Off};
     Axis1 = z;
  Axis2 = y;
  Axis3 = x;

  
 };

  
  
  
  #else
  #endif
    
  #if PELVIS_ROT_Y_DRIVER == 1
  AnyKinEqSimpleDriver PelvisGroundDriverRotY ={
    AnyKinRotational rot ={
      AnyFixedRefFrame &ref1 =....EnvironmentModel.GlobalRef;
      AnySeg &ref2 =....HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg;
      Type=RotAxesAngles;
    };
    MeasureOrganizer = {1};
    DriverPos={pi/180*.JntPos.PelvisRotY}+RotDesVar[1];
    DriverVel={pi/180*.JntVel.PelvisRotY};
    Reaction.Type={On};
      AnyVec3 Rot ={0,0,0};
    AnyVec3 RotDesVar= DesignVar(Rot);

  };
  
  AnyDrawWidgetRot PelvisPosRotY =   {
    //Visible = On;
    //Opacity = 1;
     Operation = &.Study;
    UpdateEvent = OnMouseRelease;
    MaxDrawSize = 0.2;
    MinDrawSize = 0;
    RefFrame =&...HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg;
    Target = &.PelvisGroundDriverRotY.RotDesVar;
    AxisOnOff = {On, On, Off};
     Axis1 = z;
  Axis2 = y;
  Axis3 = x;

  
 };


  #else
  #endif
  
  
  #if PELVIS_ROT_X_DRIVER == 1
  AnyKinEqSimpleDriver PelvisGroundDriverRotX ={
    AnyKinRotational rot ={
      AnyFixedRefFrame &ref1 =....EnvironmentModel.GlobalRef;
      AnySeg &ref2 =....HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg;
      Type=RotAxesAngles;
    };
    MeasureOrganizer = {2};
    DriverPos={pi/180*.JntPos.PelvisRotX}+RotDesVar[2];
    DriverVel={pi/180*.JntVel.PelvisRotX};
    Reaction.Type={On};
      AnyVec3 Rot ={0,0,0};
    AnyVec3 RotDesVar= DesignVar(Rot);

  };
  
    AnyDrawWidgetRot PelvisPosRotX =   {
    //Visible = On;
    //Opacity = 1;
     Operation = &.Study;
    UpdateEvent = OnMouseRelease;
    MaxDrawSize = 0.2;
    MinDrawSize = 0;
    RefFrame =&...HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg;
    Target = &.PelvisGroundDriverRotX.RotDesVar;
    AxisOnOff = {Off, Off, On};
     Axis1 = z;
  Axis2 = y;
  Axis3 = x;

  
 };
  #else
  #endif
  
  
  
  
  
  
  // ************************************
  // Drivers for the spine
  // ************************************
  
  //Neck driver 
  #if NECK_DRIVER == 1
  AnyKinEqSimpleDriver NeckJntDriver = {
    AnyRevoluteJoint &T12L1Joint = ....HumanModel.BodyModel.Interface.Trunk.NeckJoint;
    DriverPos = pi/180*{.JntPos.NeckExtension};
    DriverVel = pi/180*{.JntVel.NeckExtension};
    Reaction.Type = {Off};
  };
  #else
  #endif
  
  
  //Thorax pelvis rotation driver
  #if PELVIS_THORAX_LATERAL_BENDING_DRIVER == 1
  AnyKinEqSimpleDriver PostureDriverBending ={
    AnyKinMeasureOrg &Ref2 =...HumanModel.BodyModel.Interface.Trunk.PelvisThoraxLateralBending;        
    DriverPos = pi/180*{.JntPos.PelvisThoraxLateralBending};
    DriverVel = pi/180*{.JntVel.PelvisThoraxLateralBending};
    Reaction.Type = {Off};  
  };  
  #else
  #endif

  #if PELVIS_THORAX_ROTATION_DRIVER == 1
  AnyKinEqSimpleDriver PostureDriverRotation ={
    AnyKinMeasureOrg &Ref3 =...HumanModel.BodyModel.Interface.Trunk.PelvisThoraxRotation;   
    DriverPos = pi/180*{.JntPos.PelvisThoraxRotation};
    DriverVel = pi/180*{.JntVel.PelvisThoraxRotation};
    Reaction.Type = {Off};  
  };  
  #else
  #endif
  
  #if PELVIS_THORAX_EXTENSION_DRIVER == 1
  AnyKinEqSimpleDriver PostureDriverExtension ={
    AnyKinMeasureOrg &Ref1 =...HumanModel.BodyModel.Interface.Trunk.PelvisThoraxExtension;
    DriverPos = pi/180*{.JntPos.PelvisThoraxExtension};
    DriverVel = pi/180*{.JntVel.PelvisThoraxExtension};
    Reaction.Type = {Off};  
  };  
  #else
  #endif
  
  #else
  #endif
  
  // ************************************
  // Drivers for the right arm
  // ************************************

  #if RIGHT_ARM == 1
  
  //Sterno clavicular joint driver
  #if STERNO_CLAVICULAR_RIGHT_DRIVER == 1
  AnyKinEqSimpleDriver SCDriverRight ={
    AnyKinMeasureOrg &ref1 =...HumanModel.BodyModel.Interface.Right.SternoClavicularProtraction;
    AnyKinMeasureOrg &ref2 =...HumanModel.BodyModel.Interface.Right.SternoClavicularElevation;
    AnyKinMeasureOrg &ref3 =...HumanModel.BodyModel.Interface.Right.SternoClavicularAxialRotation;
    DriverPos = pi/180*{
      .JntPos.Right.SternoClavicularProtraction,
      .JntPos.Right.SternoClavicularElevation,
      .JntPos.Right.SternoClavicularAxialRotation
    };
    DriverVel = {
      .JntVel.Right.SternoClavicularProtraction,
      .JntVel.Right.SternoClavicularElevation,
      .JntVel.Right.SternoClavicularAxialRotation
    };
    Reaction.Type={Off,Off,Off};
    AnyFloat SCRot ={0,0,0};
    AnyFloat SCRotDesVar= DesignVar(SCRot);
 };
  
 AnyDrawWidgetRot SCWidgetRight = {
   RefFrame = &..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.ij.scj.RotNode;
    Target = &.SCDriverRight.SCRotDesVar ;
    AxisOnOff = {On,On,On};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = y;
    Axis2 = z;
    Axis3 = x;
    MaxDrawSize=0.1;
  };

  #else
  #endif
  
  
  //Glenohumeral joint 
  #if GLENOHUMERAL_ABDUCTION_RIGHT_DRIVER == 1
  AnyKinEqSimpleDriver GHDriverRightAbduction={
    AnyKinMeasureOrg &ref1 =...HumanModel.BodyModel.Interface.Right.GlenohumeralAbduction;
     DriverPos=pi/180*{.JntPos.Right.GlenohumeralAbduction}+RotDesVar[0];
     DriverVel = pi/180*{.JntVel.Right.GlenohumeralAbduction};    
     Reaction.Type={Off};
  
     AnyFloat Rot ={0,0,0};
    AnyFloat RotDesVar= DesignVar(Rot);


   };
   
AnyDrawWidgetRot GHWidgetRightAbduction = {
   RefFrame = &..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.ij.RotNode;
    Target = &.GHDriverRightAbduction.RotDesVar ;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = x;
    Axis2 = z;
    Axis3 = y;
    MaxDrawSize=0.1;
  AnyVec3 RelPosition=(..HumanModel.Right.ShoulderArm.Seg.Humerus.gh.RotNode.r-..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.ij.RotNode.r)*..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.ij.RotNode.Axes';
    RelPos=&RelPosition;
  };


   
  #else
  #endif
  
  #if GLENOHUMERAL_FLEXION_RIGHT_DRIVER == 1
  AnyKinEqSimpleDriver GHDriverRightFlexion={
    AnyKinMeasureOrg &ref2 =...HumanModel.BodyModel.Interface.Right.GlenohumeralFlexion;
     DriverPos=pi/180*{.JntPos.Right.GlenohumeralFlexion}+RotDesVar[1];
     DriverVel = pi/180*{.JntVel.Right.GlenohumeralFlexion};    
     Reaction.Type={Off};
  AnyFloat Rot ={0,0,0};
    AnyFloat RotDesVar= DesignVar(Rot);


   };
   
AnyDrawWidgetRot GHWidgetRightFlexion = {
   RefFrame = &..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.ij.RotNode;
    Target = &.GHDriverRightFlexion.RotDesVar ;
    AxisOnOff = {Off,On,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = x;
    Axis2 = z;
    Axis3 = y;
    MaxDrawSize=0.1;
  AnyVec3 RelPosition=(..HumanModel.Right.ShoulderArm.Seg.Humerus.gh.RotNode.r-..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.ij.RotNode.r)*..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.ij.RotNode.Axes';
    RelPos=&RelPosition;
  };

   
  #else
  #endif
  
  #if GLENOHUMERAL_EXTERNAL_ROTATION_RIGHT_DRIVER == 1
  AnyKinEqSimpleDriver GHDriverRightExternalRotation={
    AnyKinMeasureOrg &ref3 =...HumanModel.BodyModel.Interface.Right.GlenohumeralExternalRotation;
     DriverPos=pi/180*{.JntPos.Right.GlenohumeralExternalRotation}+RotDesVar[2];
     DriverVel = pi/180*{.JntVel.Right.GlenohumeralExternalRotation};    
     Reaction.Type={Off};
  AnyFloat Rot ={0,0,0};
    AnyFloat RotDesVar= DesignVar(Rot);


   };
  AnyDrawWidgetRot GHWidgetRightExternalRotation = {
   RefFrame = &..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.ij.RotNode;
    Target = &.GHDriverRightExternalRotation.RotDesVar ;
    AxisOnOff = {Off,Off,On};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = x;
    Axis2 = z;
    Axis3 = y;
    MaxDrawSize=0.1;
  AnyVec3 RelPosition=(..HumanModel.Right.ShoulderArm.Seg.Humerus.gh.RotNode.r-..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.ij.RotNode.r)*..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.ij.RotNode.Axes';
    RelPos=&RelPosition;
  };
   #else
  #endif
  
  
  
  //Elbow flexion driver  
  #if ELBOW_FLEXION_RIGHT_DRIVER == 1
  AnyKinEqSimpleDriver ElbowFlexionDriverRight={
    AnyKinMeasureOrg  &Elbow =...HumanModel.BodyModel.Interface.Right.ElbowFlexion;
    DriverPos=pi/180*{.JntPos.Right.ElbowFlexion}+RotDesVar;  
    DriverVel = pi/180*{.JntVel.Right.ElbowFlexion};  
    Reaction.Type={Off};
    AnyFloat Rot ={0};
    AnyFloat RotDesVar= DesignVar(Rot);

  };
  
  
  
  
AnyDrawWidgetRot ElbowFlexionDriverWidgetRight= {
   RefFrame = &..HumanModel.Right.ShoulderArm.Seg.Humerus.fe.RotNode;
    Target = &.ElbowFlexionDriverRight.RotDesVar ;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = x;
    MaxDrawSize=0.1;
 
 
  };

  
  #else
  #endif
  
  
  //Elbow pronation driver
  #if ELBOW_PRONATION_RIGHT_DRIVER == 1
  AnyKinEqSimpleDriver ElbowPronationDriverRight={
    AnyKinMeasureOrg &Elbow =...HumanModel.BodyModel.Interface.Right.ElbowPronation;
    DriverPos = pi/180*{.JntPos.Right.ElbowPronation }+RotDesVar;  

    DriverVel=pi/180*{.JntVel.Right.ElbowPronation };  
    Reaction.Type={Off};
      AnyFloat Rot ={0};
    AnyFloat RotDesVar= DesignVar(Rot);

  };
  
  
  
  
AnyDrawWidgetRot ElbowPronationDriverWidgetRight= {
   RefFrame = &..HumanModel.Right.ShoulderArm.Seg.Ulna.ps2.RotNode;
    Target = &.ElbowPronationDriverRight.RotDesVar ;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = x;
    MaxDrawSize=0.1;
 
 
  };

  #else
  #endif

  
  
  //Wrist driver 
  #if WRIST_FLEXION_RIGHT_DRIVER == 1
  AnyKinEqSimpleDriver WristDriverRightFlexion ={
    AnyKinMeasureOrg &ref1 =...HumanModel.BodyModel.Interface.Right.WristFlexion;
    DriverPos = pi/180*{.JntPos.Right.WristFlexion}+RotDesVar[0];
    DriverVel = pi/180*{.JntVel.Right.WristFlexion};
    Reaction.Type={Off};
     AnyFloat Rot ={0,0};
    AnyFloat RotDesVar= DesignVar(Rot );

  };
  
  
  AnyDrawWidgetRot WristDriverWidgetFlexionRight = {
   RefFrame = &..HumanModel.Right.ShoulderArm.Seg.Radius.wj.RotNode;
   Target = &.WristDriverRightFlexion.RotDesVar;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = y;
    MaxDrawSize=0.1;
  };

  
  #else
  #endif
  
  #if WRIST_ABDUCTION_RIGHT_DRIVER == 1
  AnyKinEqSimpleDriver WristDriverRightAbduction ={
    AnyKinMeasureOrg &ref2 =...HumanModel.BodyModel.Interface.Right.WristAbduction;
    DriverPos = pi/180*{.JntPos.Right.WristAbduction}+RotDesVar[0];

    DriverVel = pi/180*{.JntVel.Right.WristAbduction};
    Reaction.Type={Off};
    AnyFloat Rot ={0,0};
    AnyFloat RotDesVar= DesignVar(Rot );

  };


    AnyDrawWidgetRot WristDriverWidgetAbductionRight = {
   RefFrame = &..HumanModel.Right.ShoulderArm.Seg.Radius.wj.RotNode;
   Target = &.WristDriverRightAbduction.RotDesVar;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = z;
    MaxDrawSize=0.1;
  };


  
  #else
  #endif

  #else
  #endif

  

  // ************************************
  // Drivers for the left arm
  // ************************

  #if LEFT_ARM == 1
  
  //Sterno clavicular joint driver
  #if STERNO_CLAVICULAR_LEFT_DRIVER == 1
  AnyKinEqSimpleDriver SCDriverLeft ={
    AnyKinMeasureOrg &ref1 =...HumanModel.BodyModel.Interface.Left.SternoClavicularProtraction;
    AnyKinMeasureOrg &ref2 =...HumanModel.BodyModel.Interface.Left.SternoClavicularElevation;
    AnyKinMeasureOrg &ref3 =...HumanModel.BodyModel.Interface.Left.SternoClavicularAxialRotation;
    DriverPos = pi/180*{
      .JntPos.Left.SternoClavicularProtraction,
      .JntPos.Left.SternoClavicularElevation,
      .JntPos.Left.SternoClavicularAxialRotation
    };
    DriverVel = {
      .JntVel.Left.SternoClavicularProtraction,
      .JntVel.Left.SternoClavicularElevation,
      .JntVel.Left.SternoClavicularAxialRotation
    };
    Reaction.Type={Off,Off,Off};
    AnyFloat SCRot ={0,0,0};
    AnyFloat SCRotDesVar= DesignVar(SCRot);
 };
  
 AnyDrawWidgetRot SCWidgetLeft = {
   RefFrame = &..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.iji.scj.RotNode;
    Target = &.SCDriverLeft.SCRotDesVar ;
    AxisOnOff = {On,On,On};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = y;
    Axis2 = z;
    Axis3 = x;
    MaxDrawSize=0.1;
  };

  #else
  #endif
  
  
  //Glenohumeral joint 
  #if GLENOHUMERAL_ABDUCTION_LEFT_DRIVER == 1
  AnyKinEqSimpleDriver GHDriverLeftAbduction={
    AnyKinMeasureOrg &ref1 =...HumanModel.BodyModel.Interface.Left.GlenohumeralAbduction;
     DriverPos=pi/180*{.JntPos.Left.GlenohumeralAbduction}+RotDesVar[0];
     DriverVel = pi/180*{.JntVel.Left.GlenohumeralAbduction};    
     Reaction.Type={Off};
  
     AnyFloat Rot ={0,0,0};
    AnyFloat RotDesVar= DesignVar(Rot);


   };
   
AnyDrawWidgetRot GHWidgetLeftAbduction = {
   RefFrame = &..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.iji.RotNode;
    Target = &.GHDriverLeftAbduction.RotDesVar ;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = x;
    Axis2 = z;
    Axis3 = y;
    MaxDrawSize=0.1;
  AnyVec3 RelPosition=(..HumanModel.Left.ShoulderArm.Seg.Humerus.gh.RotNode.r-..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.iji.RotNode.r)*..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.iji.RotNode.Axes';
    RelPos=&RelPosition;
  };


   
  #else
  #endif
  
  #if GLENOHUMERAL_FLEXION_LEFT_DRIVER == 1
  AnyKinEqSimpleDriver GHDriverLeftFlexion={
    AnyKinMeasureOrg &ref2 =...HumanModel.BodyModel.Interface.Left.GlenohumeralFlexion;
     DriverPos=pi/180*{.JntPos.Left.GlenohumeralFlexion}+RotDesVar[1];
     DriverVel = pi/180*{.JntVel.Left.GlenohumeralFlexion};    
     Reaction.Type={Off};
  AnyFloat Rot ={0,0,0};
    AnyFloat RotDesVar= DesignVar(Rot);


   };
   
AnyDrawWidgetRot GHWidgetLeftFlexion = {
   RefFrame = &..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.iji.RotNode;
    Target = &.GHDriverLeftFlexion.RotDesVar ;
    AxisOnOff = {Off,On,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = x;
    Axis2 = z;
    Axis3 = y;
    MaxDrawSize=0.1;
  AnyVec3 RelPosition=(..HumanModel.Left.ShoulderArm.Seg.Humerus.gh.RotNode.r-..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.iji.RotNode.r)*..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.iji.RotNode.Axes';
    RelPos=&RelPosition;
  };

   
  #else
  #endif
  
  #if GLENOHUMERAL_EXTERNAL_ROTATION_LEFT_DRIVER == 1
  AnyKinEqSimpleDriver GHDriverLeftExternalRotation={
    AnyKinMeasureOrg &ref3 =...HumanModel.BodyModel.Interface.Left.GlenohumeralExternalRotation;
     DriverPos=pi/180*{.JntPos.Left.GlenohumeralExternalRotation}+RotDesVar[2];
     DriverVel = pi/180*{.JntVel.Left.GlenohumeralExternalRotation};    
     Reaction.Type={Off};
  AnyFloat Rot ={0,0,0};
    AnyFloat RotDesVar= DesignVar(Rot);


   };
  AnyDrawWidgetRot GHWidgetLeftExternalRotation = {
   RefFrame = &..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.iji.RotNode;
    Target = &.GHDriverLeftExternalRotation.RotDesVar ;
    AxisOnOff = {Off,Off,On};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = x;
    Axis2 = z;
    Axis3 = y;
    MaxDrawSize=0.1;
  AnyVec3 RelPosition=(..HumanModel.Left.ShoulderArm.Seg.Humerus.gh.RotNode.r-..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.iji.RotNode.r)*..HumanModel.Trunk.SegmentsThorax.ThoraxSeg.iji.RotNode.Axes';
    RelPos=&RelPosition;
  };
   #else
  #endif
  
  
  
  //Elbow flexion driver  
  #if ELBOW_FLEXION_LEFT_DRIVER == 1
  AnyKinEqSimpleDriver ElbowFlexionDriverLeft={
    AnyKinMeasureOrg  &Elbow =...HumanModel.BodyModel.Interface.Left.ElbowFlexion;
    DriverPos=pi/180*{.JntPos.Left.ElbowFlexion}+RotDesVar;  
    DriverVel = pi/180*{.JntVel.Left.ElbowFlexion};  
    Reaction.Type={Off};
    AnyFloat Rot ={0};
    AnyFloat RotDesVar= DesignVar(Rot);

  };
  
  
  
  
AnyDrawWidgetRot ElbowFlexionDriverWidgetLeft= {
   RefFrame = &..HumanModel.Left.ShoulderArm.Seg.Humerus.fe.RotNode;
    Target = &.ElbowFlexionDriverLeft.RotDesVar ;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = x;
    MaxDrawSize=0.1;
 
 
  };

  
  #else
  #endif
  
  
  //Elbow pronation driver
  #if ELBOW_PRONATION_LEFT_DRIVER == 1
  AnyKinEqSimpleDriver ElbowPronationDriverLeft={
    AnyKinMeasureOrg &Elbow =...HumanModel.BodyModel.Interface.Left.ElbowPronation;
    DriverPos = pi/180*{.JntPos.Left.ElbowPronation }+RotDesVar;  

    DriverVel=pi/180*{.JntVel.Left.ElbowPronation };  
    Reaction.Type={Off};
      AnyFloat Rot ={0};
    AnyFloat RotDesVar= DesignVar(Rot);

  };
  
  
  
  
AnyDrawWidgetRot ElbowPronationDriverWidgetLeft= {
   RefFrame = &..HumanModel.Left.ShoulderArm.Seg.Ulna.ps2.RotNode;
    Target = &.ElbowPronationDriverLeft.RotDesVar ;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = x;
    MaxDrawSize=0.1;
 
 
  };

  #else
  #endif

  
  
  //Wrist driver 
  #if WRIST_FLEXION_LEFT_DRIVER == 1
  AnyKinEqSimpleDriver WristDriverLeftFlexion ={
    AnyKinMeasureOrg &ref1 =...HumanModel.BodyModel.Interface.Left.WristFlexion;
    DriverPos = pi/180*{.JntPos.Left.WristFlexion}+RotDesVar[0];
    DriverVel = pi/180*{.JntVel.Left.WristFlexion};
    Reaction.Type={Off};
     AnyFloat Rot ={0,0};
    AnyFloat RotDesVar= DesignVar(Rot );

  };
  
  
  AnyDrawWidgetRot WristDriverWidgetFlexionLeft = {
   RefFrame = &..HumanModel.Left.ShoulderArm.Seg.Radius.wj.RotNode;
   Target = &.WristDriverLeftFlexion.RotDesVar;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = y;
    MaxDrawSize=0.1;
  };

  
  #else
  #endif
  
  #if WRIST_ABDUCTION_LEFT_DRIVER == 1
  AnyKinEqSimpleDriver WristDriverLeftAbduction ={
    AnyKinMeasureOrg &ref2 =...HumanModel.BodyModel.Interface.Left.WristAbduction;
    DriverPos = pi/180*{.JntPos.Left.WristAbduction}+RotDesVar[0];

    DriverVel = pi/180*{.JntVel.Left.WristAbduction};
    Reaction.Type={Off};
    AnyFloat Rot ={0,0};
    AnyFloat RotDesVar= DesignVar(Rot );

  };


    AnyDrawWidgetRot WristDriverWidgetAbductionLeft = {
   RefFrame = &..HumanModel.Left.ShoulderArm.Seg.Radius.wj.RotNode;
   Target = &.WristDriverLeftAbduction.RotDesVar;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = z;
    MaxDrawSize=0.1;
  };


  
  #else
  #endif

  #else
  #endif





  // ************************************
  // Drivers for the right leg
  // ************************************
  
  #if RIGHT_LEG + RIGHT_LEG_TD == 0
  #else
  
   //Hip driver 
  #if HIP_FLEXION_RIGHT_DRIVER == 1
  AnyKinEqSimpleDriver HipDriverRightFlexion={
    AnyKinMeasureOrg &ref1 =...HumanModel.BodyModel.Interface.Right.HipFlexion;
    DriverPos= pi/180*{.JntPos.Right.HipFlexion}+RotDesVar[0];    
    DriverVel = pi/180*{.JntVel.Right.HipFlexion};    
    Reaction.Type={Off};
    AnyFloat Rot ={0,0,0};
    AnyFloat RotDesVar= DesignVar(Rot);
  };
  AnyDrawWidgetRot HipWidgetRightFlexion = {
    RefFrame = &..HumanModel.BodyModel.Interface.Right.HipFlexion.HipMeasure.PelvisNode;
    Target = &.HipDriverRightFlexion.RotDesVar ;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = z;
    Axis2 = y;
    Axis3 = x;
    MaxDrawSize=0.1;
  };
  

  
  #else
  #endif
  
  #if HIP_EXTERNAL_ROTATION_RIGHT_DRIVER == 1
  AnyKinEqSimpleDriver HipDriverRightExternalRotation={
    AnyKinMeasureOrg &ref2 =...HumanModel.BodyModel.Interface.Right.HipExternalRotation;
    DriverPos= pi/180*{.JntPos.Right.HipExternalRotation}+RotDesVar[1];    
    DriverVel = pi/180*{.JntVel.Right.HipExternalRotation};    
    Reaction.Type={Off};
    AnyFloat Rot ={0,0,0};
    AnyFloat RotDesVar= DesignVar(Rot);
  };

  
    AnyDrawWidgetRot HipWidgetRightExternalRotation = {
    RefFrame = &..HumanModel.BodyModel.Interface.Right.HipFlexion.HipMeasure.PelvisNode;
    Target = &.HipDriverRightExternalRotation.RotDesVar ;
    AxisOnOff = {Off,On,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = z;
    Axis2 = y;
    Axis3 = x;
    MaxDrawSize=0.1;
  };
  
  #else
  #endif
  
  #if HIP_ABDUCTION_RIGHT_DRIVER == 1
  AnyKinEqSimpleDriver HipDriverRightAbduction={
    AnyKinMeasureOrg &ref3 =...HumanModel.BodyModel.Interface.Right.HipAbduction;
    DriverPos= pi/180*{.JntPos.Right.HipAbduction}+RotDesVar[2];    
    DriverVel = pi/180*{.JntVel.Right.HipAbduction};    
    Reaction.Type={Off};
    AnyFloat Rot ={0,0,0};
    AnyFloat RotDesVar= DesignVar(Rot);

  };

      AnyDrawWidgetRot HipWidgetRightAbduction = {
    RefFrame = &..HumanModel.BodyModel.Interface.Right.HipFlexion.HipMeasure.PelvisNode;
    Target = &.HipDriverRightAbduction.RotDesVar ;
    AxisOnOff = {Off,Off,On};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = z;
    Axis2 = y;
    Axis3 = x;
    MaxDrawSize=0.1;
  };
  #else
  #endif
  
  
   
  //Knee driver
  #if KNEE_FLEXION_RIGHT_DRIVER == 1
  AnyKinEqSimpleDriver KneeDriverRight={
    AnyKinMeasureOrg  &Knee =...HumanModel.BodyModel.Interface.Right.KneeFlexion;
    DriverPos=pi/180*{.JntPos.Right.KneeFlexion};  
    DriverVel = pi/180*{.JntVel.Right.KneeFlexion};  
    Reaction.Type={Off};
     AnyFloat Rot= 0;
    AnyFloat RotDesVar = DesignVar(Rot);
  };
  
  
  
  
  AnyDrawWidgetRot KneeFlexionWidgetRight = {
    AnyRefNode &node = ..HumanModel.BodyModel.Interface.Right.KneeFlexion.KneeRot.ThighNode;
    node={      AnyRefNode WidgetNode={       ARel =RotMat(pi,y);      };    };
    RefFrame = &..HumanModel.BodyModel.Interface.Right.KneeFlexion.KneeRot.ThighNode.WidgetNode;
    Target = &.KneeDriverRight.RotDesVar ;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = z;
    MaxDrawSize=0.1;

  };

  #else
  #endif
  
  
  //Ankle driver
  #if ANKLE_FLEXION_RIGHT_DRIVER == 1
  AnyKinEqSimpleDriver AnkleDriverRightFlexion={
    AnyKinMeasureOrg &ref1=...HumanModel.BodyModel.Interface.Right.AnklePlantarFlexion;
    DriverPos = pi/180*{.JntPos.Right.AnklePlantarFlexion}+RotDesVar;  
    DriverVel=pi/180*{.JntVel.Right.AnklePlantarFlexion};  
    Reaction.Type={Off};
  
    AnyFloat Rot= 0;
    AnyFloat RotDesVar = DesignVar(Rot);
  
  };
  
//    
  AnyDrawWidgetRot AnklePlantarFlexionWidgetRight = {
    RefFrame = &..HumanModel.BodyModel.Interface.Right.AnklePlantarFlexion.Shank;
    Target = &.AnkleDriverRightFlexion.RotDesVar;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = z;
        MaxDrawSize=0.1;

  };


  
  #else
  #endif
  
  #if ANKLE_EVERSION_RIGHT_DRIVER == 1
  AnyKinEqSimpleDriver AnkleDriverRightEversion={
    AnyKinMeasureOrg &ref2=...HumanModel.BodyModel.Interface.Right.AnkleEversion;
    DriverPos = pi/180*{.JntPos.Right.AnkleEversion};  
    DriverVel=pi/180*{.JntVel.Right.AnkleEversion};  
    Reaction.Type={Off};
  

  };
  
 

  #else
  #endif
 
  #if ANKLE_SUBTALAR_EVERSION_RIGHT_DRIVER == 1
  AnyKinEqSimpleDriver AnkleDriverRightEversion={
    AnyKinMeasureOrg &ref2=...HumanModel.BodyModel.Interface.Right.SubTalarEversion;
    DriverPos = pi/180*{.JntPos.Right.SubTalarEversion}+RotDesVar;  
    DriverVel=pi/180*{.JntVel.Right.SubTalarEversion};  
    Reaction.Type={Off};
    AnyFloat Rot= 0;
    AnyFloat RotDesVar = DesignVar(Rot);

  };
 
   AnyDrawWidgetRot SubTalarEversionWidgetRight = {
    RefFrame = &..HumanModel.BodyModel.Interface.Right.SubTalarEversion.Ankle.TalusNode;
    Target = &.AnkleDriverRightEversion.RotDesVar;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = z;
    MaxDrawSize=0.1;

  };

  #else
  #endif

  #endif
  

  // ************************************
  // Drivers for the Left leg
  // ************************************
  
  #if LEFT_LEG + LEFT_LEG_TD == 0
  #else
  

   //Hip driver 
  #if HIP_FLEXION_LEFT_DRIVER == 1
  AnyKinEqSimpleDriver HipDriverLeftFlexion={
    AnyKinMeasureOrg &ref1 =...HumanModel.BodyModel.Interface.Left.HipFlexion;
    DriverPos= pi/180*{.JntPos.Left.HipFlexion}+RotDesVar[0];    
    DriverVel = pi/180*{.JntVel.Left.HipFlexion};    
    Reaction.Type={Off};
    AnyFloat Rot ={0,0,0};
    AnyFloat RotDesVar= DesignVar(Rot);
  };
  AnyDrawWidgetRot HipWidgetLeftFlexion = {
    RefFrame = &..HumanModel.BodyModel.Interface.Left.HipFlexion.HipMeasure.PelvisNode;
    Target = &.HipDriverLeftFlexion.RotDesVar ;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = z;
    Axis2 = y;
    Axis3 = x;
    MaxDrawSize=0.1;
  };
  

  
  #else
  #endif
  
  #if HIP_EXTERNAL_ROTATION_LEFT_DRIVER == 1
  AnyKinEqSimpleDriver HipDriverLeftExternalRotation={
    AnyKinMeasureOrg &ref2 =...HumanModel.BodyModel.Interface.Left.HipExternalRotation;
    DriverPos= pi/180*{.JntPos.Left.HipExternalRotation}+RotDesVar[1];    
    DriverVel = pi/180*{.JntVel.Left.HipExternalRotation};    
    Reaction.Type={Off};
    AnyFloat Rot ={0,0,0};
    AnyFloat RotDesVar= DesignVar(Rot);
  };

  
    AnyDrawWidgetRot HipWidgetLeftExternalRotation = {
    RefFrame = &..HumanModel.BodyModel.Interface.Left.HipFlexion.HipMeasure.PelvisNode;
    Target = &.HipDriverLeftExternalRotation.RotDesVar ;
    AxisOnOff = {Off,On,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = z;
    Axis2 = y;
    Axis3 = x;
    MaxDrawSize=0.1;
  };
  
  #else
  #endif
  
  #if HIP_ABDUCTION_LEFT_DRIVER == 1
  AnyKinEqSimpleDriver HipDriverLeftAbduction={
    AnyKinMeasureOrg &ref3 =...HumanModel.BodyModel.Interface.Left.HipAbduction;
    DriverPos= pi/180*{.JntPos.Left.HipAbduction}+RotDesVar[2];    
    DriverVel = pi/180*{.JntVel.Left.HipAbduction};    
    Reaction.Type={Off};
    AnyFloat Rot ={0,0,0};
    AnyFloat RotDesVar= DesignVar(Rot);

  };

      AnyDrawWidgetRot HipWidgetLeftAbduction = {
    RefFrame = &..HumanModel.BodyModel.Interface.Left.HipFlexion.HipMeasure.PelvisNode;
    Target = &.HipDriverLeftAbduction.RotDesVar ;
    AxisOnOff = {Off,Off,On};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = z;
    Axis2 = y;
    Axis3 = x;
    MaxDrawSize=0.1;
  };
  #else
  #endif
  
  
   
  //Knee driver
  #if KNEE_FLEXION_LEFT_DRIVER == 1
  AnyKinEqSimpleDriver KneeDriverLeft={
    AnyKinMeasureOrg  &Knee =...HumanModel.BodyModel.Interface.Left.KneeFlexion;
    DriverPos=pi/180*{.JntPos.Left.KneeFlexion};  
    DriverVel = pi/180*{.JntVel.Left.KneeFlexion};  
    Reaction.Type={Off};
     AnyFloat Rot= 0;
    AnyFloat RotDesVar = DesignVar(Rot);
  };
  
  
  
  
  AnyDrawWidgetRot KneeFlexionWidgetLeft = {
    AnyRefNode &node = ..HumanModel.BodyModel.Interface.Left.KneeFlexion.KneeRot.ThighNode;
    node={      AnyRefNode WidgetNode={       ARel =RotMat(pi,y);      };    };
    RefFrame = &..HumanModel.BodyModel.Interface.Left.KneeFlexion.KneeRot.ThighNode.WidgetNode;
    Target = &.KneeDriverLeft.RotDesVar ;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = z;
    MaxDrawSize=0.1;

  };

  #else
  #endif
  
  
  //Ankle driver
  #if ANKLE_FLEXION_LEFT_DRIVER == 1
  AnyKinEqSimpleDriver AnkleDriverLeftFlexion={
    AnyKinMeasureOrg &ref1=...HumanModel.BodyModel.Interface.Left.AnklePlantarFlexion;
    DriverPos = pi/180*{.JntPos.Left.AnklePlantarFlexion}+RotDesVar;  
    DriverVel=pi/180*{.JntVel.Left.AnklePlantarFlexion};  
    Reaction.Type={Off};
  
    AnyFloat Rot= 0;
    AnyFloat RotDesVar = DesignVar(Rot);
  
  };
  
//    
  AnyDrawWidgetRot AnklePlantarFlexionWidgetLeft = {
    RefFrame = &..HumanModel.BodyModel.Interface.Left.AnklePlantarFlexion.Shank;
    Target = &.AnkleDriverLeftFlexion.RotDesVar;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = z;
        MaxDrawSize=0.1;

  };


  
  #else
  #endif
  
  #if ANKLE_EVERSION_LEFT_DRIVER == 1
  AnyKinEqSimpleDriver AnkleDriverLeftEversion={
    AnyKinMeasureOrg &ref2=...HumanModel.BodyModel.Interface.Left.AnkleEversion;
    DriverPos = pi/180*{.JntPos.Left.AnkleEversion};  
    DriverVel=pi/180*{.JntVel.Left.AnkleEversion};  
    Reaction.Type={Off};
  

  };
  
 

  #else
  #endif
 
  #if ANKLE_SUBTALAR_EVERSION_LEFT_DRIVER == 1
  AnyKinEqSimpleDriver AnkleDriverLeftEversion={
    AnyKinMeasureOrg &ref2=...HumanModel.BodyModel.Interface.Left.SubTalarEversion;
    DriverPos = pi/180*{.JntPos.Left.SubTalarEversion}+RotDesVar;  
    DriverVel=pi/180*{.JntVel.Left.SubTalarEversion};  
    Reaction.Type={Off};
    AnyFloat Rot= 0;
    AnyFloat RotDesVar = DesignVar(Rot);

  };
 
   AnyDrawWidgetRot SubTalarEversionWidgetLeft = {
    RefFrame = &..HumanModel.BodyModel.Interface.Left.SubTalarEversion.Ankle.TalusNode;
    Target = &.AnkleDriverLeftEversion.RotDesVar;
    AxisOnOff = {On,Off,Off};
    UpdateEvent = OnMouseRelease;
    Operation = &.Study;
    Axis1 = z;
    MaxDrawSize=0.1;

  };

  #else
  #endif
  
  #endif


  
#else
#endif
