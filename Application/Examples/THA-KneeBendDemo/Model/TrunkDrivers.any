

  //Neck driver 
  AnyKinEqSimpleDriver NeckJntDriver = {
    AnyKinMeasure &fe = ...HumanModel.Interface.Trunk.SkullThoraxFlexion;
    AnyKinMeasure &lb = ...HumanModel.Interface.Trunk.SkullThoraxLateralBending;
    AnyKinMeasure &ar = ...HumanModel.Interface.Trunk.SkullThoraxRotation;
    DriverPos = pi/180*{.JntPos.NeckExtension, .JntPos.NeckLateralBending, .JntPos.NeckRotation};
    DriverVel = pi/180*{.JntVel.NeckExtension, .JntVel.NeckLateralBending, .JntVel.NeckRotation};
    Reaction.Type = {Off,Off,Off};
  };
  
  //Thorax pelvis rotation driver
  AnyKinEqSimpleDriver PostureDriver ={
    AnyKinMeasureOrg &Ref2 = ...HumanModel.Interface.Trunk.PelvisThoraxLateralBending;        
    AnyKinMeasureOrg &Ref3 = ...HumanModel.Interface.Trunk.PelvisThoraxRotation;   
    AnyKinMeasureOrg &Ref1 = ...HumanModel.Interface.Trunk.PelvisThoraxExtension;
   
    DriverPos = pi/180*{
          .JntPos.PelvisThoraxLateralBending,
      .JntPos.PelvisThoraxRotation,
      .JntPos.PelvisThoraxExtension
    };
    DriverVel = pi/180*{
      .JntVel.PelvisThoraxLateralBending,
      .JntVel.PelvisThoraxRotation,
      .JntVel.PelvisThoraxExtension
    };
    Reaction.Type = {Off,Off,Off};  
  };  

  
  MannequinLoads = {
    AnyForce3D TopVertebra = {
      AnyRefNode &ApplPoint = .hm.Trunk.SegmentsThorax.ThoraxSeg.C1HatNode;
      F = .mql.TopVertebra;
    };
  };
