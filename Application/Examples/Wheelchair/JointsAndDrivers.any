
AnyFolder Drivers = {
  
  // Aliases for convenient referencing
  AnyFolder &JntPos=..Mannequin.Posture;  
  AnyFolder &JntVel=..Mannequin.PostureVel;  
  AnyFolder &RefHM = Main.Model.HumanModel;
  AnyFolder &ref=Main.Model.HumanModel.Trunk;
  

  
  AnyFolder &Thorax = ..HumanModel.Trunk.SegmentsThorax.ThoraxSeg;
  
  //adding extra nodes for back support
  Thorax = {
    AnyRefNode RightSup = {
      sRel = ({-0.01, 0.000000 , 0.10000});
    };
    AnyRefNode LeftSup = {
      sRel = ({-0.01, 0.000000 , -0.10000});
    };
  };
  
  // Position of the Pelvis w.r.t. ground.
  AnyKinLinear PelvisPos = {
    AnyFixedRefFrame &Ground = ...EnvironmentModel.GlobalRef;
    AnyRefNode &Tuber = Main.Model.HumanModel.Trunk.SegmentsLumbar.PelvisSeg.TuberIschiadicumCenter;
  };
  
  AnyKinRotational PelvisRot = {
    AnyFixedRefFrame &Ground = ...EnvironmentModel.GlobalRef;
    AnySeg &Pelvis = Main.Model.HumanModel.Trunk.SegmentsLumbar.PelvisSeg;
    Type = RotAxesAngles;
  };
  
  AnyReacForce PelvisReac = {
    AnyKinRotational &ref = .PelvisRot;
  };
  
  AnyKinEqSimpleDriver SeatHeight = {
    AnyKinLinear &PelvisPos = .PelvisPos;
    DriverPos = {0,Main.ChairParameters.WheelRad+Main.ChairParameters.SeatY,0};
    DriverVel = {0,0,0};
  };
  
  AnyKinLinear ThoraxRight = {
    AnyFixedRefFrame &Ground = ...EnvironmentModel.GlobalRef;
    AnyRefNode &Thorax= .Thorax.RightSup;
  };
  
  AnyKinLinear ThoraxCenter = {
    AnyFixedRefFrame &Ground = ...EnvironmentModel.GlobalRef;
    AnySeg &Thorax= .Thorax;
  };
  
  AnyKinLinear ThoraxLeft = {
    AnyFixedRefFrame &Ground = ...EnvironmentModel.GlobalRef;
    AnyRefNode &Thorax= .Thorax.LeftSup;
  };
  
  AnyKinEqSimpleDriver SeatBack = {
    AnyKinLinear &Right = .ThoraxRight;
    AnyKinLinear &Left = .ThoraxLeft;
    AnyKinLinear &Center = .ThoraxCenter;
    //Right shoulder forback / LeftsShoulder forback/thorax center sideways
    MeasureOrganizer = {0,3,8};
    DriverPos = {0,0,0};
    DriverVel = {0,0,0.0};
    Reaction.Type={Off,Off,On};
  };
  
  
  
  
  // ************************************
  // Drivers for the spine
  // ************************************
  
  //Neck driver 
  AnyKinEqSimpleDriver NeckJntDriver = {
    AnyRevoluteJoint &T12L1Joint = ...HumanModel.Interface.Trunk.NeckJoint;
    DriverPos = pi/180*{.JntPos.NeckExtension};
    DriverVel = pi/180*{.JntVel.NeckExtension};
    Reaction.Type = {Off};
  };
  
  //Thorax pelvis rotation driver
  AnyKinEqSimpleDriver PostureDriver ={
    AnyKinMeasureOrg &Ref2 = ...HumanModel.Interface.Trunk.PelvisThoraxLateralBending;        
    AnyKinMeasureOrg &Ref3 = ...HumanModel.Interface.Trunk.PelvisThoraxRotation;   
    AnyKinMeasureOrg &Ref1 = ...HumanModel.Interface.Trunk.PelvisThoraxExtension;
    
    DriverPos = pi/180*{
      .JntPos.PelvisThoraxLateralBending,
      .JntPos.PelvisThoraxRotation,
      .JntPos.PelvisThoraxExtension
    };
    DriverVel = pi/180*{
      .JntVel.PelvisThoraxLateralBending,
      .JntVel.PelvisThoraxRotation,
      .JntVel.PelvisThoraxExtension
    };
    Reaction.Type = {Off,Off,Off};  
  };  
  
  
  
  
  // ************************************
  // Drivers for the right arm
  // ************************************
  
  
  //Sterno clavicular joint driver
  AnyKinEqSimpleDriver SCDriverRight ={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Right.SternoClavicularProtraction;
    AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Right.SternoClavicularElevation;
    AnyKinMeasureOrg &ref3 =...HumanModel.Interface.Right.SternoClavicularAxialRotation;
    DriverPos = pi/180*{
      .JntPos.Right.SternoClavicularProtraction,
      .JntPos.Right.SternoClavicularElevation,
      .JntPos.Right.SternoClavicularAxialRotation
    };
    DriverVel = {
      .JntVel.Right.SternoClavicularProtraction,
      .JntVel.Right.SternoClavicularElevation,
      .JntVel.Right.SternoClavicularAxialRotation
    };
    Reaction.Type={Off,Off,Off};
  };
  
  //Glenohumeral joint 
  AnyKinEqSimpleDriver GHDriverRight={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Right.GlenohumeralAbduction;
    //AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Right.GlenohumeralFlexion;
    //AnyKinMeasureOrg &ref3 =...HumanModel.Interface.Right.GlenohumeralExternalRotation;
    
    DriverPos=pi/180*{
      .JntPos.Right.GlenohumeralAbduction  //GH joint
      //.JntPos.Right.GlenohumeralFlexion,  //GH joint
      //.JntPos.Right.GlenohumeralExternalRotation  //GH joint
    };
    DriverVel = pi/180*{
      .JntVel.Right.GlenohumeralAbduction  //GH joint
      //.JntVel.Right.GlenohumeralFlexion,  //GH joint
      //.JntVel.Right.GlenohumeralExternalRotation  //GH joint
    };    
    Reaction.Type={Off};
  };
  //Elbow pronation driver
  AnyKinEqSimpleDriver ElbowPronationDriverRight={
    AnyKinMeasureOrg &Elbow =...HumanModel.Interface.Right.ElbowPronation;
    DriverPos = pi/180*{.JntPos.Right.ElbowPronation };  
    
    DriverVel=pi/180*{.JntVel.Right.ElbowPronation };  
    Reaction.Type={Off};
  };
  
  
  
  //Wrist driver 
  AnyKinEqSimpleDriver WristDriverRight ={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Right.WristFlexion;
    AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Right.WristAbduction;
    DriverPos = pi/180*{
      .JntPos.Right.WristFlexion,
      .JntPos.Right.WristAbduction
    };
    
    DriverVel = pi/180*{
      .JntVel.Right.WristFlexion,
      .JntVel.Right.WristAbduction};
    Reaction.Type={Off,Off};
  };
  
  
  
  
  
  // ************************************
  // Drivers for the left arm
  // ************************************
  
  //Sterno clavicular joint driver
  AnyKinEqSimpleDriver SCDriverLeft ={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Left.SternoClavicularProtraction;
    AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Left.SternoClavicularElevation;
    AnyKinMeasureOrg &ref3 =...HumanModel.Interface.Left.SternoClavicularAxialRotation;
    
    DriverPos = pi/180*{
      .JntPos.Left.SternoClavicularProtraction,
      .JntPos.Left.SternoClavicularElevation,
      .JntPos.Left.SternoClavicularAxialRotation
    };
    
    DriverVel = pi/180*{
      .JntVel.Left.SternoClavicularProtraction,
      .JntVel.Left.SternoClavicularElevation,
      .JntVel.Left.SternoClavicularAxialRotation
    };
    
    Reaction.Type={Off,Off,Off};
  };
  //Glenohumeral joint 
  AnyKinEqSimpleDriver GHDriverLeft={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Left.GlenohumeralAbduction;
    //AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Left.GlenohumeralFlexion;
    //AnyKinMeasureOrg &ref3 =...HumanModel.Interface.Left.GlenohumeralExternalRotation;
    
    DriverPos=pi/180*{
      .JntPos.Left.GlenohumeralAbduction  //GH joint
      //.JntPos.Left.GlenohumeralFlexion,  //GH joint
      //.JntPos.Left.GlenohumeralExternalRotation  //GH joint
    };
    DriverVel = pi/180*{
      .JntVel.Left.GlenohumeralAbduction  //GH joint
      //.JntVel.Left.GlenohumeralFlexion,  //GH joint
      //.JntVel.Left.GlenohumeralExternalRotation  //GH joint
    };    
    Reaction.Type={Off};
  };
  //Elbow pronation driver
  AnyKinEqSimpleDriver ElbowPronationDriverLeft={
    AnyKinMeasureOrg &Elbow =...HumanModel.Interface.Left.ElbowPronation;
    DriverPos = pi/180*{.JntPos.Left.ElbowPronation };  
    
    DriverVel=pi/180*{.JntVel.Left.ElbowPronation };  
    Reaction.Type={Off};
  };
  
  
  
  
  //Wrist driver
  AnyKinEqSimpleDriver WristDriverLeft ={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Left.WristFlexion;
    AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Left.WristAbduction;
    DriverPos = pi/180*{
      .JntPos.Left.WristFlexion,
      .JntPos.Left.WristAbduction};
    
    DriverVel = pi/180*{
      .JntVel.Left.WristFlexion,
      .JntVel.Left.WristAbduction};
    Reaction.Type={Off,Off};
  };
  
  
  
}; //Drivers

// Joints between the human model and the environment
AnyFolder Joints = {
  AnySphericalJoint HandRimRight = {
    AnyRefNode &Palm = Main.Model.HumanModel.Right.ShoulderArm.Seg.Hand.PalmJoint;
    AnyRefNode &Rim = Main.Model.EnvironmentModel.WheelRight.PushRim;
  };
  AnySphericalJoint HandRimLeft = {
    AnyRefNode &Palm = Main.Model.HumanModel.Left.ShoulderArm.Seg.Hand.PalmJoint;
    AnyRefNode &Rim = Main.Model.EnvironmentModel.WheelLeft.PushRim;
  };
};
