/* ----------------------------------------------------------------
Drivers for a model:

- The two feet are constrained forward/backward and vertically (x & y)
- The pelvis are driven horizontally using a fourier driver to follow a circular path
- The CoM is constrained forward/backward and laterally above the origin.

The remaining degrees of freedom (with the exception of a few shoulder
movements) are controlled by parameters in the mannequin.any file.

The forces defined in the mannequin.any file are attached to the body
locations at the bottom of this file.

Soeren Toerholm, September 9, 2005.
----------------------------------------------------------------  */

AnyFolder Drivers = {
  
  // Aliases for convenient referencing
  AnyFolder &JntPos=..Mannequin.Posture;  
  AnyFolder &JntVel=..Mannequin.PostureVel;  
  
  AnyFolder &Thorax = ..HumanModel.Trunk.SegmentsThorax.ThoraxSeg;
  AnyFolder &LegR = ..HumanModel.Right.Leg;
  AnyFolder &LegL = ..HumanModel.Left.Leg;
  
  
  // Place the right toe and heel on the ground
  AnyKinEq RToeGroundConstraint ={
    AnyKinLinear ToePos = {
      AnyFixedRefFrame &Ground = Main.Model.EnvironmentModel.GlobalRef;
      AnyRefNode &Ball = Main.Model.HumanModel.Right.Leg.Seg.Foot.ToeJoint;
    };
    MeasureOrganizer = {1};  // Only the y coordinate
    Reaction.Type={Off};
  };
  
  AnyKinEqSimpleDriver RHeelGroundConstraint ={
    AnyKinLinear HeelPos = {
      AnyFixedRefFrame &Ground = Main.Model.EnvironmentModel.GlobalRef;
      AnyRefNode &Ball = Main.Model.HumanModel.Right.Leg.Seg.Foot.HeelJoint;
    };
    MeasureOrganizer = {1};  // Only the y coordinate
    DriverPos = {0.0};
    DriverVel = {0};
    Reaction.Type = {Off};   // Provide ground reaction forces
  };
  
  // Place the left toe and heel on the ground
  AnyKinEq LToeGroundConstraint ={
    AnyKinLinear ToePos = {
      AnyFixedRefFrame &Ground = Main.Model.EnvironmentModel.GlobalRef;
      AnyRefNode &Ball = Main.Model.HumanModel.Left.Leg.Seg.Foot.ToeJoint;
    };
    MeasureOrganizer = {1};  // Only the y coordinate
    Reaction.Type={Off};
  };
  
  AnyKinEqSimpleDriver LHeelGroundConstraint ={
    AnyKinLinear HeelPos = {
      AnyFixedRefFrame &Ground = Main.Model.EnvironmentModel.GlobalRef;
      AnyRefNode &Ball = Main.Model.HumanModel.Left.Leg.Seg.Foot.HeelJoint;
    };
    MeasureOrganizer = {1};  // Only the y coordinate
    DriverPos = {0.0};
    DriverVel = {0};
    Reaction.Type = {Off};  // Provide ground reaction
  };  
  
  // Position the Ankles right above the z axis
  AnyKinEqSimpleDriver RAnkleXZ = {
    AnyKinLinear AnklePos = {
      AnyFixedRefFrame &Ground = Main.Model.EnvironmentModel.GlobalRef;
      AnyRefNode &Ankle = ..LegR.Seg.Foot.AnkleJoint;
    };
    MeasureOrganizer = {0,2};  // Only the x coordinate
    DriverPos = {0.0,0.225};
    DriverVel = {0.0,0};
    Reaction.Type = {Off,Off};
  };
  
  AnyKinEqSimpleDriver LAnkleXZ ={
    AnyKinLinear AnklePos = {
      AnyFixedRefFrame &Ground = Main.Model.EnvironmentModel.GlobalRef;
      AnyRefNode &Ankle = ..LegL.Seg.Foot.AnkleJoint;
    };
    MeasureOrganizer = {0,2};  // Only the x coordinate
    DriverPos = {0.0,-0.225};
    DriverVel = {0.0,0};
    Reaction.Type = {Off,Off};
  };
  
  
  
  
  AnyFolder ConditionalContact={
    AnyVar StaticFrictionCoefficient=0.8;
    AnyVar Strength=2000;
    
    AnyFolder ToeLateralContactNodeLeft= {
      
      AnyRefFrame &TargetObject=  ..LegL.Seg.Foot.ToeLateralContactNode;//Location where the force is applied
      AnyRefFrame &BaseObject=Main.Model.EnvironmentModel.GlobalRef; //Object which delivers the forces  
      AnyRefFrame &StrengthObject=TargetObject; //Node used for strength measurement, occasionally this is different from the target object
      
      AnyFolder &DrawRef=Main.DrawSettings; //reference to the folder which contains drawsettings
      //low limit for the strength measure function, if the distance measured along Direction[0] is below this val. the strength will be zero (negative)
      AnyVar UserDefinedLimitLow=-0.05; 
      //high limit for the strength measure function, if the distance measured along Direction[0] is above this val. the strength will be zero
      AnyVar UserDefinedLimitHigh=0.05; 
      
      //high limit for the strength measure function, if the radius measured along the plane with Direction[0] as normal is above this val. the strength will be zero
      AnyVar UserDefinedRadiusLimit=0.4; 
      
      AnyVar Strength =.Strength;  //strength of muscles
      AnyVar StaticFrictionCoefficient=.StaticFrictionCoefficient; //Friction coefficient
      AnyVar ScaleFactor =1; //scale factor for draw vectors it can be set differently than by the drawsettings
      
      
      AnyIntArray Direction={1,0,2}; //first element gives normal direction
      #include  "..\..\..\Body\AAUHuman\ToolBox\FrictionContactMuscles\ContactSurfaceLinPush.any"
    };
    
    
    AnyFolder ToeMedialContactNodeLeft= {
      AnyRefNode &TargetObject = ..LegL.Seg.Foot.ToeMedialContactNode;
      AnyRefFrame &BaseObject=Main.Model.EnvironmentModel.GlobalRef; //Object which delivers the forces  
      AnyRefFrame &StrengthObject=TargetObject; //Node used for strength measurement, occasionally this is different from the target object
      
      AnyFolder &DrawRef=Main.DrawSettings; //reference to the folder which contains drawsettings
      //low limit for the strength measure function, if the distance measured along Direction[0] is below this val. the strength will be zero (negative)
      AnyVar UserDefinedLimitLow=-0.05; 
      //high limit for the strength measure function, if the distance measured along Direction[0] is above this val. the strength will be zero
      AnyVar UserDefinedLimitHigh=0.05; 
      
      //high limit for the strength measure function, if the radius measured along the plane with Direction[0] as normal is above this val. the strength will be zero
      AnyVar UserDefinedRadiusLimit=0.4; 
      
      AnyVar Strength =.Strength;  //strength of muscles
      AnyVar StaticFrictionCoefficient=.StaticFrictionCoefficient; //Friction coefficient
      AnyVar ScaleFactor =1; //scale factor for draw vectors it can be set differently than by the drawsettings
      
      
      AnyIntArray Direction={1,0,2}; //first element gives normal direction
      #include  "..\..\..\Body\AAUHuman\ToolBox\FrictionContactMuscles\ContactSurfaceLinPush.any"
      
    };
    
    
    AnyFolder HeelSupportLeft = {
      AnyRefNode &TargetObject = ..LegL.Seg.Foot.HeelJoint;
      AnyRefFrame &BaseObject=Main.Model.EnvironmentModel.GlobalRef; //Object which delivers the forces  
      AnyRefFrame &StrengthObject=TargetObject; //Node used for strength measurement, occasionally this is different from the target object
      
      AnyFolder &DrawRef=Main.DrawSettings; //reference to the folder which contains drawsettings
      //low limit for the strength measure function, if the distance measured along Direction[0] is below this val. the strength will be zero (negative)
      AnyVar UserDefinedLimitLow=-0.05; 
      //high limit for the strength measure function, if the distance measured along Direction[0] is above this val. the strength will be zero
      AnyVar UserDefinedLimitHigh=0.05; 
      
      //high limit for the strength measure function, if the radius measured along the plane with Direction[0] as normal is above this val. the strength will be zero
      AnyVar UserDefinedRadiusLimit=0.4; 
      
      AnyVar Strength =.Strength;  //strength of muscles
      AnyVar StaticFrictionCoefficient=.StaticFrictionCoefficient; //Friction coefficient
      AnyVar ScaleFactor =1; //scale factor for draw vectors it can be set differently than by the drawsettings
      
      
      AnyIntArray Direction={1,0,2}; //first element gives normal direction
      #include  "..\..\..\Body\AAUHuman\ToolBox\FrictionContactMuscles\ContactSurfaceLinPush.any"
      
    };
    
    AnyFolder ToeMedialContactNodeRight = {
      AnyRefNode &TargetObject = ..LegR.Seg.Foot.ToeMedialContactNode;
      AnyRefFrame &BaseObject=Main.Model.EnvironmentModel.GlobalRef; //Object which delivers the forces  
      AnyRefFrame &StrengthObject=TargetObject; //Node used for strength measurement, occasionally this is different from the target object
      
      AnyFolder &DrawRef=Main.DrawSettings; //reference to the folder which contains drawsettings
      //low limit for the strength measure function, if the distance measured along Direction[0] is below this val. the strength will be zero (negative)
      AnyVar UserDefinedLimitLow=-0.05; 
      //high limit for the strength measure function, if the distance measured along Direction[0] is above this val. the strength will be zero
      AnyVar UserDefinedLimitHigh=0.05; 
      
      //high limit for the strength measure function, if the radius measured along the plane with Direction[0] as normal is above this val. the strength will be zero
      AnyVar UserDefinedRadiusLimit=0.4; 
      
      AnyVar Strength =.Strength;  //strength of muscles
      AnyVar StaticFrictionCoefficient=.StaticFrictionCoefficient; //Friction coefficient
      AnyVar ScaleFactor =1; //scale factor for draw vectors it can be set differently than by the drawsettings
      
      
      AnyIntArray Direction={1,0,2}; //first element gives normal direction
      #include  "..\..\..\Body\AAUHuman\ToolBox\FrictionContactMuscles\ContactSurfaceLinPush.any"
    };
    
    AnyFolder ToeLateralContactNodeRight = {
      AnyRefNode &TargetObject  = ..LegR.Seg.Foot.ToeLateralContactNode;
      AnyRefFrame &BaseObject=Main.Model.EnvironmentModel.GlobalRef; //Object which delivers the forces  
      AnyRefFrame &StrengthObject=TargetObject; //Node used for strength measurement, occasionally this is different from the target object
      
      AnyFolder &DrawRef=Main.DrawSettings; //reference to the folder which contains drawsettings
      //low limit for the strength measure function, if the distance measured along Direction[0] is below this val. the strength will be zero (negative)
      AnyVar UserDefinedLimitLow=-0.05; 
      //high limit for the strength measure function, if the distance measured along Direction[0] is above this val. the strength will be zero
      AnyVar UserDefinedLimitHigh=0.05; 
      
      //high limit for the strength measure function, if the radius measured along the plane with Direction[0] as normal is above this val. the strength will be zero
      AnyVar UserDefinedRadiusLimit=0.4; 
      
      AnyVar Strength =.Strength;  //strength of muscles
      AnyVar StaticFrictionCoefficient=.StaticFrictionCoefficient; //Friction coefficient
      AnyVar ScaleFactor =1; //scale factor for draw vectors it can be set differently than by the drawsettings
      
      
      AnyIntArray Direction={1,0,2}; //first element gives normal direction
      #include  "..\..\..\Body\AAUHuman\ToolBox\FrictionContactMuscles\ContactSurfaceLinPush.any"
      
    };
    
    
    
    AnyFolder HeelSupportRight = {
      
      AnyRefNode &TargetObject = ..LegR.Seg.Foot.HeelJoint;
      AnyRefFrame &BaseObject=Main.Model.EnvironmentModel.GlobalRef; //Object which delivers the forces  
      AnyRefFrame &StrengthObject=TargetObject; //Node used for strength measurement, occasionally this is different from the target object
      
      AnyFolder &DrawRef=Main.DrawSettings; //reference to the folder which contains drawsettings
      //low limit for the strength measure function, if the distance measured along Direction[0] is below this val. the strength will be zero (negative)
      AnyVar UserDefinedLimitLow=-0.05; 
      //high limit for the strength measure function, if the distance measured along Direction[0] is above this val. the strength will be zero
      AnyVar UserDefinedLimitHigh=0.05; 
      
      //high limit for the strength measure function, if the radius measured along the plane with Direction[0] as normal is above this val. the strength will be zero
      AnyVar UserDefinedRadiusLimit=0.4; 
      
      AnyVar Strength =.Strength;  //strength of muscles
      AnyVar StaticFrictionCoefficient=.StaticFrictionCoefficient; //Friction coefficient
      AnyVar ScaleFactor =1; //scale factor for draw vectors it can be set differently than by the drawsettings
      
      
      AnyIntArray Direction={1,0,2}; //first element gives normal direction
      #include  "..\..\..\Body\AAUHuman\ToolBox\FrictionContactMuscles\ContactSurfaceLinPush.any"
      
      
    };
    
  };   
  
  AnyKinEqSimpleDriver CoMDriver={
    AnyKinCoM CoM = {
      AnyFolder &Body1 = Main.Model.HumanModel.Right.ShoulderArm.Seg.Hand;
      AnyFolder &Body2= Main.Model.HumanModel.Right.ShoulderArm.Seg.Ulna;
      AnyFolder &Body3 = Main.Model.HumanModel.Right.ShoulderArm.Seg.Radius;
      AnyFolder &Body4 = Main.Model.HumanModel.Right.ShoulderArm.Seg.Humerus;
      AnyFolder &Body5= Main.Model.HumanModel.Right.ShoulderArm.Seg.Clavicula;
      AnyFolder &Body6= Main.Model.HumanModel.Right.ShoulderArm.Seg.Scapula;
      AnyFolder &Body7 = Main.Model.HumanModel.Right.ShoulderArm.Seg.Hand;
      AnyFolder &Body8= Main.Model.HumanModel.Right.ShoulderArm.Seg.Ulna;
      AnyFolder &Body9 = Main.Model.HumanModel.Right.ShoulderArm.Seg.Radius;
      AnyFolder &Body10 = Main.Model.HumanModel.Right.ShoulderArm.Seg.Humerus;
      AnyFolder &Body11= Main.Model.HumanModel.Right.ShoulderArm.Seg.Clavicula;
      AnyFolder &Body12= Main.Model.HumanModel.Right.ShoulderArm.Seg.Scapula;
      AnyFolder &Body13  = Main.Model.HumanModel.Trunk.SegmentsLumbar.L1Seg;
      AnyFolder &Body14=   Main.Model.HumanModel.Trunk.SegmentsLumbar.L2Seg;
      AnyFolder &Body15=   Main.Model.HumanModel.Trunk.SegmentsLumbar.L3Seg;
      AnyFolder &Body16=   Main.Model.HumanModel.Trunk.SegmentsLumbar.L4Seg;
      AnyFolder &Body17=   Main.Model.HumanModel.Trunk.SegmentsLumbar.L5Seg;
      AnyFolder &Body18=   Main.Model.HumanModel.Trunk.SegmentsLumbar.PelvisSeg;      
      AnyFolder &Body19=   Main.Model.HumanModel.Trunk.SegmentsThorax.ThoraxSeg;
      AnyFolder &Body20=   Main.Model.HumanModel.Trunk.SegmentsThorax.SkullSeg;
      AnyFolder &Body21=   Main.Model.HumanModel.Right.Leg.Seg.Thigh;
      AnyFolder &Body22=   Main.Model.HumanModel.Right.Leg.Seg.Shank;
      AnyFolder &Body23=   Main.Model.HumanModel.Right.Leg.Seg.Foot;
      
      AnyFolder &Body24=   Main.Model.HumanModel.Left.Leg.Seg.Thigh;
      AnyFolder &Body25=   Main.Model.HumanModel.Left.Leg.Seg.Shank;
      AnyFolder &Body26=   Main.Model.HumanModel.Left.Leg.Seg.Foot;
      
    };
    Reaction.Type={Off,Off};
    MeasureOrganizer = {0,2};  // Only the x and z directions
    DriverPos ={0.05,0};
    DriverVel={0,0};
    
  };
  
  
  AnyKinEqFourierDriver PelvisDriver={
    AnyKinLinear PelvisGroundLin ={
      AnyFixedRefFrame &Ground = Main.Model.EnvironmentModel.GlobalRef;
      AnyRefFrame &Pelvis = ..RefHM.Trunk.SegmentsLumbar.PelvisSeg;
      
    };
    
    MeasureOrganizer = {0,2};  // Only the x and z directions
    Freq=1/Main.Study.tEnd;
    A = {{0.0,0.03},{0,0.03}};
    B = {{0,0},{pi*0,pi*0.5} }; 
    Type=Cos;
    Reaction.Type = {Off,Off};
  };
  
  
  AnyFolder &RefHM = Main.Model.HumanModel;
  
  
  AnyFolder &ref=Main.Model.HumanModel.Trunk;
  
  
  
  // ************************************
  // Drivers for the spine
  // ************************************
  
  //Neck driver 
  AnyKinEqSimpleDriver NeckJntDriver = {
    AnyRevoluteJoint &T12L1Joint = ...HumanModel.Interface.Trunk.NeckJoint;
    DriverPos = pi/180*{.JntPos.NeckExtension};
    DriverVel = pi/180*{.JntVel.NeckExtension};
    Reaction.Type = {Off};
  };
  
  //Thorax pelvis rotation driver
  AnyKinEqSimpleDriver PostureDriver ={
    //AnyKinMeasureOrg &Ref2 = ...HumanModel.Interface.Trunk.PelvisThoraxLateralBending;        
    AnyKinMeasureOrg &Ref3 = ...HumanModel.Interface.Trunk.PelvisThoraxRotation;   
    //AnyKinMeasureOrg &Ref1 = ...HumanModel.Interface.Trunk.PelvisThoraxExtension;
    
    DriverPos = pi/180*{
      //     .JntPos.PelvisThoraxLateralBending,
      .JntPos.PelvisThoraxRotation
      // .JntPos.PelvisThoraxExtension
    };
    DriverVel = pi/180*{
      //.JntVel.PelvisThoraxLateralBending,
      .JntVel.PelvisThoraxRotation
      //.JntVel.PelvisThoraxExtension
    };
    Reaction.Type = {Off};  
  };  
  
  
  // ************************************
  // Drivers for the right arm
  // ************************************
  
  
  //Sterno clavicular joint driver
  AnyKinEqSimpleDriver SCDriverRight ={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Right.SternoClavicularProtraction;
    AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Right.SternoClavicularElevation;
    AnyKinMeasureOrg &ref3 =...HumanModel.Interface.Right.SternoClavicularAxialRotation;
    DriverPos = pi/180*{
      .JntPos.Right.SternoClavicularProtraction,
      .JntPos.Right.SternoClavicularElevation,
      .JntPos.Right.SternoClavicularAxialRotation
    };
    DriverVel = {
      .JntVel.Right.SternoClavicularProtraction,
      .JntVel.Right.SternoClavicularElevation,
      .JntVel.Right.SternoClavicularAxialRotation
    };
    Reaction.Type={Off,Off,Off};
  };
  
  
  
  //Glenohumeral joint driver
  AnyKinEqSimpleDriver GHDriverRight={
    //AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Right.GlenohumeralAbduction;
    //AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Right.GlenohumeralFlexion;
    AnyKinMeasureOrg &ref3 =...HumanModel.Interface.Right.GlenohumeralExternalRotation;
    DriverPos=pi/180*{
      //.JntPos.Right.GlenohumeralAbduction,  //GH joint
      //.JntPos.Right.GlenohumeralFlexion,  //GH joint
      .JntPos.Right.GlenohumeralExternalRotation  //GH joint
    };    
    DriverVel = pi/180*{
      //.JntVel.Right.GlenohumeralAbduction,  //GH joint
      //.JntVel.Right.GlenohumeralFlexion,  //GH joint
      .JntVel.Right.GlenohumeralExternalRotation  //GH joint
    };    
    Reaction.Type={Off};
  };
  
  //Elbow pronation driver 
  AnyKinEqSimpleDriver ElbowPSDriverRight={
    AnyKinMeasureOrg &Elbow =...HumanModel.Interface.Right.ElbowPronation;
    DriverPos= pi/180*{.JntPos.Right.ElbowPronation };  
    DriverVel = pi/180*{.JntVel.Right.ElbowPronation };  
    Reaction.Type={Off};
  };
  
  //Wrist driver 
  AnyKinEqSimpleDriver WristDriverRight ={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Right.WristFlexion;
    AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Right.WristAbduction;
    DriverPos = pi/180*{
      .JntPos.Right.WristFlexion,
      .JntPos.Right.WristAbduction
    };
    
    DriverVel = pi/180*{
      .JntVel.Right.WristFlexion,
      .JntVel.Right.WristAbduction};
    Reaction.Type={Off,Off};
  };
  
  // ************************************
  // Drivers for the left arm
  // ************************************
  
  //Sterno clavicular joint driver
  AnyKinEqSimpleDriver SCDriverLeft ={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Left.SternoClavicularProtraction;
    AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Left.SternoClavicularElevation;
    AnyKinMeasureOrg &ref3 =...HumanModel.Interface.Left.SternoClavicularAxialRotation;
    
    DriverPos = pi/180*{
      .JntPos.Left.SternoClavicularProtraction,
      .JntPos.Left.SternoClavicularElevation,
      .JntPos.Left.SternoClavicularAxialRotation
    };
    
    DriverVel = pi/180*{
      .JntVel.Left.SternoClavicularProtraction,
      .JntVel.Left.SternoClavicularElevation,
      .JntVel.Left.SternoClavicularAxialRotation
    };
    
    Reaction.Type={Off,Off,Off};
  };
  //Glenohumeral joint driver
  AnyKinEqSimpleDriver GHDriverLeft={
    //AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Left.GlenohumeralAbduction;
    //AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Left.GlenohumeralFlexion;
    AnyKinMeasureOrg &ref3 =...HumanModel.Interface.Left.GlenohumeralExternalRotation;
    DriverPos=pi/180*{
      //.JntPos.Left.GlenohumeralAbduction,  //GH joint
      //.JntPos.Left.GlenohumeralFlexion,  //GH joint
      .JntPos.Left.GlenohumeralExternalRotation  //GH joint
    };    
    DriverVel = pi/180*{
      //.JntVel.Left.GlenohumeralAbduction,  //GH joint
      //.JntVel.Left.GlenohumeralFlexion,  //GH joint
      .JntVel.Left.GlenohumeralExternalRotation  //GH joint
    };    
    Reaction.Type={Off};
  };
  
  //Elbow pronation driver 
  AnyKinEqSimpleDriver ElbowPSDriverLeft={
    AnyKinMeasureOrg &Elbow =...HumanModel.Interface.Left.ElbowPronation;
    DriverPos= pi/180*{.JntPos.Left.ElbowPronation };  
    DriverVel = pi/180*{.JntVel.Left.ElbowPronation };  
    Reaction.Type={Off};
  };
  
  //Wrist driver
  AnyKinEqSimpleDriver WristDriverLeft ={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Left.WristFlexion;
    AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Left.WristAbduction;
    DriverPos = pi/180*{
      .JntPos.Left.WristFlexion,
      .JntPos.Left.WristAbduction};
    
    DriverVel = pi/180*{
      .JntVel.Left.WristFlexion,
      .JntVel.Left.WristAbduction};
    Reaction.Type={Off,Off};
  };
  
  
  // ************************************
  // Drivers for the right leg
  // ************************************
  
  //Hip driver 
  AnyKinEqSimpleDriver HipDriverRight={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Right.HipFlexion;
    AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Right.HipExternalRotation;
    // AnyKinMeasureOrg &ref3 =...HumanModel.Interface.Right.HipAbduction;
    DriverPos= pi/180*{
      .JntPos.Right.HipFlexion,
      .JntPos.Right.HipExternalRotation
      // .JntPos.Right.HipAbduction
    };    
    DriverVel = pi/180*{
      .JntVel.Right.HipFlexion,
      .JntVel.Right.HipExternalRotation
      //      .JntVel.Right.HipAbduction
    };    
    Reaction.Type={Off,Off};
    
  };
  
  //Knee driver
  AnyKinEqSimpleDriver KneeDriverRight={
    AnyKinMeasureOrg  &Knee = ...HumanModel.Interface.Right.KneeFlexion;
    DriverPos=pi/180*{.JntPos.Right.KneeFlexion};  
    DriverVel = pi/180*{.JntVel.Right.KneeFlexion};  
    Reaction.Type={Off};
  };
  
  //Ankle driver
  AnyKinEqSimpleDriver AnkleDriverRight={
    //AnyKinMeasureOrg &ref1=...HumanModel.Interface.Right.AnklePlantarFlexion;
    AnyKinMeasureOrg &ref2=...HumanModel.Interface.Right.AnkleEversion;
    DriverPos = pi/180*{
      //.JntPos.Right.AnklePlantarFlexion,
      .JntPos.Right.AnkleEversion
    };  
    DriverVel=pi/180*{
      //.JntVel.Right.AnklePlantarFlexion,
      .JntVel.Right.AnkleEversion
    };  
    Reaction.Type={Off};
  };
  
  
  
  // ************************************
  // Drivers for the left leg
  // ************************************
  
  //Hip driver 
  AnyKinEqSimpleDriver HipDriverLeft={
    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Left.HipFlexion;
    AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Left.HipExternalRotation;
    // AnyKinMeasureOrg &ref3 =...HumanModel.Interface.Left.HipAbduction;
    DriverPos= pi/180*{
      .JntPos.Left.HipFlexion,
      .JntPos.Left.HipExternalRotation
      // .JntPos.Left.HipAbduction
    };    
    DriverVel = pi/180*{
      .JntVel.Left.HipFlexion,
      .JntVel.Left.HipExternalRotation
      //      .JntVel.Left.HipAbduction
    };    
    Reaction.Type={Off,Off};
    
  };
  
  //Knee driver
  AnyKinEqSimpleDriver KneeDriverLeft={
    AnyKinMeasureOrg  &Knee = ...HumanModel.Interface.Left.KneeFlexion;
    DriverPos=pi/180*{.JntPos.Left.KneeFlexion};  
    DriverVel = pi/180*{.JntVel.Left.KneeFlexion};  
    Reaction.Type={Off};
  };
  
  //Ankle driver
  AnyKinEqSimpleDriver AnkleDriverLeft={
    //AnyKinMeasureOrg &ref1=...HumanModel.Interface.Left.AnklePlantarFlexion;
    AnyKinMeasureOrg &ref2=...HumanModel.Interface.Left.AnkleEversion;
    DriverPos = pi/180*{
      //.JntPos.Left.AnklePlantarFlexion,
      .JntPos.Left.AnkleEversion
    };  
    DriverVel=pi/180*{
      //.JntVel.Left.AnklePlantarFlexion,
      .JntVel.Left.AnkleEversion
    };  
    Reaction.Type={Off};
  };
  
  AnyFolder  &ThighR=..HumanModel.Right.Leg.Seg.Thigh;
  ThighR={
    AnyRefNode SupportNode ={sRel={-0.0,0.20,0.05};
    };
    
  };
  
  AnyReacForce GloveThighRightReaction={
    AnySphericalJoint GloveThighRight={
      // AnyRefNode &ref1=...HumanModel.Trunk.SegmentsLumbar.PelvisSeg.HipJointLeft;
      AnyRefNode &ref1=....HumanModel.Right.Leg.Seg.Thigh.SupportNode; 
      AnySeg &ref2=....HumanModel.Right.ShoulderArm.Seg.Glove;
    };
  };
  
  
  AnyFolder  &ThighL=..HumanModel.Left.Leg.Seg.Thigh;
  ThighL={
    AnyRefNode SupportNode ={sRel={-0.0,0.20,-0.05};
    };
    
  };
  
  AnyReacForce GloveThighLeftReaction={
    AnySphericalJoint GloveThighLeft={
      // AnyRefNode &ref1=...HumanModel.Trunk.SegmentsLumbar.PelvisSeg.HipJointLeft;
      AnyRefNode &ref1=....HumanModel.Left.Leg.Seg.Thigh.SupportNode; 
      AnySeg &ref2=....HumanModel.Left.ShoulderArm.Seg.Glove;
    };
  };
  
};//Drivers

